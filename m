Return-Path: <driverdev-devel-bounces@linuxdriverproject.org>
X-Original-To: lists+driverdev-devel@lfdr.de
Delivered-To: lists+driverdev-devel@lfdr.de
Received: from hemlock.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id 741AB142770
	for <lists+driverdev-devel@lfdr.de>; Mon, 20 Jan 2020 10:37:55 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id 8CF1B86D73;
	Mon, 20 Jan 2020 09:37:53 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id LwPqEf2Urc2r; Mon, 20 Jan 2020 09:37:52 +0000 (UTC)
Received: from ash.osuosl.org (ash.osuosl.org [140.211.166.34])
	by hemlock.osuosl.org (Postfix) with ESMTP id 3249586747;
	Mon, 20 Jan 2020 09:37:33 +0000 (UTC)
X-Original-To: devel@linuxdriverproject.org
Delivered-To: driverdev-devel@osuosl.org
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
 by ash.osuosl.org (Postfix) with ESMTP id 281CB1BF47D
 for <devel@linuxdriverproject.org>; Mon, 20 Jan 2020 09:37:30 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by fraxinus.osuosl.org (Postfix) with ESMTP id 16782853E5
 for <devel@linuxdriverproject.org>; Mon, 20 Jan 2020 09:37:30 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id IQOMoYjFDxpt for <devel@linuxdriverproject.org>;
 Mon, 20 Jan 2020 09:37:15 +0000 (UTC)
X-Greylist: delayed 00:05:13 by SQLgrey-1.7.6
Received: from eu-smtp-delivery-167.mimecast.com
 (eu-smtp-delivery-167.mimecast.com [146.101.78.167])
 by fraxinus.osuosl.org (Postfix) with ESMTPS id C73968544C
 for <devel@driverdev.osuosl.org>; Mon, 20 Jan 2020 09:37:14 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=displaylink.com;
 s=mimecast20151025; t=1579513032;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=ApRnN9wC3sdiHO1MLK1bttpD5E9TU1iSYNQt6kcIrTA=;
 b=lscb2o1stWy6a9JCq77DAU3zTHRCo9xCY1hmEibXaH3nAam04NEmK+WMJ1GTepctFBivlY
 9DFM/Rcl1gnZGPE+N1F4s0zJSLH97RpUEGcHOJ7zFQsV/JKIi71brQPmtJt/UMuS0wk3rw
 ou1y/1rDP5BGVUhCfnzvSXS8Jd/NTtc=
Received: from EUR01-HE1-obe.outbound.protection.outlook.com
 (mail-he1eur01lp2057.outbound.protection.outlook.com [104.47.0.57]) (Using
 TLS) by relay.mimecast.com with ESMTP id
 uk-mta-156-ZVN_OmjfMqW8a3C4nDkrcw-1; Mon, 20 Jan 2020 09:30:45 +0000
Received: from VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM (52.134.27.157) by
 VI1PR10MB2223.EURPRD10.PROD.OUTLOOK.COM (20.177.60.81) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.2644.18; Mon, 20 Jan 2020 09:30:43 +0000
Received: from VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::7cc2:599e:25ce:49b2]) by VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::7cc2:599e:25ce:49b2%6]) with mapi id 15.20.2644.024; Mon, 20 Jan 2020
 09:30:43 +0000
From: Vladimir Stankovic <vladimir.stankovic@displaylink.com>
To: "gregkh@linuxfoundation.org" <gregkh@linuxfoundation.org>
Subject: staging: Add MA USB Host driver
Thread-Topic: staging: Add MA USB Host driver
Thread-Index: AQHVz3K8AIv1fzzvAkakA28tJGe9z6fzRtUg
Date: Mon, 20 Jan 2020 09:30:43 +0000
Message-ID: <VI1PR10MB19658F2B6FDAD88FAA05546591320@VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM>
References: <VI1PR10MB19659B32E563620B4D63AF1A91320@VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM>,
 <VI1PR10MB1965A077526FE296608D5B1191320@VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM>
In-Reply-To: <VI1PR10MB1965A077526FE296608D5B1191320@VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: yes
X-MS-TNEF-Correlator: 
x-originating-ip: [80.93.235.40]
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: b49ff636-2880-4ef7-bf15-08d79d8b6c09
x-ms-traffictypediagnostic: VI1PR10MB2223:
x-ms-exchange-transport-forked: True
x-microsoft-antispam-prvs: <VI1PR10MB2223EC40598BE488EC802E3591320@VI1PR10MB2223.EURPRD10.PROD.OUTLOOK.COM>
x-ms-oob-tlc-oobclassifiers: OLM:279;
x-forefront-prvs: 0288CD37D9
x-forefront-antispam-report: SFV:NSPM;
 SFS:(10009020)(4636009)(136003)(366004)(396003)(346002)(376002)(39840400004)(189003)(199004)(107886003)(8936002)(6506007)(8676002)(26005)(7696005)(2906002)(81166006)(186003)(86362001)(478600001)(9686003)(6916009)(66616009)(66556008)(66476007)(64756008)(66446008)(33656002)(66946007)(4326008)(55016002)(76116006)(71200400001)(5660300002)(52536014)(44832011)(54906003)(316002)(2940100002)(81156014);
 DIR:OUT; SFP:1101; SCL:1; SRVR:VI1PR10MB2223;
 H:VI1PR10MB1965.EURPRD10.PROD.OUTLOOK.COM; FPR:; SPF:None; LANG:en;
 PTR:InfoNoRecords; MX:1; A:1; 
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam: BCL:0;
x-microsoft-antispam-message-info: IRdBhfH1oOEqGyHl0vmr9bn7ejGNqRTajvavKx7snwvJBKF6FDTJVnZenMS8E9fvKy5JY4yjWRNDWkjxDipPdUa1Fc0U6LS2lDPAiY/HbOxamxdpqCtTbA1H3SkzkX6H3fLqVywkOw/ajKV4q9lJeyjsmhSGwSPRDmF3AWMHbHSKTIry/g+4qnZkobk4MeqQrV61irlGj2r25iu5rcUS7V5SbaSZfRvNFokyCSDL8NDVDRkpg/74VC2Q+3pg2ipXESDoz9AYAcO2o0UYZtZWyw9YtQK8FNy67SCN9/3wds5I7iq4RpcF7Vufs2mSSFrVB3Xzg/v5ymV2xy6MhUoTFB+J9XHuXJ0+RZqVC4n4Keo0TZJwu4Cu2YYs7f7Dho9xlpU8DApHuLE8y8lsnAGIZgCZRn2WLAfFpa8K2B31cstpzoqBzIPlQlknsN3AUGYp
MIME-Version: 1.0
X-OriginatorOrg: displaylink.com
X-MS-Exchange-CrossTenant-Network-Message-Id: b49ff636-2880-4ef7-bf15-08d79d8b6c09
X-MS-Exchange-CrossTenant-originalarrivaltime: 20 Jan 2020 09:30:43.3178 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: a4bda75a-b444-4312-9c90-44a7c4b2c91a
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: yybuRareu2R2G/MHYIvP7uhKlC9s9/uD40S4grMy/oGD0DEQ0I8Lg2/Y6gZkYvfyTbgYKuIup16ezEvT69NQzE8wVYSMC+ThDG47FY7abxIHx6iqByaT8pau1ZpOBI4p
X-MS-Exchange-Transport-CrossTenantHeadersStamped: VI1PR10MB2223
X-MC-Unique: ZVN_OmjfMqW8a3C4nDkrcw-1
X-Mimecast-Spam-Score: 0
X-Mimecast-Originator: displaylink.com
Content-Type: multipart/mixed;
 boundary="_002_VI1PR10MB19658F2B6FDAD88FAA05546591320VI1PR10MB1965EURP_"
X-BeenThere: driverdev-devel@linuxdriverproject.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux Driver Project Developer List
 <driverdev-devel.linuxdriverproject.org>
List-Unsubscribe: <http://driverdev.linuxdriverproject.org/mailman/options/driverdev-devel>, 
 <mailto:driverdev-devel-request@linuxdriverproject.org?subject=unsubscribe>
List-Archive: <http://driverdev.linuxdriverproject.org/pipermail/driverdev-devel/>
List-Post: <mailto:driverdev-devel@linuxdriverproject.org>
List-Help: <mailto:driverdev-devel-request@linuxdriverproject.org?subject=help>
List-Subscribe: <http://driverdev.linuxdriverproject.org/mailman/listinfo/driverdev-devel>, 
 <mailto:driverdev-devel-request@linuxdriverproject.org?subject=subscribe>
Cc: "devel@driverdev.osuosl.org" <devel@driverdev.osuosl.org>,
 Petar Kovacevic <petar.kovacevic@displaylink.com>,
 Nikola Simic <nikola.simic@displaylink.com>,
 "linux-kernel@vger.kernel.org" <linux-kernel@vger.kernel.org>,
 Marko Miljkovic <marko.miljkovic@displaylink.com>,
 Stefan Lugonjic <stefan.lugonjic@displaylink.com>
Errors-To: driverdev-devel-bounces@linuxdriverproject.org
Sender: "devel" <driverdev-devel-bounces@linuxdriverproject.org>

--_002_VI1PR10MB19658F2B6FDAD88FAA05546591320VI1PR10MB1965EURP_
Content-Type: text/plain; charset=WINDOWS-1252
Content-Transfer-Encoding: quoted-printable

MA-USB Host driver provides USB connectivity over an available=0Anetwork, a=
llowing host device to access remote USB devices attached=0Ato one or more =
MA USB devices (accessible via network).=0A=0AThis driver has been develope=
d to enable the host to communicate=0Awith DislayLink products supporting M=
A USB protocol (MA USB device,=0Ain terms of MA USB Specification).=0A=0AMA=
-USB protocol used by MA-USB Host driver has been implemented in=0Aaccordan=
ce with MA USB Specification Release 1.0b.=0A=0AThis driver depends on the =
functions provided by DisplayLink's=0Auser-space driver.=0A=0ASigned-off-by=
: Vladimir Stankovic <vladimir.stankovic@displaylink.com>=0A---=0A drivers/=
staging/Kconfig                       |    3 +=0A drivers/staging/Makefile =
                     |    1 +=0A drivers/staging/mausb_host/Kconfig        =
    |   15 +=0A drivers/staging/mausb_host/Makefile           |   30 +=0A .=
../mausb_host/include/common/ma_usb.h        |  851 ++++++++=0A .../mausb_h=
ost/include/common/mausb_address.h |   38 +=0A .../include/common/mausb_dri=
ver_status.h      |   20 +=0A .../mausb_host/include/common/mausb_event.h  =
 |  228 +++=0A drivers/staging/mausb_host/include/hcd/hub.h  |  120 ++=0A d=
rivers/staging/mausb_host/include/hcd/vhcd.h |   81 +=0A .../mausb_host/inc=
lude/hpal/data_common.h     |   67 +=0A .../staging/mausb_host/include/hpal=
/data_in.h |   18 +=0A .../mausb_host/include/hpal/data_out.h        |   22=
 +=0A .../staging/mausb_host/include/hpal/hpal.h    |  174 ++=0A .../mausb_=
host/include/hpal/isoch_in.h        |   22 +=0A .../mausb_host/include/hpal=
/isoch_out.h       |   21 +=0A .../mausb_host/include/hpal/mausb_events.h  =
  |   97 +=0A .../include/hpal/network_callbacks.h          |   20 +=0A ...=
/mausb_host/include/link/mausb_ip_link.h   |   89 +=0A .../include/utils/ma=
usb_data_iterator.h       |   55 +=0A .../mausb_host/include/utils/mausb_lo=
gs.h     |   35 +=0A .../mausb_host/include/utils/mausb_mmap.h     |   22 +=
=0A .../include/utils/mausb_ring_buffer.h         |   53 +=0A .../mausb_hos=
t/include/utils/mausb_version.h  |   17 +=0A drivers/staging/mausb_host/src=
/hcd/hub.c      | 1801 +++++++++++++++++=0A .../staging/mausb_host/src/hcd/=
module_init.c  |  239 +++=0A drivers/staging/mausb_host/src/hcd/vhcd.c     =
|  216 ++=0A .../staging/mausb_host/src/hpal/data_common.c |  139 ++=0A dri=
vers/staging/mausb_host/src/hpal/data_in.c |   82 +=0A .../staging/mausb_ho=
st/src/hpal/data_out.c    |  207 ++=0A drivers/staging/mausb_host/src/hpal/=
hpal.c    | 1327 ++++++++++++=0A .../staging/mausb_host/src/hpal/isoch_in.c=
    |  243 +++=0A .../staging/mausb_host/src/hpal/isoch_out.c   |  362 ++++=
=0A .../mausb_host/src/hpal/mausb_events.c        |  661 ++++++=0A .../maus=
b_host/src/hpal/network_callbacks.c   |  162 ++=0A .../mausb_host/src/link/=
mausb_ip_link.c       |  364 ++++=0A .../src/utils/mausb_data_iterator.c   =
        |  300 +++=0A .../staging/mausb_host/src/utils/mausb_mmap.c |  358 =
++++=0A .../mausb_host/src/utils/mausb_ring_buffer.c  |  140 ++=0A 39 files=
 changed, 8700 insertions(+)=0A create mode 100644 drivers/staging/mausb_ho=
st/Kconfig=0A create mode 100644 drivers/staging/mausb_host/Makefile=0A cre=
ate mode 100644 drivers/staging/mausb_host/include/common/ma_usb.h=0A creat=
e mode 100644 drivers/staging/mausb_host/include/common/mausb_address.h=0A =
create mode 100644 drivers/staging/mausb_host/include/common/mausb_driver_s=
tatus.h=0A create mode 100644 drivers/staging/mausb_host/include/common/mau=
sb_event.h=0A create mode 100644 drivers/staging/mausb_host/include/hcd/hub=
.h=0A create mode 100644 drivers/staging/mausb_host/include/hcd/vhcd.h=0A c=
reate mode 100644 drivers/staging/mausb_host/include/hpal/data_common.h=0A =
create mode 100644 drivers/staging/mausb_host/include/hpal/data_in.h=0A cre=
ate mode 100644 drivers/staging/mausb_host/include/hpal/data_out.h=0A creat=
e mode 100644 drivers/staging/mausb_host/include/hpal/hpal.h=0A create mode=
 100644 drivers/staging/mausb_host/include/hpal/isoch_in.h=0A create mode 1=
00644 drivers/staging/mausb_host/include/hpal/isoch_out.h=0A create mode 10=
0644 drivers/staging/mausb_host/include/hpal/mausb_events.h=0A create mode =
100644 drivers/staging/mausb_host/include/hpal/network_callbacks.h=0A creat=
e mode 100644 drivers/staging/mausb_host/include/link/mausb_ip_link.h=0A cr=
eate mode 100644 drivers/staging/mausb_host/include/utils/mausb_data_iterat=
or.h=0A create mode 100644 drivers/staging/mausb_host/include/utils/mausb_l=
ogs.h=0A create mode 100644 drivers/staging/mausb_host/include/utils/mausb_=
mmap.h=0A create mode 100644 drivers/staging/mausb_host/include/utils/mausb=
_ring_buffer.h=0A create mode 100644 drivers/staging/mausb_host/include/uti=
ls/mausb_version.h=0A create mode 100644 drivers/staging/mausb_host/src/hcd=
/hub.c=0A create mode 100644 drivers/staging/mausb_host/src/hcd/module_init=
.c=0A create mode 100644 drivers/staging/mausb_host/src/hcd/vhcd.c=0A creat=
e mode 100644 drivers/staging/mausb_host/src/hpal/data_common.c=0A create m=
ode 100644 drivers/staging/mausb_host/src/hpal/data_in.c=0A create mode 100=
644 drivers/staging/mausb_host/src/hpal/data_out.c=0A create mode 100644 dr=
ivers/staging/mausb_host/src/hpal/hpal.c=0A create mode 100644 drivers/stag=
ing/mausb_host/src/hpal/isoch_in.c=0A create mode 100644 drivers/staging/ma=
usb_host/src/hpal/isoch_out.c=0A create mode 100644 drivers/staging/mausb_h=
ost/src/hpal/mausb_events.c=0A create mode 100644 drivers/staging/mausb_hos=
t/src/hpal/network_callbacks.c=0A create mode 100644 drivers/staging/mausb_=
host/src/link/mausb_ip_link.c=0A create mode 100644 drivers/staging/mausb_h=
ost/src/utils/mausb_data_iterator.c=0A create mode 100644 drivers/staging/m=
ausb_host/src/utils/mausb_mmap.c=0A create mode 100644 drivers/staging/maus=
b_host/src/utils/mausb_ring_buffer.c=0A=0A
--_002_VI1PR10MB19658F2B6FDAD88FAA05546591320VI1PR10MB1965EURP_
Content-Type: text/x-patch; name=0001-staging-Add-MA-USB-Host-driver.patch;
	charset=WINDOWS-1252
Content-Description: 0001-staging-Add-MA-USB-Host-driver.patch
Content-Disposition: attachment;
	filename="0001-staging-Add-MA-USB-Host-driver.patch"; size=270387;
	creation-date="Mon, 20 Jan 2020 09:18:19 GMT";
	modification-date="Mon, 20 Jan 2020 09:20:33 GMT"
Content-ID: <8992B061778B1947949637BB82FB3B17@displaylinkltd.onmicrosoft.com>
Content-Transfer-Encoding: base64

ZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9LY29uZmlnIGIvZHJpdmVycy9zdGFnaW5nL0tj
b25maWcNCmluZGV4IGJhY2NkN2M4ODNjYy4uY2Q5NDg1ZWQ5OGU3IDEwMDY0NA0KLS0tIGEvZHJp
dmVycy9zdGFnaW5nL0tjb25maWcNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9LY29uZmlnDQpAQCAt
MTEzLDYgKzExMyw3IEBAIHNvdXJjZSAiZHJpdmVycy9zdGFnaW5nL2ZpZWxkYnVzL0tjb25maWci
DQogc291cmNlICJkcml2ZXJzL3N0YWdpbmcva3BjMjAwMC9LY29uZmlnIg0KIA0KIHNvdXJjZSAi
ZHJpdmVycy9zdGFnaW5nL3d1c2Jjb3JlL0tjb25maWciDQorDQogc291cmNlICJkcml2ZXJzL3N0
YWdpbmcvdXdiL0tjb25maWciDQogDQogc291cmNlICJkcml2ZXJzL3N0YWdpbmcvZXhmYXQvS2Nv
bmZpZyINCkBAIC0xMjMsNCArMTI0LDYgQEAgc291cmNlICJkcml2ZXJzL3N0YWdpbmcvaHAvS2Nv
bmZpZyINCiANCiBzb3VyY2UgImRyaXZlcnMvc3RhZ2luZy93ZngvS2NvbmZpZyINCiANCitzb3Vy
Y2UgImRyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L0tjb25maWciDQorDQogZW5kaWYgIyBTVEFH
SU5HDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL01ha2VmaWxlIGIvZHJpdmVycy9zdGFn
aW5nL01ha2VmaWxlDQppbmRleCBmZGQwM2ZkNmU3MDQuLjBjNWM5YjE2YzE1MSAxMDA2NDQNCi0t
LSBhL2RyaXZlcnMvc3RhZ2luZy9NYWtlZmlsZQ0KKysrIGIvZHJpdmVycy9zdGFnaW5nL01ha2Vm
aWxlDQpAQCAtNTIsMyArNTIsNCBAQCBvYmotJChDT05GSUdfU1RBR0lOR19FWEZBVF9GUykJKz0g
ZXhmYXQvDQogb2JqLSQoQ09ORklHX1FMR0UpCQkrPSBxbGdlLw0KIG9iai0kKENPTkZJR19ORVRf
VkVORE9SX0hQKQkrPSBocC8NCiBvYmotJChDT05GSUdfV0ZYKQkJKz0gd2Z4Lw0KK29iai0kKENP
TkZJR19IT1NUX01BVVNCKQkrPSBtYXVzYl9ob3N0Lw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3Rh
Z2luZy9tYXVzYl9ob3N0L0tjb25maWcgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9LY29u
ZmlnDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi45NTcyNTE1OTFi
NTMNCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L0tjb25m
aWcNCkBAIC0wLDAgKzEsMTUgQEANCisjDQorIyBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERp
c3BsYXlMaW5rIChVSykgTHRkLg0KKyMNCisjIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0
ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorIyBMaWNlbnNl
IHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBh
cmNoaXZlIGZvcg0KKyMgbW9yZSBkZXRhaWxzLg0KKyMNCisNCitjb25maWcgSE9TVF9NQVVTQg0K
Kwlib29sICJNQS1VU0IgSG9zdCBEcml2ZXIiDQorCWRlcGVuZHMgb24gVVNCPXkNCisJZGVmYXVs
dCB5DQorCWhlbHANCisJCVRoaXMgaXMgYSBNQS1VU0IgSG9zdCBkcml2ZXIgd2hpY2ggZW5hYmxl
cyBob3N0IGNvbW11bmljYXRpb24NCisJCXZpYSBNQS1VU0IgcHJvdG9jb2wgc3RhY2suDQpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvTWFrZWZpbGUgYi9kcml2ZXJzL3N0
YWdpbmcvbWF1c2JfaG9zdC9NYWtlZmlsZQ0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAw
MDAwMDAwMDAwMC4uOGVmM2I4YzQ0YmJkDQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0
YWdpbmcvbWF1c2JfaG9zdC9NYWtlZmlsZQ0KQEAgLTAsMCArMSwzMCBAQA0KKyMNCisjIENvcHly
aWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsgKFVLKSBMdGQuDQorIw0KKyMgVGhpcyBm
aWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2Vu
ZXJhbCBQdWJsaWMNCisjIExpY2Vuc2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBt
YWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUgZm9yDQorIyBtb3JlIGRldGFpbHMuDQorIw0K
Kw0KK2NjZmxhZ3MtJChDT05GSUdfSE9TVF9NQVVTQl9ERUJVRykgOj0gLURERUJVRw0KKw0KK29i
ai0kKENPTkZJR19IT1NUX01BVVNCKSArPSBob3N0X21hdXNiLm8NCitob3N0X21hdXNiLXkgOj0g
c3JjL2hjZC9odWIubw0KK2hvc3RfbWF1c2IteSArPSBzcmMvaGNkL21vZHVsZV9pbml0Lm8NCito
b3N0X21hdXNiLXkgKz0gc3JjL2hjZC92aGNkLm8NCitob3N0X21hdXNiLXkgKz0gc3JjL2hwYWwv
ZGF0YV9jb21tb24ubw0KK2hvc3RfbWF1c2IteSArPSBzcmMvaHBhbC9kYXRhX2luLm8NCitob3N0
X21hdXNiLXkgKz0gc3JjL2hwYWwvZGF0YV9vdXQubw0KK2hvc3RfbWF1c2IteSArPSBzcmMvaHBh
bC9ocGFsLm8NCitob3N0X21hdXNiLXkgKz0gc3JjL2hwYWwvaXNvY2hfaW4ubw0KK2hvc3RfbWF1
c2IteSArPSBzcmMvaHBhbC9pc29jaF9vdXQubw0KK2hvc3RfbWF1c2IteSArPSBzcmMvaHBhbC9t
YXVzYl9ldmVudHMubw0KK2hvc3RfbWF1c2IteSArPSBzcmMvaHBhbC9uZXR3b3JrX2NhbGxiYWNr
cy5vDQoraG9zdF9tYXVzYi15ICs9IHNyYy9saW5rL21hdXNiX2lwX2xpbmsubw0KK2hvc3RfbWF1
c2IteSArPSBzcmMvdXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5vDQoraG9zdF9tYXVzYi15ICs9
IHNyYy91dGlscy9tYXVzYl9tbWFwLm8NCitob3N0X21hdXNiLXkgKz0gc3JjL3V0aWxzL21hdXNi
X3JpbmdfYnVmZmVyLm8NCisNCitjY2ZsYWdzLXkgKz0gLUkkKHNyY3RyZWUpLyQoc3JjKS9pbmNs
dWRlDQorY2NmbGFncy15ICs9IC1nDQorY2NmbGFncy15ICs9IC1ETUFVU0JfV0lUSF9MT0dTDQpk
aWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9jb21tb24vbWFf
dXNiLmggYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2NvbW1vbi9tYV91c2Iu
aA0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uM2Q0YjM1ZGRlNDU4
DQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRl
L2NvbW1vbi9tYV91c2IuaA0KQEAgLTAsMCArMSw4NTEgQEANCisvKiBTUERYLUxpY2Vuc2UtSWRl
bnRpZmllcjogR1BMLTIuMCAqLw0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBE
aXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRo
ZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorICogTGlj
ZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRo
aXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2lmbmRlZiBfX01BVVNC
X0NPTU1PTl9NQV9VU0JfSF9fDQorI2RlZmluZSBfX01BVVNCX0NPTU1PTl9NQV9VU0JfSF9fDQor
DQorI2lmZGVmIF9fS0VSTkVMX18NCisjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4NCisjZWxzZQ0K
KyNpbmNsdWRlIDx0eXBlcy5oPg0KKyNlbmRpZiAvKiBfX0tFUk5FTF9fICovDQorDQorI2RlZmlu
ZSBfTUFfVVNCX1NFVF9GSUVMRChfbSwgX3YpICgoKH4oKF9tKSAtIDEpICYgKF9tKSkgKiAoX3Yp
KSAmIChfbSkpDQorI2RlZmluZSBfTUFfVVNCX0dFVF9GSUVMRChfbSwgX3YpICgoKF92KSAmIChf
bSkpIC8gKH4oKF9tKSAtIDEpICYgKF9tKSkpDQorI2RlZmluZSBNQV9VU0JfU0VUX0ZJRUxEXyhf
bV8sIF92KSBfTUFfVVNCX1NFVF9GSUVMRChNQV9VU0JfIyNfbV8jI19NQVNLLCBfdikNCisjZGVm
aW5lIE1BX1VTQl9HRVRfRklFTERfKF9tXywgX3YpIF9NQV9VU0JfR0VUX0ZJRUxEKE1BX1VTQl8j
I19tXyMjX01BU0ssIF92KQ0KKyNkZWZpbmUgTUFfVVNCX1NFVF9GSUVMRChfbV8sIF92KSBfTUFf
VVNCX1NFVF9GSUVMRChNQV9VU0JfIyNfbV8jI19NQVNLLCBcDQorCQkJCQkJICAgIE1BX1VTQl8j
I192KQ0KKyNkZWZpbmUgTUFfVVNCX0dFVF9GSUVMRChfbV8sIF92KSBfTUFfVVNCX0dFVF9GSUVM
RChNQV9VU0JfIyNfbV8jI19NQVNLLCBcDQorCQkJCQkJICAgIE1BX1VTQl8jI192KQ0KKw0KKyNk
ZWZpbmUgTUFfVVNCX01HTVRfVE9LRU5fUkVTRVJWRUQgIDANCisjZGVmaW5lIE1BX1VTQl9NR01U
X1RPS0VOX01JTiAgICAgICAxDQorI2RlZmluZSBNQV9VU0JfTUdNVF9UT0tFTl9NQVggICAgICAg
KCgxIDw8IDEwKSAtIDEpDQorDQorI2RlZmluZSBNQV9VU0JfREFUQV9FUFNfVU5BU1NJR05FRCAg
MA0KKyNkZWZpbmUgTUFfVVNCX0RBVEFfRVBTX0FDVElWRSAgICAgIDENCisjZGVmaW5lIE1BX1VT
Ql9EQVRBX0VQU19JTkFDVElWRSAgICAyDQorI2RlZmluZSBNQV9VU0JfREFUQV9FUFNfSEFMVEVE
ICAgICAgMw0KKw0KKyNkZWZpbmUgTUFfVVNCX0RBVEFfVEZMQUdTX0FSUSAgICAgIDENCisjZGVm
aW5lIE1BX1VTQl9EQVRBX1RGTEFHU19ORUcgICAgICAyDQorI2RlZmluZSBNQV9VU0JfREFUQV9U
RkxBR1NfRU9UICAgICAgNA0KKyNkZWZpbmUgTUFfVVNCX0RBVEFfVEZMQUdTX1RSQU5TRkVSX1RZ
UEVfQ1RSTCAgIDANCisjZGVmaW5lIE1BX1VTQl9EQVRBX1RGTEFHU19UUkFOU0ZFUl9UWVBFX0lT
T0NIICA4DQorI2RlZmluZSBNQV9VU0JfREFUQV9URkxBR1NfVFJBTlNGRVJfVFlQRV9CVUxLICAg
MTYNCisjZGVmaW5lIE1BX1VTQl9EQVRBX1RGTEFHU19UUkFOU0ZFUl9UWVBFX0lOVFIgICAyNA0K
Kw0KKyNkZWZpbmUgTUFfVVNCX0RBVEFfVEZMQUdTX1RSQU5TRkVSX1RZUEVfTUFTSyAgIDB4MTgN
CisNCisjZGVmaW5lIE1BX1VTQl9EQVRBX0lGTEFHU19NVERfVkFMSUQgICAgICAxDQorI2RlZmlu
ZSBNQV9VU0JfREFUQV9JRkxBR1NfSERSX0ZNVF9TSE9SVCAgMA0KKyNkZWZpbmUgTUFfVVNCX0RB
VEFfSUZMQUdTX0hEUl9GTVRfU1REICAgIDINCisjZGVmaW5lIE1BX1VTQl9EQVRBX0lGTEFHU19I
RFJfRk1UX0xPTkcgICA0DQorI2RlZmluZSBNQV9VU0JfREFUQV9JRkxBR1NfSVJTX0ZNVF9TVEQg
ICAgMA0KKyNkZWZpbmUgTUFfVVNCX0RBVEFfSUZMQUdTX0lSU19GTVRfTE9ORyAgIDINCisjZGVm
aW5lIE1BX1VTQl9EQVRBX0lGTEFHU19BU0FQICAgICAgICAgICA4DQorDQorI2RlZmluZSBNQV9V
U0JfREFUQV9JRkxBR1NfRk1UX01BU0sgICAgICAgMHg2DQorDQorLyogdmVyc2lvbiAqLw0KKw0K
KyNkZWZpbmUgTUFfVVNCX0hEUl9WRVJTSU9OXzFfMCAgICAgIDANCisNCisvKiBmbGFncyAqLw0K
Kw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9GTEFHU19IT1NUICAgICAgIDENCisjZGVmaW5lIE1BX1VT
Ql9IRFJfRkxBR1NfUkVUUlkgICAgICAyDQorI2RlZmluZSBNQV9VU0JfSERSX0ZMQUdTX1RJTUVT
VEFNUCAgNA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9GTEFHU19SRVNFUlZFRCAgIDgNCisjZGVmaW5l
IE1BX1VTQl9IRFJfRkxBRyhfZikgTUFfVVNCX0hEUl9GTEFHU18jI19mDQorDQorLyogdHlwZSBh
bmQgc3VidHlwZSAqLw0KKw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1RZUEVfTUFTSyAgICAg
MHhDMA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfTUFTSyAgMHgzRg0KKw0KKyNk
ZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1RZUEVfTUFOQUdFTUVOVCAwDQorI2RlZmluZSBNQV9VU0Jf
SERSX1RZUEVfVFlQRV9DT05UUk9MICAgIDENCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9UWVBF
X0RBVEEgICAgICAgMg0KKw0KKy8qIE1hbmFnZW1lbnQgc3VidHlwZXMgKi8NCisNCisjZGVmaW5l
IF9NQV9VU0JfSERSX1RZUEVfTUFOQUdFTUVOVF9SRVEoX3MpIFwNCisJTUFfVVNCX1NFVF9GSUVM
RF8oSERSX1RZUEVfU1VCVFlQRSwgKF9zKSAqIDIpDQorI2RlZmluZSBfTUFfVVNCX0hEUl9UWVBF
X01BTkFHRU1FTlRfUkVTUChfcykgXA0KKwlNQV9VU0JfU0VUX0ZJRUxEXyhIRFJfVFlQRV9TVUJU
WVBFLCAoX3MpICogMiArIDEpDQorDQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVfTUFOQUdFTUVO
VF9SRVEoX3MpIFwNCisJX01BX1VTQl9IRFJfVFlQRV9NQU5BR0VNRU5UX1JFUShNQV9VU0JfSERS
X1RZUEVfU1VCVFlQRV8jI19zKQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX01BTkFHRU1FTlRf
UkVTUChfcykgXA0KKwlfTUFfVVNCX0hEUl9UWVBFX01BTkFHRU1FTlRfUkVTUChNQV9VU0JfSERS
X1RZUEVfU1VCVFlQRV8jI19zKQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX0lTX01BTkFHRU1F
TlQoX3YpICggXA0KKwlNQV9VU0JfR0VUX0ZJRUxEXyhIRFJfVFlQRV9UWVBFLCBfdikgXA0KKwk9
PSBNQV9VU0JfSERSX1RZUEVfVFlQRV9NQU5BR0VNRU5UKQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9U
WVBFX0lTX01BTkFHRU1FTlRfUkVTUChfdikgKCBcDQorCU1BX1VTQl9IRFJfVFlQRV9JU19NQU5B
R0VNRU5UKF92KSAmJiBcDQorCShNQV9VU0JfR0VUX0ZJRUxEXyhIRFJfVFlQRV9TVUJUWVBFLCBf
dikgJiAxKSAhPSAwKQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX01BTkFHRU1FTlRfR0VUX1NV
QlRZUEUoX3YpICggXA0KKwlNQV9VU0JfSERSX1RZUEVfSVNfTUFOQUdFTUVOVChfdikgPyAoKF92
KSA+PiAxKSA6IC0xKQ0KKw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfQ0FQICAg
ICAgICAgICAgICAgMA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfVVNCREVWSEFO
RExFICAgICAgMQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBIQU5ETEUgICAg
ICAgICAgMg0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBBQ1RJVkFURSAgICAg
ICAgMw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBJTkFDVElWQVRFICAgICAg
NA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBSRVNFVCAgICAgICAgICAgNQ0K
KyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfQ0xFQVJUUkFOU0ZFUlMgICAgNg0KKyNk
ZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBIQU5ETEVERUxFVEUgICAgNw0KKyNkZWZp
bmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfREVWUkVTRVQgICAgICAgICAgOA0KKyNkZWZpbmUg
TUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfTU9ESUZZRVAwICAgICAgICAgOQ0KKyNkZWZpbmUgTUFf
VVNCX0hEUl9UWVBFX1NVQlRZUEVfU0VUVVNCREVWQUREUiAgICAgMTANCisjZGVmaW5lIE1BX1VT
Ql9IRFJfVFlQRV9TVUJUWVBFX1VQREFURURFViAgICAgICAgIDExDQorI2RlZmluZSBNQV9VU0Jf
SERSX1RZUEVfU1VCVFlQRV9VU0JERVZESVNDT05ORUNUICAxMg0KKyNkZWZpbmUgTUFfVVNCX0hE
Ul9UWVBFX1NVQlRZUEVfVVNCU1VTUEVORCAgICAgICAgMTMNCisjZGVmaW5lIE1BX1VTQl9IRFJf
VFlQRV9TVUJUWVBFX1VTQlJFU1VNRSAgICAgICAgIDE0DQorI2RlZmluZSBNQV9VU0JfSERSX1RZ
UEVfU1VCVFlQRV9SRU1PVEVXQUtFICAgICAgICAxNQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBF
X1NVQlRZUEVfUElORyAgICAgICAgICAgICAgMTYNCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9T
VUJUWVBFX0RFVkRJU0NPTk5FQ1QgICAgIDE3DQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVfU1VC
VFlQRV9ERVZJTklURElTQ09OTkVDVCAxOA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZ
UEVfU1lOQ0ggICAgICAgICAgICAgMTkNCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBF
X0NBTkNFTFRSQU5TRkVSICAgIDIwDQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVfU1VCVFlQRV9F
UE9QRU5TVFJFQU0gICAgICAyMQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBD
TE9TRVNUUkVBTSAgICAgMjINCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBFX1VTQkRF
VlJFU0VUICAgICAgIDIzDQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVfU1VCVFlQRV9ERVZOT1RJ
RklDQVRJT04gICAyNA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfRVBTRVRLRUVQ
QUxJVkUgICAgMjUNCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBFX0dFVFBPUlRCVyAg
ICAgICAgIDI2DQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVfU1VCVFlQRV9TTEVFUCAgICAgICAg
ICAgICAyNw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfV0FLRSAgICAgICAgICAg
ICAgMjgNCisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBFX1ZFTkRPUlNQRUNJRklDICAg
IDMxIC8qIFJlc2VydmVkICovDQorDQorLyogRGF0YSBzdWJ0eXBlcyAqLw0KKw0KKyNkZWZpbmUg
X01BX1VTQl9IRFJfVFlQRV9EQVRBX1JFUShfcykgKCBcDQorCU1BX1VTQl9TRVRfRklFTEQoSERS
X1RZUEVfVFlQRSwgSERSX1RZUEVfVFlQRV9EQVRBKSB8IFwNCisJTUFfVVNCX1NFVF9GSUVMRF8o
SERSX1RZUEVfU1VCVFlQRSwgKF9zKSAqIDIgXA0KKwkrICgoX3MpID4gMCA/IDEgOiAwKSkpDQor
I2RlZmluZSBfTUFfVVNCX0hEUl9UWVBFX0RBVEFfUkVTUChfcykgKCBcDQorCU1BX1VTQl9TRVRf
RklFTEQoSERSX1RZUEVfVFlQRSwgSERSX1RZUEVfVFlQRV9EQVRBKSB8IFwNCisJTUFfVVNCX1NF
VF9GSUVMRF8oSERSX1RZUEVfU1VCVFlQRSwgKF9zKSAqIDIgKyAxIFwNCisJKyAoKF9zKSA+IDAg
PyAxIDogMCkpKQ0KKyNkZWZpbmUgX01BX1VTQl9IRFJfVFlQRV9EQVRBX0FDSyhfcykgKCBcDQor
CU1BX1VTQl9TRVRfRklFTEQoSERSX1RZUEVfVFlQRSwgSERSX1RZUEVfVFlQRV9EQVRBKSB8IFwN
CisJTUFfVVNCX1NFVF9GSUVMRF8oSERSX1RZUEVfU1VCVFlQRSwgKF9zKSAqIDIgKyAyKSkNCisN
CisjZGVmaW5lIE1BX1VTQl9IRFJfVFlQRV9EQVRBX1JFUShfcykgXA0KKwlfTUFfVVNCX0hEUl9U
WVBFX0RBVEFfUkVRKE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBFXyMjX3MpDQorI2RlZmluZSBNQV9V
U0JfSERSX1RZUEVfREFUQV9SRVNQKF9zKSBcDQorCV9NQV9VU0JfSERSX1RZUEVfREFUQV9SRVNQ
KE1BX1VTQl9IRFJfVFlQRV9TVUJUWVBFXyMjX3MpDQorI2RlZmluZSBNQV9VU0JfSERSX1RZUEVf
REFUQV9BQ0soX3MpIFwNCisJX01BX1VTQl9IRFJfVFlQRV9EQVRBX0FDSyhNQV9VU0JfSERSX1RZ
UEVfU1VCVFlQRV8jI19zKQ0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX0lTX0RBVEEoX3YpICgg
XA0KKwlNQV9VU0JfR0VUX0ZJRUxEXyhIRFJfVFlQRV9UWVBFLCBfdikgXA0KKwk9PSBNQV9VU0Jf
SERSX1RZUEVfVFlQRV9EQVRBKQ0KKw0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVf
VFJBTlNGRVIgICAgICAgICAgMA0KKyNkZWZpbmUgTUFfVVNCX0hEUl9UWVBFX1NVQlRZUEVfSVNP
Q0hUUkFOU0ZFUiAgICAgMQ0KKw0KKy8qIEVQL0RldmljZSBIYW5kbGUgKi8NCisNCisjZGVmaW5l
IE1BX1VTQl9ERVZJQ0VfSEFORExFX1JFU0VSVkVEICAgMA0KKw0KKyNkZWZpbmUgTUFfVVNCX0VQ
X0hBTkRMRV9EX01BU0sgICAgIDB4MDAwMQ0KKyNkZWZpbmUgTUFfVVNCX0VQX0hBTkRMRV9FUF9O
X01BU0sgIDB4MDAxZQ0KKyNkZWZpbmUgTUFfVVNCX0VQX0hBTkRMRV9BRERSX01BU0sgIDB4MGZl
MA0KKyNkZWZpbmUgTUFfVVNCX0VQX0hBTkRMRV9CVVNfTl9NQVNLIDB4ZjAwMA0KKw0KKyNkZWZp
bmUgTUFfVVNCX0VQX0hBTkRMRShfYiwgX2EsIF9lLCBfZCkgKCBcDQorCU1BX1VTQl9TRVRfRklF
TERfKEVQX0hBTkRMRV9CVVNfTiwgX2IpICB8IFwNCisJTUFfVVNCX1NFVF9GSUVMRF8oRVBfSEFO
RExFX0FERFIsIF9hKSAgIHwgXA0KKwlNQV9VU0JfU0VUX0ZJRUxEXyhFUF9IQU5ETEVfRVBfTiwg
X2UpICAgfCBcDQorCU1BX1VTQl9TRVRfRklFTERfKEVQX0hBTkRMRV9ELCBfZCkpDQorDQorI2Rl
ZmluZSBNQV9VU0JfRVBfSEFORExFX0JVU19OX1ZJUlRVQUwgIDE1DQorI2RlZmluZSBNQV9VU0Jf
RVBfSEFORExFX0FERFJfREVGQVVMVCAgIDANCisjZGVmaW5lIE1BX1VTQl9FUF9IQU5ETEVfRVBf
Tl9ERUZBVUxUICAgMA0KKyNkZWZpbmUgTUFfVVNCX0VQX0hBTkRMRV9EX09VVCAgICAgICAgICAw
CS8qIFNlZSBVU0IyLjAgOS4zLCBUYWJsZSA5LTIgKi8NCisjZGVmaW5lIE1BX1VTQl9FUF9IQU5E
TEVfRF9JTiAgICAgICAgICAgMQkvKiBTZWUgVVNCMi4wIDkuMywgVGFibGUgOS0yICovDQorDQor
LyogU3RhdHVzIGNvZGVzICovDQorDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19VTlNVQ0NF
U1NGVUwgICAgICAgICAgICAgICAgICAtMTI4DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19J
TlZBTElEX01BX1VTQl9TRVNTSU9OX1NUQVRFICAtMTI3DQorI2RlZmluZSBNQV9VU0JfSERSX1NU
QVRVU19JTlZBTElEX0RFVklDRV9IQU5ETEUgICAgICAgICAtMTI2DQorI2RlZmluZSBNQV9VU0Jf
SERSX1NUQVRVU19JTlZBTElEX0VQX0hBTkRMRSAgICAgICAgICAgICAtMTI1DQorI2RlZmluZSBN
QV9VU0JfSERSX1NUQVRVU19JTlZBTElEX0VQX0hBTkRMRV9TVEFURSAgICAgICAtMTI0DQorI2Rl
ZmluZSBNQV9VU0JfSERSX1NUQVRVU19JTlZBTElEX1JFUVVFU1QgICAgICAgICAgICAgICAtMTIz
DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19NSVNTSU5HX1NFUVVFTkNFX05VTUJFUiAgICAg
ICAtMTIyDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19UUkFOU0ZFUl9QRU5ESU5HICAgICAg
ICAgICAgICAtMTIxDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19UUkFOU0ZFUl9FUF9TVEFM
TCAgICAgICAgICAgICAtMTIwDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19UUkFOU0ZFUl9T
SVpFX0VSUk9SICAgICAgICAgICAtMTE5DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19UUkFO
U0ZFUl9EQVRBX0JVRkZFUl9FUlJPUiAgICAtMTE4DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRV
U19UUkFOU0ZFUl9CQUJCTEVfREVURUNURUQgICAgICAtMTE3DQorI2RlZmluZSBNQV9VU0JfSERS
X1NUQVRVU19UUkFOU0ZFUl9UUkFOU0FDVElPTl9FUlJPUiAgICAtMTE2DQorI2RlZmluZSBNQV9V
U0JfSERSX1NUQVRVU19UUkFOU0ZFUl9TSE9SVF9UUkFOU0ZFUiAgICAgICAtMTE1DQorI2RlZmlu
ZSBNQV9VU0JfSERSX1NUQVRVU19UUkFOU0ZFUl9DQU5DRUxFRCAgICAgICAgICAgICAtMTE0DQor
I2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19JTlNVRklDSUVOVF9SRVNPVVJDRVMgICAgICAgICAt
MTEzDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19OT1RfU1VGRklDSUVOVF9CQU5EV0lEVEgg
ICAgICAtMTEyDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19JTlRFUk5BTF9FUlJPUiAgICAg
ICAgICAgICAgICAtMTExDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19EQVRBX09WRVJSVU4g
ICAgICAgICAgICAgICAgICAtMTEwDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19ERVZJQ0Vf
Tk9UX0FDQ0VTU0VEICAgICAgICAgICAtMTA5DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19C
VUZGRVJfT1ZFUlJVTiAgICAgICAgICAgICAgICAtMTA4DQorI2RlZmluZSBNQV9VU0JfSERSX1NU
QVRVU19CVVNZICAgICAgICAgICAgICAgICAgICAgICAgICAtMTA3DQorI2RlZmluZSBNQV9VU0Jf
SERSX1NUQVRVU19EUk9QUEVEX1BBQ0tFVCAgICAgICAgICAgICAgICAtMTA2DQorI2RlZmluZSBN
QV9VU0JfSERSX1NUQVRVU19JU09DSF9USU1FX0VYUElSRUQgICAgICAgICAgICAtMTA1DQorI2Rl
ZmluZSBNQV9VU0JfSERSX1NUQVRVU19JU09DSF9USU1FX0lOVkFMSUQgICAgICAgICAgICAtMTA0
DQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19OT19VU0JfUElOR19SRVNQT05TRSAgICAgICAg
ICAtMTAzDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19OT1RfU1VQUE9SVEVEICAgICAgICAg
ICAgICAgICAtMTAyDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19SRVFVRVNUX0RFTklFRCAg
ICAgICAgICAgICAgICAtMTAxDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19NSVNTSU5HX1JF
UVVFU1RfSUQgICAgICAgICAgICAtMTAwDQorI2RlZmluZSBNQV9VU0JfSERSX1NUQVRVU19TVUND
RVNTICAgICAgICAgICAgICAgICAgICAgICAwCS8qIFJlc2VydmVkICovDQorI2RlZmluZSBNQV9V
U0JfSERSX1NUQVRVU19OT19FUlJPUiBNQV9VU0JfSERSX1NUQVRVU19TVUNDRVNTCS8qIFJlc2Vy
dmVkICovDQorDQorLyogU3BlZWQgdmFsdWVzICovDQorDQorI2RlZmluZSBNQV9VU0JfU1BFRURf
TE9XX1NQRUVEICAgICAgICAgMA0KKyNkZWZpbmUgTUFfVVNCX1NQRUVEX0ZVTExfU1BFRUQgICAg
ICAgIDENCisjZGVmaW5lIE1BX1VTQl9TUEVFRF9ISUdIX1NQRUVEICAgICAgICAyDQorI2RlZmlu
ZSBNQV9VU0JfU1BFRURfU1VQRVJfU1BFRUQgICAgICAgMw0KKyNkZWZpbmUgTUFfVVNCX1NQRUVE
X1NVUEVSX1NQRUVEX1BMVVMgIDQNCisNCisvKiBjYXByZXEgZXh0cmEgaGRyICovDQorDQorI2Rl
ZmluZSBNQV9VU0JfQ0FQUkVRX0RFU0NfU1lOQ0hST05JWkFUSU9OX0xFTkdUSFwNCisJKHNpemVv
ZihzdHJ1Y3QgbWFfdXNiX2Rlc2MpICtcDQorCXNpemVvZihzdHJ1Y3QgbWFfdXNiX2NhcHJlcV9k
ZXNjX3N5bmNocm9uaXphdGlvbikpDQorI2RlZmluZSBNQV9VU0JfQ0FQUkVRX0RFU0NfTElOS19T
TEVFUF9MRU5HVEhcDQorCShzaXplb2Yoc3RydWN0IG1hX3VzYl9kZXNjKSArXA0KKwlzaXplb2Yo
c3RydWN0IG1hX3VzYl9jYXByZXFfZGVzY19saW5rX3NsZWVwKSkNCisNCisjZGVmaW5lIE1BX1VT
Ql9DQVBSRVFfTEVOR1RIXA0KKwkoc2l6ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbikgK1wN
CisJc2l6ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2NhcHJlcSkgK1wNCisJTUFfVVNCX0NBUFJFUV9E
RVNDX1NZTkNIUk9OSVpBVElPTl9MRU5HVEggK1wNCisJTUFfVVNCX0NBUFJFUV9ERVNDX0xJTktf
U0xFRVBfTEVOR1RIKQ0KKw0KKy8qIGNhcHJlcSBkZXNjIHR5cGVzICovDQorDQorI2RlZmluZSBN
QV9VU0JfQ0FQUkVRX0RFU0NfVFlQRV9TWU5DSFJPTklaQVRJT04gMw0KKyNkZWZpbmUgTUFfVVNC
X0NBUFJFUV9ERVNDX1RZUEVfTElOS19TTEVFUCAgICAgIDUNCisNCisvKiBjYXByZXNwIGRlc2Ny
aXB0b3JzICovDQorDQorI2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfU1BFRUQgICAg
ICAgICAgICAwDQorI2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfUF9NQU5BR0VEX09V
VCAgICAxDQorI2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfSVNPQ0hST05PVVMgICAg
ICAyDQorI2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfU1lOQ0hST05JWkFUSU9OICAz
DQorI2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfQ09OVEFJTkVSX0lEICAgICA0DQor
I2RlZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfTElOS19TTEVFUCAgICAgICA1DQorI2Rl
ZmluZSBNQV9VU0JfQ0FQUkVTUF9ERVNDX1RZUEVfSFVCX0xBVEVOQ1kgICAgICA2DQorDQorLyog
UmVxdWVzdCBJRCBhbmQgc2VxdWVuY2UgbnVtYmVyIHZhbHVlcyAqLw0KKw0KKyNkZWZpbmUgTUFf
VVNCX1RSQU5TRkVSX1JFU0VSVkVEICAgICAgMA0KKyNkZWZpbmUgTUFfVVNCX1RSQU5TRkVSX1JF
UUlEX01JTiAgICAgMA0KKyNkZWZpbmUgTUFfVVNCX1RSQU5TRkVSX1JFUUlEX01BWCAgICAgKCgx
IDw8ICA4KSAtIDEpDQorI2RlZmluZSBNQV9VU0JfVFJBTlNGRVJfU0VRTl9NSU4gICAgICAwDQor
I2RlZmluZSBNQV9VU0JfVFJBTlNGRVJfU0VRTl9NQVggICAgICAoKDEgPDwgMjQpIC0gMikNCisj
ZGVmaW5lIE1BX1VTQl9UUkFOU0ZFUl9TRVFOX0lOVkFMSUQgICgoMSA8PCAyNCkgLSAxKQ0KKw0K
KyNkZWZpbmUgTUFfVVNCX0lTT0NIX1NGTEFHU19GUkFHTUVOVCAgICAgIDB4MQ0KKyNkZWZpbmUg
TUFfVVNCX0lTT0NIX1NGTEFHU19MQVNUX0ZSQUdNRU5UIDB4Mg0KKw0KKyNkZWZpbmUgTUFVU0Jf
TUFYX01HTVRfU0laRSA1MA0KKw0KKyNkZWZpbmUgTUFVU0JfVFJBTlNGRVJfSERSX1NJWkUgKHNp
emVvZihzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24pICtcDQorCQkJCSBzaXplb2Yoc3RydWN0IG1h
X3VzYl9oZHJfdHJhbnNmZXIpKQ0KKw0KKyNkZWZpbmUgTUFVU0JfSVNPQ0hfVFJBTlNGRVJfSERS
X1NJWkUgKHNpemVvZihzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24pICtcDQorCQkJc2l6ZW9mKHN0
cnVjdCBtYV91c2JfaGRyX2lzb2NodHJhbnNmZXIpICtcDQorCQkJc2l6ZW9mKHN0cnVjdCBtYV91
c2JfaGRyX2lzb2NodHJhbnNmZXJfb3B0aW9uYWwpKQ0KKw0KKyNkZWZpbmUgTUFYX0lTT0NIX0FT
QVBfUEFDS0VUX1NJWkUgKDE1MDAwMCAvKiBOZXR3b3JrIE1UVSAqLyAtXA0KKwlNQVVTQl9JU09D
SF9UUkFOU0ZFUl9IRFJfU0laRSAtIDIwIC8qIElQIGhlYWRlciBzaXplICovIC1cDQorCTggLyog
VURQIGhlYWRlciBzaXplKi8pDQorDQorI2RlZmluZSBzaGlmdF9wdHIocHRyLCBvZmZzZXQpICgo
dWludDhfdCAqKShwdHIpICsgKG9mZnNldCkpDQorDQorLyogVVNCIGRlc2NyaXB0b3IgKi8NCitz
dHJ1Y3QgbWFfdXNiX2Rlc2Mgew0KKwl1aW50OF90IGxlbmd0aDsNCisJdWludDhfdCB0eXBlOw0K
Kwl1aW50OF90IHZhbHVlWzBdOw0KK30gX19wYWNrZWQ7DQorDQorc3RydWN0IG1hX3VzYl9lcF9o
YW5kbGUgew0KKwl1aW50MTZfdCBkICAgICAgICAgOjEsDQorCQkgZXBfbiAgICAgIDo0LA0KKwkJ
IGFkZHIgICAgICA6NywNCisJCSBidXNfbiAgICAgOjQ7DQorfTsNCisNCitzdHJ1Y3QgbWFfdXNi
X2hkcl9tZ210IHsNCisJdWludDMyX3Qgc3RhdHVzICAgIDo4LA0KKwkJIHRva2VuICAgICA6MTAs
ICAvKiByZXF1ZXN0b3Igb3JpZ2luYXRvciBhbGxvY2F0ZWQgKi8NCisJCSByZXNlcnZlZCAgOjE0
Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KK3N0cnVjdCBtYV91c2JfaGRyX2N0cmwgewkvKiB1c2Vk
IGluIGFsbCByZXEvcmVzcC9jb25mIG9wZXJhdGlvbnMgKi8NCisJaW50OF90IHN0YXR1czsNCisJ
dWludDhfdCBsaW5rX3R5cGU7DQorCXVuaW9uIHsNCisJCXVpbnQ4X3QgdGlkOwkvKiBpZWVlIDgw
Mi4xMSAqLw0KKwl9IGNvbm5lY3Rpb25faWQ7DQorfSBfX2FsaWduZWQoNCk7DQorDQorc3RydWN0
IG1hX3VzYl9oZHJfZGF0YSB7DQorCWludDhfdCBzdGF0dXM7DQorCXVpbnQ4X3QgZXBzCToyLA0K
KwkJdF9mbGFncwk6NjsNCisJdW5pb24gew0KKwkJdWludDE2X3Qgc3RyZWFtX2lkOw0KKwkJc3Ry
dWN0IHsNCisJCQl1aW50MTZfdCBoZWFkZXJzICA6MTIsDQorCQkJCSBpX2ZsYWdzICA6NDsNCisJ
CX07DQorCX07DQorfSBfX2FsaWduZWQoNCk7DQorDQorc3RydWN0IG1hX3VzYl9oZHJfY29tbW9u
IHsNCisJdWludDhfdCB2ZXJzaW9uCTo0LA0KKwkJZmxhZ3MJOjQ7DQorCXVpbnQ4X3QgIHR5cGU7
DQorCXVpbnQxNl90IGxlbmd0aDsNCisJdW5pb24gew0KKwkJdWludDE2X3QgZGV2Ow0KKwkJdWlu
dDE2X3QgZXB2Ow0KKwkJc3RydWN0IG1hX3VzYl9lcF9oYW5kbGUgZXBoOw0KKwl9IGhhbmRsZTsN
CisJdWludDhfdCBkZXZfYWRkcjsNCisJdWludDhfdCBzc2lkOw0KKwl1bmlvbiB7DQorCQlpbnQ4
X3Qgc3RhdHVzOw0KKwkJc3RydWN0IG1hX3VzYl9oZHJfbWdtdCBtZ210Ow0KKwkJc3RydWN0IG1h
X3VzYl9oZHJfY3RybCBjdHJsOw0KKwkJc3RydWN0IG1hX3VzYl9oZHJfZGF0YSBkYXRhOw0KKwl9
Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGNhcHJlcSBleHRyYSBoZHIgKi8NCisNCitzdHJ1
Y3QgbWFfdXNiX2hkcl9jYXByZXEgew0KKwl1aW50MzJfdCBvdXRfbWdtdF9yZXFzCToxMiwNCisJ
CSByZXNlcnZlZAk6MjA7DQorfSBfX2FsaWduZWQoNCk7DQorDQorc3RydWN0IG1hX3VzYl9jYXBy
ZXFfZGVzY19zeW5jaHJvbml6YXRpb24gew0KKwl1aW50OF90IG1lZGlhX3RpbWVfYXZhaWxhYmxl
ICA6MSwNCisJCXJlc2VydmVkICAgICAgICAgICAgICA6NzsNCit9IF9fcGFja2VkOw0KKw0KK3N0
cnVjdCBtYV91c2JfY2FwcmVxX2Rlc2NfbGlua19zbGVlcCB7DQorCXVpbnQ4X3QgbGlua19zbGVl
cF9jYXBhYmxlICAgIDoxLA0KKwkJcmVzZXJ2ZWQgICAgICAgICAgICAgIDo3Ow0KK30gX19wYWNr
ZWQ7DQorDQorLyogY2FwcmVzcCBleHRyYSBoZHIgKi8NCisNCitzdHJ1Y3QgbWFfdXNiX2hkcl9j
YXByZXNwIHsNCisJdWludDE2X3QgZW5kcG9pbnRzOw0KKwl1aW50OF90IGRldmljZXM7DQorCXVp
bnQ4X3Qgc3RyZWFtcwkJOjUsDQorCQlkZXZfdHlwZQk6MzsNCisJdWludDMyX3QgZGVzY3MJCTo4
LA0KKwkJIGRlc2NzX2xlbmd0aAk6MjQ7DQorCXVpbnQxNl90IG91dF90cmFuc2Zlcl9yZXFzOw0K
Kwl1aW50MTZfdCBvdXRfbWdtdF9yZXFzCToxMiwNCisJCSByZXNlcnZlZAk6NDsNCit9IF9fYWxp
Z25lZCg0KTsNCisNCitzdHJ1Y3QgbWFfdXNiX2NhcHJlc3BfZGVzY19zcGVlZCB7DQorCXVpbnQ4
X3QgcmVzZXJ2ZWQxCTo0LA0KKwkJc3BlZWQJCTo0Ow0KKwl1aW50OF90IHJlc2VydmVkMgk6NCwN
CisJCWxzZQkJOjIsCS8qIFVTQjMuMSA4LjUuNi43LCBUYWJsZSA4LTIyICovDQorCQlyZXNlcnZl
ZDMJOjI7DQorfSBfX3BhY2tlZDsNCisNCitzdHJ1Y3QgbWFfdXNiX2NhcHJlc3BfZGVzY19wX21h
bmFnZWRfb3V0IHsNCisJdWludDhfdCBlbGFzdGljX2J1ZmZlcgkJOjEsDQorCQlkcm9wX25vdGlm
aWNhdGlvbgk6MSwNCisJCXJlc2VydmVkCQk6NjsNCit9IF9fcGFja2VkOw0KKw0KK3N0cnVjdCBt
YV91c2JfY2FwcmVzcF9kZXNjX2lzb2Nocm9ub3VzIHsNCisJdWludDhfdCBwYXlsb2FkX2R3b3Jk
X2FsaWduZWQJOjEsDQorCQlyZXNlcnZlZAkJOjc7DQorfSBfX3BhY2tlZDsNCisNCitzdHJ1Y3Qg
bWFfdXNiX2NhcHJlc3BfZGVzY19zeW5jaHJvbml6YXRpb24gew0KKwl1aW50OF90IG1lZGlhX3Rp
bWVfYXZhaWxhYmxlCToxLA0KKwkJdGltZV9zdGFtcF9yZXF1aXJlZAk6MSwvKiBodWJzIG5lZWQg
dGhpcyBzZXQgKi8NCisJCXJlc2VydmVkCQk6NjsNCit9IF9fcGFja2VkOw0KKw0KK3N0cnVjdCBt
YV91c2JfY2FwcmVzcF9kZXNjX2NvbnRhaW5lcl9pZCB7DQorCXVpbnQ4X3QgY29udGFpbmVyX2lk
WzE2XTsJLyogVVVJRCBJRVRGIFJGQyA0MTIyICovDQorfSBfX3BhY2tlZDsNCisNCitzdHJ1Y3Qg
bWFfdXNiX2NhcHJlc3BfZGVzY19saW5rX3NsZWVwIHsNCisJdWludDhfdCBsaW5rX3NsZWVwX2Nh
cGFibGUJOjEsDQorCQlyZXNlcnZlZAkJOjc7DQorfSBfX3BhY2tlZDsNCisNCitzdHJ1Y3QgbWFf
dXNiX2NhcHJlc3BfZGVzY19odWJfbGF0ZW5jeSB7DQorCXVpbnQxNl90IGxhdGVuY3k7CQkvKiBV
U0IzLjEgKi8NCit9IF9fcGFja2VkOw0KKw0KKy8qIHVzYmRldmhhbmRsZXJlcSBleHRyYSBoZHIg
Ki8NCitzdHJ1Y3QgbWFfdXNiX2hkcl91c2JkZXZoYW5kbGVyZXEgew0KKwl1aW50MzJfdCByb3V0
ZV9zdHJpbmcJOjIwLA0KKwkJIHNwZWVkCQk6NCwNCisJCSByZXNlcnZlZDEJOjg7DQorCXVpbnQx
Nl90IGh1Yl9kZXZfaGFuZGxlOw0KKwl1aW50MTZfdCByZXNlcnZlZDI7DQorCXVpbnQxNl90IHBh
cmVudF9oc19odWJfZGV2X2hhbmRsZTsNCisJdWludDE2X3QgcGFyZW50X2hzX2h1Yl9wb3J0CTo0
LA0KKwkJIG10dAkJCToxLAkvKiBVU0IyLjAgMTEuMTQsIDExLjE0LjEuMyAqLw0KKwkJIGxzZQkJ
CToyLAkvKiBVU0IzLjEgOC41LjYuNywgVGFibGUgOC0yMiAqLw0KKwkJIHJlc2VydmVkMwkJOjk7
DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogdXNiZGV2aGFuZGxlcmVzcCBleHRyYSBoZHIgKi8N
CitzdHJ1Y3QgbWFfdXNiX2hkcl91c2JkZXZoYW5kbGVyZXNwIHsNCisJdWludDE2X3QgZGV2X2hh
bmRsZTsNCisJdWludDE2X3QgcmVzZXJ2ZWQ7DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogZXBo
YW5kbGVyZXEgZXh0cmEgaGRyICovDQorc3RydWN0IG1hX3VzYl9oZHJfZXBoYW5kbGVyZXEgew0K
Kwl1aW50MzJfdCBlcF9kZXNjcwk6NSwNCisJCSBlcF9kZXNjX3NpemUJOjYsDQorCQkgcmVzZXJ2
ZWQJOjIxOw0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qDQorICogUmVzdHJpY3RlZCBVU0IyLjAg
ZXAgZGVzYyBsaW1pdGVkIHRvIDYgYnl0ZXMsIGlzb2xhdGluZyBmdXJ0aGVyIGNoYW5nZXMuDQor
ICogU2VlIFVTQjIuMCA5LjYuNiwgVGFibGUgOS0xMw0KKyAqLw0KK3N0cnVjdCB1c2JfZXBfZGVz
YyB7DQorCXVpbnQ4X3QgYkxlbmd0aDsNCisJLyogVVNCMi4wIDkuNCwgVGFibGUgOS01ICg1KSB1
c2IvY2g5Lmg6IFVTQl9EVF9FTkRQT0lOVCAqLw0KKwl1aW50OF90IGJEZXNjcmlwdG9yVHlwZTsN
CisJdWludDhfdCAgYkVuZHBvaW50QWRkcmVzczsNCisJdWludDhfdCAgYm1BdHRyaWJ1dGVzOw0K
Kwl1aW50MTZfdCB3TWF4UGFja2V0U2l6ZTsNCisJdWludDhfdCAgYkludGVydmFsOw0KK30gX19w
YWNrZWQ7DQorDQorLyoNCisgKiBSZXN0cmljdGVkIFVTQjMuMSBlcCBjb21wIGRlc2MgaXNvbGF0
aW5nIGZ1cnRoZXIgY2hhbmdlcyBpbiB1c2IvY2g5LmgNCisgKiBTZWUgVVNCMy4xIDkuNi43LCBU
YWJsZSA5LTI2DQorICovDQorc3RydWN0IHVzYl9zc19lcF9jb21wX2Rlc2Mgew0KKwl1aW50OF90
IGJMZW5ndGg7DQorCS8qIFVTQjMuMSA5LjQsIFRhYmxlIDktNiAoNDgpIHVzYi9jaDkuaDogVVNC
X0RUX1NTX0VORFBPSU5UX0NPTVAgKi8NCisJdWludDhfdCAgYkRlc2NyaXB0b3JUeXBlOw0KKwl1
aW50OF90ICBiTWF4QnVyc3Q7DQorCXVpbnQ4X3QgIGJtQXR0cmlidXRlczsNCisJdWludDE2X3Qg
d0J5dGVzUGVySW50ZXJ2YWw7DQorfSBfX3BhY2tlZDsNCisNCisvKg0KKyAqIFVTQjMuMSBzc19w
bHVzX2lzb2NoX2VwX2NvbXBfZGVzYw0KKyAqIFNlZSBVU0IzLjEgOS42LjgsIFRhYmxlIDktMjcN
CisgKi8NCitzdHJ1Y3QgdXNiX3NzX3BsdXNfaXNvY2hfZXBfY29tcF9kZXNjIHsNCisJdWludDhf
dCBiTGVuZ3RoOw0KKwkvKiBVU0IzLjEgOS40LCBUYWJsZSA5LTYgKDQ5KSB1c2IvY2g5Lmg6IG5v
dCB5ZXQgZGVmaW5lZCEgKi8NCisJdWludDhfdCBiRGVzY3JpcHRvclR5cGU7DQorCXVpbnQxNl90
IHdSZXNlcnZlZDsNCisJdWludDMyX3QgZHdCeXRlc1BlckludGVydmFsOw0KK30gX19wYWNrZWQ7
DQorDQorc3RydWN0IG1hX3VzYl9lcGhhbmRsZXJlcV9kZXNjX3N0ZCB7DQorCXN0cnVjdCB1c2Jf
ZXBfZGVzYyB1c2IyMDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCitzdHJ1Y3QgbWFfdXNiX2VwaGFu
ZGxlcmVxX2Rlc2Nfc3Mgew0KKwlzdHJ1Y3QgdXNiX2VwX2Rlc2MJICAgdXNiMjA7DQorCXN0cnVj
dCB1c2Jfc3NfZXBfY29tcF9kZXNjIHVzYjMxOw0KK30gX19hbGlnbmVkKDQpOw0KKw0KK3N0cnVj
dCBtYV91c2JfZXBoYW5kbGVyZXFfZGVzY19zc19wbHVzIHsNCisJc3RydWN0IHVzYl9lcF9kZXNj
CQkgICAgICB1c2IyMDsNCisJc3RydWN0IHVzYl9zc19lcF9jb21wX2Rlc2MJICAgICAgdXNiMzE7
DQorCXN0cnVjdCB1c2Jfc3NfcGx1c19pc29jaF9lcF9jb21wX2Rlc2MgdXNiMzFfaXNvY2g7DQor
fSBfX2FsaWduZWQoNCk7DQorDQorc3RydWN0IG1hX3VzYl9kZXZfY29udGV4dCB7DQorCXN0cnVj
dCB1c2JfZXBfZGVzYyB1c2I7DQorfTsNCisNCisvKiBlcGhhbmRsZXJlc3AgZXh0cmEgaGRyICov
DQorc3RydWN0IG1hX3VzYl9oZHJfZXBoYW5kbGVyZXNwIHsNCisJdWludDMyX3QgZXBfZGVzY3Mg
OjUsDQorCQkgcmVzZXJ2ZWQgOjI3Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGVwaGFuZGxl
cmVzcCBkZXNjcmlwdG9yICovDQorc3RydWN0IG1hX3VzYl9lcGhhbmRsZXJlc3BfZGVzYyB7DQor
CXVuaW9uIHsNCisJCXN0cnVjdCBtYV91c2JfZXBfaGFuZGxlIGVwaDsNCisJCXVpbnQxNl90CQll
cHY7DQorCX0gZXBfaGFuZGxlOw0KKwl1aW50MTZfdCBkCSAgIDoxLAkJLyogbm9uLWNvbnRyb2wg
b3Igbm9uLU9VVCAqLw0KKwkJIGlzb2NoCSAgIDoxLA0KKwkJIGxfbWFuYWdlZCA6MSwJCS8qIGNv
bnRyb2wgb3Igbm9uLWlzb2NoIE9VVCAqLw0KKwkJIGludmFsaWQgICA6MSwNCisJCSByZXNlcnZl
ZDEgOjEyOw0KKwl1aW50MTZfdCBjY3U7CQkJLyogY29udHJvbCBvciBub24taXNvY2ggT1VUICov
DQorCXVpbnQxNl90IHJlc2VydmVkMjsNCisJdWludDMyX3QgYnVmZmVyX3NpemU7CQkvKiBjb250
cm9sIG9yIE9VVCAqLw0KKwl1aW50MTZfdCBpc29jaF9wcm9nX2RlbGF5OwkvKiBpbiB1cy4gKi8N
CisJdWludDE2X3QgaXNvY2hfcmVzcF9kZWxheTsJLyogaW4gdXMuICovDQorfSBfX2FsaWduZWQo
NCk7DQorDQorLyogZXBhY3RpdmF0ZXJlcSBleHRyYSBoZHIgKi8NCitzdHJ1Y3QgbWFfdXNiX2hk
cl9lcGFjdGl2YXRlcmVxIHsNCisJdWludDMyX3QgZXBfaGFuZGxlcyA6NSwNCisJCSByZXNlcnZl
ZCAgIDoyNzsNCisJdW5pb24gew0KKwkJdWludDE2X3QJCWVwdjsNCisJCXN0cnVjdCBtYV91c2Jf
ZXBfaGFuZGxlIGVwaDsNCisJfSBoYW5kbGVbMF07DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyog
ZXBhY3RpdmF0ZXJlc3AgZXh0cmEgaGRyICovDQorc3RydWN0IG1hX3VzYl9oZHJfZXBhY3RpdmF0
ZXJlc3Agew0KKwl1aW50MzJfdCBlcF9lcnJvcnMgOjUsDQorCQkgcmVzZXJ2ZWQgIDoyNzsNCisJ
dW5pb24gew0KKwkJdWludDE2X3QJCWVwdjsNCisJCXN0cnVjdCBtYV91c2JfZXBfaGFuZGxlIGVw
aDsNCisJfSBoYW5kbGVbMF07DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogZXBpbmFjdGl2YXRl
cmVxIGV4dHJhIGhkciAqLw0KK3N0cnVjdCBtYV91c2JfaGRyX2VwaW5hY3RpdmF0ZXJlcSB7DQor
CXVpbnQzMl90IGVwX2hhbmRsZXMJOjUsDQorCQkgc3VzcGVuZAk6MSwNCisJCSByZXNlcnZlZAk6
MjY7DQorCXVuaW9uIHsNCisJCXVpbnQxNl90CQllcHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hh
bmRsZSBlcGg7DQorCX0gaGFuZGxlWzBdOw0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGVwaW5h
Y3RpdmF0ZXJlc3AgZXh0cmEgaGRyICovDQorc3RydWN0IG1hX3VzYl9oZHJfZXBpbmFjdGl2YXRl
cmVzcCB7DQorCXVpbnQzMl90IGVwX2Vycm9ycwk6NSwNCisJCSByZXNlcnZlZAk6Mjc7DQorCXVu
aW9uIHsNCisJCXVpbnQxNl90CQllcHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7
DQorCX0gaGFuZGxlWzBdOw0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGVwcmVzZXRyZXEgZXh0
cmEgaGRyICovDQorc3RydWN0IG1hX3VzYl9oZHJfZXByZXNldHJlcSB7DQorCXVpbnQzMl90IGVw
X3Jlc2V0X2Jsb2NrcyA6NSwNCisJCSByZXNlcnZlZAkgOjI3Ow0KK30gX19hbGlnbmVkKDQpOw0K
Kw0KKy8qIGVwcmVzZXRyZXEgcmVzZXQgYmxvY2sgKi8NCitzdHJ1Y3QgbWFfdXNiX2VwcmVzZXRy
ZXFfYmxvY2sgew0KKwl1bmlvbiB7DQorCQl1aW50MTZfdAkJZXB2Ow0KKwkJc3RydWN0IG1hX3Vz
Yl9lcF9oYW5kbGUgZXBoOw0KKwl9IGhhbmRsZTsNCisJdWludDE2X3QgdHNwCSAgOjEsDQorCQkg
cmVzZXJ2ZWQgOjE1Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGVwcmVzZXRyZXNwIGV4dHJh
IGhkciAqLw0KK3N0cnVjdCBtYV91c2JfaGRyX2VwcmVzZXRyZXNwIHsNCisJdWludDMyX3QgZXBf
ZXJyb3JzIDo1LA0KKwkJIHJlc2VydmVkICA6Mjc7DQorCXVuaW9uIHsNCisJCXVpbnQxNl90CQll
cHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFuZGxlWzBdOw0KK30g
X19hbGlnbmVkKDQpOw0KKw0KKy8qIGNsZWFydHJhbnNmZXJzcmVxIGV4dHJhIGhkciAqLw0KK3N0
cnVjdCBtYV91c2JfaGRyX2NsZWFydHJhbnNmZXJzcmVxIHsNCisJdWludDMyX3QgaW5mb19ibG9j
a3MJOjgsDQorCQkgcmVzZXJ2ZWQJOjI0Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIGNsZWFy
dHJhbnNmZXJzcmVxIGluZm8gYmxvY2sgKi8NCitzdHJ1Y3QgbWFfdXNiX2NsZWFydHJhbnNmZXJz
cmVxX2Jsb2NrIHsNCisJdW5pb24gew0KKwkJdWludDE2X3QJCWVwdjsNCisJCXN0cnVjdCBtYV91
c2JfZXBfaGFuZGxlIGVwaDsNCisJfSBoYW5kbGU7DQorCXVpbnQxNl90IHN0cmVhbV9pZDsJLyog
c3Mgc3RyZWFtIGVwcyBvbmx5ICovDQorCXVpbnQzMl90IHN0YXJ0X3JlcV9pZAk6OCwNCisJCSBy
ZXNlcnZlZAk6MjQ7DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogY2xlYXJ0cmFuc2ZlcnNyZXNw
IGV4dHJhIGhkciAqLw0KK3N0cnVjdCBtYV91c2JfaGRyX2NsZWFydHJhbnNmZXJzcmVzcCB7DQor
CXVpbnQzMl90IHN0YXR1c19ibG9ja3MJOjgsDQorCQkgcmVzZXJ2ZWQJOjI0Ow0KK30gX19hbGln
bmVkKDQpOw0KKw0KKy8qIGNsZWFydHJhbnNmZXJzcmVzcCBzdGF0dXMgYmxvY2sgKi8NCitzdHJ1
Y3QgbWFfdXNiX2NsZWFydHJhbnNmZXJzcmVzcF9ibG9jayB7DQorCXVuaW9uIHsNCisJCXVpbnQx
Nl90CQllcHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFuZGxlOw0K
Kwl1aW50MTZfdCBzdHJlYW1faWQ7CS8qIHNzIHN0cmVhbSBlcHMgb25seSAqLw0KKwl1aW50MzJf
dCBjYW5jZWxfc3VjY2VzcwkgIDoxLA0KKwkJIHBhcnRpYWxfZGVsaXZlcnkgOjEsDQorCQkgcmVz
ZXJ2ZWQJICA6MzA7DQorCXVpbnQzMl90IGxhc3RfcmVxX2lkCSA6OCwNCisJCSBkZWxpdmVyZWRf
c2VxX24gOjI0OwkvKiBPVVQgdy9wYXJ0aWFsX2RlbGl2ZXJ5IG9ubHkgKi8NCisJdWludDMyX3Qg
ZGVsaXZlcmVkX2J5dGVfb2Zmc2V0OwkvKiBPVVQgdy9wYXJ0aWFsX2RlbGl2ZXJ5IG9ubHkgKi8N
Cit9IF9fYWxpZ25lZCg0KTsNCisNCisvKiBlcGhhbmRsZWRlbGV0ZXJlcSBleHRyYSBoZHIgKi8N
CitzdHJ1Y3QgbWFfdXNiX2hkcl9lcGhhbmRsZWRlbGV0ZXJlcSB7DQorCXVpbnQzMl90IGVwX2hh
bmRsZXMgOjUsDQorCQkgcmVzZXJ2ZWQgICA6Mjc7DQorCXVuaW9uIHsNCisJCXVpbnQxNl90CQll
cHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFuZGxlWzBdOw0KK30g
X19hbGlnbmVkKDQpOw0KKw0KKy8qIGVwaGFuZGxlZGVsZXRlcmVzcCBleHRyYSBoZHIgKi8NCitz
dHJ1Y3QgbWFfdXNiX2hkcl9lcGhhbmRsZWRlbGV0ZXJlc3Agew0KKwl1aW50MzJfdCBlcF9lcnJv
cnMgOjUsDQorCQkgcmVzZXJ2ZWQgIDoyNzsNCisJdW5pb24gew0KKwkJdWludDE2X3QJCWVwdjsN
CisJCXN0cnVjdCBtYV91c2JfZXBfaGFuZGxlIGVwaDsNCisJfSBoYW5kbGVbMF07DQorfSBfX2Fs
aWduZWQoNCk7DQorDQorLyogbW9kaWZ5ZXAwcmVxIGV4dHJhIGhkciAqLw0KK3N0cnVjdCBtYV91
c2JfaGRyX21vZGlmeWVwMHJlcSB7DQorCXVuaW9uIHsNCisJCXVpbnQxNl90CQllcHY7DQorCQlz
dHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFuZGxlOw0KKwl1aW50MTZfdCBtYXhf
cGFja2V0X3NpemU7DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyoNCisgKiBtb2RpZnllcDByZXNw
IGV4dHJhIGhkcg0KKyAqIE9ubHkgaWYgcmVxIGVwMCBoYW5kbGUgYWRkciB3YXMgMCBhbmQgcmVx
IGRldiBpcyBpbiB0aGUgYWRkcmVzc2VkIHN0YXRlDQorICogb3IgIGlmIHJlcSBlcDAgaGFuZGxl
IGFkZHIgIT0gMCBhbmQgcmVxIGRldiBpcyBpbiBkZWZhdWx0IHN0YXRlDQorICovDQorc3RydWN0
IG1hX3VzYl9oZHJfbW9kaWZ5ZXAwcmVzcCB7DQorCXVuaW9uIHsNCisJCXVpbnQxNl90CQllcHY7
DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFuZGxlOw0KKw0KKwl1aW50
MTZfdCByZXNlcnZlZDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCisvKiBzZXR1c2JkZXZhZGRycmVx
IGV4dHJhIGhkciAqLw0KK3N0cnVjdCBtYV91c2JfaGRyX3NldHVzYmRldmFkZHJyZXEgew0KKwl1
aW50MTZfdCByZXNwb25zZV90aW1lb3V0OwkvKiBpbiBtcy4gKi8NCisJdWludDE2X3QgcmVzZXJ2
ZWQ7DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogc2V0dXNiZGV2YWRkcnJlc3AgZXh0cmEgaGRy
ICovDQorc3RydWN0IG1hX3VzYl9oZHJfc2V0dXNiZGV2YWRkcnJlc3Agew0KKwl1aW50MzJfdCBh
ZGRyCSAgOjcsDQorCQkgcmVzZXJ2ZWQgOjI1Ow0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIHVw
ZGF0ZWRldnJlcSBleHRyYSBoZHIgKi8NCitzdHJ1Y3QgbWFfdXNiX2hkcl91cGRhdGVkZXZyZXEg
ew0KKwl1aW50MTZfdCBtYXhfZXhpdF9sYXRlbmN5OwkvKiBodWJzIG9ubHkgKi8NCisJdWludDhf
dCBodWIJOjEsDQorCQlwb3J0cwk6NCwNCisJCW10dAk6MSwNCisJCXR0dAk6MjsNCisJdWludDhf
dCBpbnRlZ3JhdGVkX2h1Yl9sYXRlbmN5CToxLA0KKwkJcmVzZXJ2ZWQJCTo3Ow0KK30gX19hbGln
bmVkKDQpOw0KKw0KKy8qDQorICogVVNCMi4wIGRldiBkZXNjLCBpc29sYXRpbmcgZnVydGhlciBj
aGFuZ2VzIGluIHVzYi9jaDkuaA0KKyAqIFNlZSBVU0IyLjAgOS42LjYsIFRhYmxlIDktMTMNCisg
Ki8NCitzdHJ1Y3QgdXNiX2Rldl9kZXNjIHsNCisJdWludDhfdCBiTGVuZ3RoOw0KKwl1aW50OF90
IGJEZXNjcmlwdG9yVHlwZTsvKiBVU0IyLjAgOS40LCBUYWJsZSA5LTUgKDEpDQorCQkJCSAqIHVz
Yi9jaDkuaDogVVNCX0RUX0RFVklDRQ0KKwkJCQkgKi8NCisJdWludDE2X3QgYmNkVVNCOw0KKwl1
aW50OF90ICBiRGV2aWNlQ2xhc3M7DQorCXVpbnQ4X3QgIGJEZXZpY2VTdWJDbGFzczsNCisJdWlu
dDhfdCAgYkRldmljZVByb3RvY29sOw0KKwl1aW50OF90ICBiTWF4UGFja2V0U2l6ZTA7DQorCXVp
bnQxNl90IGlkVmVuZG9yOw0KKwl1aW50MTZfdCBpZFByb2R1Y3Q7DQorCXVpbnQxNl90IGJjZERl
dmljZTsNCisJdWludDhfdCAgaU1hbnVmYWN0dXJlcjsNCisJdWludDhfdCAgaVByb2R1Y3Q7DQor
CXVpbnQ4X3QgIGlTZXJpYWxOdW1iZXI7DQorCXVpbnQ4X3QgIGJOdW1Db25maWd1cmF0aW9uczsN
Cit9IF9fcGFja2VkOw0KKw0KK3N0cnVjdCBtYV91c2JfdXBkYXRlZGV2cmVxX2Rlc2Mgew0KKwlz
dHJ1Y3QgdXNiX2Rldl9kZXNjIHVzYjIwOw0KK30gX19hbGlnbmVkKDQpOw0KKw0KKy8qIHJlbW90
ZXdha2VyZXEgZXh0cmEgaGRyICovDQorc3RydWN0IG1hX3VzYl9oZHJfcmVtb3Rld2FrZXJlcSB7
DQorCXVpbnQzMl90IHJlc3VtZWQgIDoxLA0KKwkJIHJlc2VydmVkIDozMTsNCit9IF9fYWxpZ25l
ZCg0KTsNCisNCisvKiBzeW5jaHJlcS9yZXNwIGV4dHJhIGhkciAqLw0KK3N0cnVjdCBtYV91c2Jf
aGRyX3N5bmNoIHsNCisJdWludDMyX3QgbXRkX3ZhbGlkCToxLAkvKiBNQS1VU0IxLjBiIDYuNS4x
LjgsIFRhYmxlIDY2ICovDQorCQkgcmVzcF9yZXF1aXJlZAk6MSwNCisJCSByZXNlcnZlZAk6MzA7
DQorCXVuaW9uIHsNCisJCXVpbnQzMl90IHRpbWVzdGFtcDsJLyogTUEtVVNCMS4wYiA2LjUuMS4x
MSAqLw0KKwkJc3RydWN0IHsNCisJCQl1aW50MzJfdCBkZWx0YQkJOjEzLA0KKwkJCQkgYnVzX2lu
dGVydmFsCToxOTsNCisJCX07CQkvKiBNQS1VU0IxLjBiIDYuNi4xLCBUYWJsZSA2OSAqLw0KKwl9
Ow0KKwl1aW50MzJfdCBtdGQ7CQkvKiBNQS1VU0IxLjBiIDYuNS4xLjEyICovDQorfSBfX2FsaWdu
ZWQoNCk7DQorDQorLyogY2FuY2VsdHJhbnNmZXJyZXEgZXh0cmEgaGRyICovDQorc3RydWN0IG1h
X3VzYl9oZHJfY2FuY2VsdHJhbnNmZXJyZXEgew0KKwl1bmlvbiB7DQorCQl1aW50MTZfdAkJZXB2
Ow0KKwkJc3RydWN0IG1hX3VzYl9lcF9oYW5kbGUgZXBoOw0KKwl9IGhhbmRsZTsNCisJdWludDE2
X3Qgc3RyZWFtX2lkOw0KKwl1aW50MzJfdCByZXFfaWQJICA6OCwNCisJCSByZXNlcnZlZCA6MjQ7
DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogY2FuY2VsdHJhbnNmZXJyZXNwIGV4dHJhIGhkciAq
Lw0KK3N0cnVjdCBtYV91c2JfaGRyX2NhbmNlbHRyYW5zZmVycmVzcCB7DQorCXVuaW9uIHsNCisJ
CXVpbnQxNl90CQllcHY7DQorCQlzdHJ1Y3QgbWFfdXNiX2VwX2hhbmRsZSBlcGg7DQorCX0gaGFu
ZGxlOw0KKwl1aW50MTZfdCBzdHJlYW1faWQ7DQorCXVpbnQzMl90IHJlcV9pZAkJOjgsDQorCQkg
Y2FuY2VsX3N0YXR1cwk6MywNCisJCSByZXNlcnZlZDEJOjIxOw0KKwl1aW50MzJfdCBkZWxpdmVy
ZWRfc2VxX24gOjI0LA0KKwkJIHJlc2VydmVkMgkgOjg7DQorCXVpbnQzMl90IGRlbGl2ZXJlZF9i
eXRlX29mZnNldDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCisvKiB0cmFuc2ZlcnJlcS9yZXNwL2Fj
ayBleHRyYSBoZHIgKi8NCitzdHJ1Y3QgbWFfdXNiX2hkcl90cmFuc2ZlciB7DQorCXVpbnQzMl90
IHNlcV9uCToyNCwNCisJCSByZXFfaWQJOjg7DQorCXVuaW9uIHsNCisJCXVpbnQzMl90IHJlbV9z
aXplX2NyZWRpdDsNCisJCS8qIElTT0NIIGFsaWFzZWQgZmllbGRzIGFkZGVkIGZvciBjb252ZW5p
ZW5jZS4gKi8NCisJCXN0cnVjdCB7DQorCQkJdWludDMyX3QgcHJlc2VudGF0aW9uX3RpbWUgOjIw
LA0KKwkJCQkgc2VnbWVudHMJICAgOjEyOw0KKwkJfTsNCisJfTsNCit9IF9fYWxpZ25lZCg0KTsN
CisNCisvKiBpc29jaHRyYW5zZmVycmVxL3Jlc3AgZXh0cmEgaGRyICovDQorc3RydWN0IG1hX3Vz
Yl9oZHJfaXNvY2h0cmFuc2ZlciB7DQorCXVpbnQzMl90IHNlcV9uCToyNCwNCisJCSByZXFfaWQJ
Ojg7DQorCXVpbnQzMl90IHByZXNlbnRhdGlvbl90aW1lIDoyMCwNCisJCSBzZWdtZW50cwkgICA6
MTI7DQorfSBfX2FsaWduZWQoNCk7DQorDQorLyogaXNvY2h0cmFuc2ZlcnJlcS9yZXNwIG9wdGlv
bmFsIGhkciAqLw0KK3N0cnVjdCBtYV91c2JfaGRyX2lzb2NodHJhbnNmZXJfb3B0aW9uYWwgew0K
Kwl1bmlvbiB7DQorCQl1aW50MzJfdCB0aW1lc3RhbXA7CS8qIE1BLVVTQjEuMGIgNi41LjEuMTEg
Ki8NCisJCXN0cnVjdCB7DQorCQkJdWludDMyX3QgZGVsdGEJCToxMywNCisJCQkJIGJ1c19pbnRl
cnZhbAk6MTk7DQorCQl9OwkJLyogTUEtVVNCMS4wYiA2LjYuMSwgVGFibGUgNjkgKi8NCisJfTsN
CisJdWludDMyX3QgbXRkOwkJLyogTUEtVVNCMS4wYiA2LjUuMS4xMiAqLw0KK30gX19hbGlnbmVk
KDQpOw0KKw0KKy8qIGlzb2NoZGF0YWJsb2NrIGhkcnMgKi8NCisNCitzdHJ1Y3QgbWFfdXNiX2hk
cl9pc29jaGRhdGFibG9ja19zaG9ydCB7DQorCXVpbnQxNl90IGJsb2NrX2xlbmd0aDsNCisJdWlu
dDE2X3Qgc2VnbWVudF9udW1iZXIJOjEyLA0KKwkJIHNfZmxhZ3MJOjQ7DQorfSBfX2FsaWduZWQo
NCk7DQorDQorc3RydWN0IG1hX3VzYl9oZHJfaXNvY2hkYXRhYmxvY2tfc3RkIHsNCisJdWludDE2
X3QgYmxvY2tfbGVuZ3RoOw0KKwl1aW50MTZfdCBzZWdtZW50X251bWJlcgk6MTIsDQorCQkgc19m
bGFncwk6NDsNCisJdWludDE2X3Qgc2VnbWVudF9sZW5ndGg7DQorCXVpbnQxNl90IGZyYWdtZW50
X29mZnNldDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCitzdHJ1Y3QgbWFfdXNiX2hkcl9pc29jaGRh
dGFibG9ja19sb25nIHsNCisJdWludDE2X3QgYmxvY2tfbGVuZ3RoOw0KKwl1aW50MTZfdCBzZWdt
ZW50X251bWJlcgk6MTIsDQorCQkgc19mbGFncwk6NDsNCisJdWludDMyX3Qgc2VnbWVudF9sZW5n
dGg7DQorCXVpbnQzMl90IGZyYWdtZW50X29mZnNldDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCisv
KiBpc29jaHJlYWRzaXplYmxvY2sgaGRycyAqLw0KKw0KK3N0cnVjdCBtYV91c2JfaGRyX2lzb2No
cmVhZHNpemVibG9ja19zdGQgew0KKwl1aW50MzJfdCBzZXJ2aWNlX2ludGVydmFscwk6MTIsDQor
CQkgbWF4X3NlZ21lbnRfbGVuZ3RoCToyMDsNCit9IF9fYWxpZ25lZCg0KTsNCisNCitzdHJ1Y3Qg
bWFfdXNiX2hkcl9pc29jaHJlYWRzaXplYmxvY2tfbG9uZyB7DQorCXVpbnQzMl90IHNlcnZpY2Vf
aW50ZXJ2YWxzCToxMiwNCisJCSByZXNlcnZlZAkJOjIwOw0KKwl1aW50MzJfdCBtYXhfc2VnbWVu
dF9sZW5ndGg7DQorfSBfX2FsaWduZWQoNCk7DQorDQorc3RhdGljIGlubGluZSBzdHJ1Y3QgbWFf
dXNiX2hkcl90cmFuc2ZlciAqbWF1c2JfZ2V0X2RhdGFfdHJhbnNmZXJfaGRyKA0KKwlzdHJ1Y3Qg
bWFfdXNiX2hkcl9jb21tb24gKmhkcikNCit7DQorCXJldHVybiAoc3RydWN0IG1hX3VzYl9oZHJf
dHJhbnNmZXIgKilzaGlmdF9wdHIoaGRyLCBzaXplb2YoKmhkcikpOw0KK30NCisNCitzdGF0aWMg
aW5saW5lIHN0cnVjdCBtYV91c2JfaGRyX2lzb2NodHJhbnNmZXIgKm1hdXNiX2dldF9pc29jaHRy
YW5zZmVyX2hkcigNCisJc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICpoZHIpDQorew0KKwlyZXR1
cm4gKHN0cnVjdCBtYV91c2JfaGRyX2lzb2NodHJhbnNmZXIgKilzaGlmdF9wdHIoaGRyLCBzaXpl
b2YoKmhkcikpOw0KK30NCisNCitzdGF0aWMgaW5saW5lDQorc3RydWN0IG1hX3VzYl9oZHJfaXNv
Y2h0cmFuc2Zlcl9vcHRpb25hbCAqbWF1c2JfaGRyX2lzb2NodHJhbnNmZXJfb3B0aW9uYWxfaGRy
KA0KKwkJCQkJCXN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqaGRyKQ0KK3sNCisJcmV0dXJuIChz
dHJ1Y3QgbWFfdXNiX2hkcl9pc29jaHRyYW5zZmVyX29wdGlvbmFsICopDQorCQkJc2hpZnRfcHRy
KGhkciwgc2l6ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbikgKw0KKwkJCQkgICAgICAgc2l6
ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2lzb2NodHJhbnNmZXIpKTsNCit9DQorDQorI2VuZGlmCS8q
IF9fTUFVU0JfQ09NTU9OX01BX1VTQl9IX18gKi8NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdp
bmcvbWF1c2JfaG9zdC9pbmNsdWRlL2NvbW1vbi9tYXVzYl9hZGRyZXNzLmggYi9kcml2ZXJzL3N0
YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2NvbW1vbi9tYXVzYl9hZGRyZXNzLmgNCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjRkNzg1ZmQxYjA4MA0KLS0tIC9kZXYv
bnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9jb21tb24vbWF1
c2JfYWRkcmVzcy5oDQpAQCAtMCwwICsxLDM4IEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZp
ZXI6IEdQTC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxh
eUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVy
bXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2Ug
djIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFy
Y2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9DT01N
T05fTUFVU0JfQUREUkVTU19IX18NCisjZGVmaW5lIF9fTUFVU0JfQ09NTU9OX01BVVNCX0FERFJF
U1NfSF9fDQorDQorI2lmZGVmIF9fS0VSTkVMX18NCisjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4N
CisjZWxzZQ0KKyNpbmNsdWRlIDx0eXBlcy5oPg0KKyNlbmRpZiAvKiBfX0tFUk5FTF9fICovDQor
DQorI2RlZmluZSBBRERSX0xFTiAxNg0KKw0KK3N0cnVjdCBtYXVzYl9kZXZpY2VfYWRkcmVzcyB7
DQorCXVpbnQ4X3QgbGlua1R5cGU7DQorCXN0cnVjdCB7DQorCQl1bmlvbiB7DQorCQkJY2hhcglp
cDRbQUREUl9MRU5dOw0KKwkJCXVpbnQ4X3QJaXA2W0FERFJfTEVOXTsNCisJCX0gQWRkcmVzczsN
CisJCXVpbnQ4X3QgbnVtYmVyT2ZQb3J0czsNCisJCXN0cnVjdCB7DQorCQkJdWludDE2X3QgbWFu
YWdlbWVudDsNCisJCQl1aW50MTZfdCBjb250cm9sOw0KKwkJCXVpbnQxNl90IGJ1bGs7DQorCQkJ
dWludDE2X3QgaW50ZXJydXB0Ow0KKwkJCXVpbnQxNl90IGlzb2Nocm9ub3VzOw0KKwkJfSBQb3J0
Ow0KKwl9IElwOw0KK307DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfQ09NTU9OX01BVVNCX0FERFJF
U1NfSF9fICovDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVk
ZS9jb21tb24vbWF1c2JfZHJpdmVyX3N0YXR1cy5oIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hv
c3QvaW5jbHVkZS9jb21tb24vbWF1c2JfZHJpdmVyX3N0YXR1cy5oDQpuZXcgZmlsZSBtb2RlIDEw
MDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi4xODIzYTA3OTkwOGYNCi0tLSAvZGV2L251bGwNCisr
KyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvY29tbW9uL21hdXNiX2RyaXZl
cl9zdGF0dXMuaA0KQEAgLTAsMCArMSwyMCBAQA0KKy8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVy
OiBHUEwtMi4wICovDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlM
aW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1z
IGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYy
LiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNo
aXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaWZuZGVmIF9fTUFVU0JfQ09NTU9O
X01BVVNCX0RSSVZFUl9TVEFUVVNfSF9fDQorI2RlZmluZSBfX01BVVNCX0NPTU1PTl9NQVVTQl9E
UklWRVJfU1RBVFVTX0hfXw0KKw0KKyNkZWZpbmUgTUFVU0JfRFJJVkVSX0JBRF9SRUFEX0JVRkZF
Ul9TSVpFICAtMQ0KKyNkZWZpbmUgTUFVU0JfRFJJVkVSX1JJTkdfRVZFTlRTX1NUT1BQRUQgICAt
Mg0KKyNkZWZpbmUgTUFVU0JfRFJJVkVSX1NZU1RFTV9TVVNQRU5ERUQgICAgICAtMw0KKyNkZWZp
bmUgTUFVU0JfRFJJVkVSX0NPUFlfVE9fQlVGRkVSX0ZBSUxFRCAtNA0KKw0KKyNkZWZpbmUgTUFV
U0JfRFJJVkVSX1JFQURfVElNRU9VVCAwDQorI2RlZmluZSBNQVVTQl9EUklWRVJfUkVBRF9FUlJP
UiAgLTENCisNCisjZW5kaWYNCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9z
dC9pbmNsdWRlL2NvbW1vbi9tYXVzYl9ldmVudC5oIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hv
c3QvaW5jbHVkZS9jb21tb24vbWF1c2JfZXZlbnQuaA0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmlu
ZGV4IDAwMDAwMDAwMDAwMC4uYzhhYTJiNDE2MDViDQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2
ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2NvbW1vbi9tYXVzYl9ldmVudC5oDQpAQCAt
MCwwICsxLDIyOCBAQA0KKy8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wICovDQor
LyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0K
KyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25z
IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUg
Q09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1v
cmUgZGV0YWlscy4NCisgKi8NCisjaWZuZGVmIF9fTUFVU0JfQ09NTU9OX01BVVNCX0VWRU5UX0hf
Xw0KKyNkZWZpbmUgX19NQVVTQl9DT01NT05fTUFVU0JfRVZFTlRfSF9fDQorDQorI2luY2x1ZGUg
PGNvbW1vbi9tYV91c2IuaD4NCisNCisjZGVmaW5lIE1BVVNCX01BWF9OVU1fT0ZfTUFfREVWUwkJ
CTE1DQorI2RlZmluZSBNQVVTQl9SSU5HX0JVRkZFUl9TSVpFCQkJCTEwMjQNCisjZGVmaW5lIE1B
VVNCX01BWF9EQVRBX0lOX1JFUV9TSVpFCQkJMjgNCisNCisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZ
UEVfREVWX1JFU0VUCQkJMXUNCisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZUEVfVVNCX0RFVl9IQU5E
TEUJCQkydQ0KKyNkZWZpbmUgTUFVU0JfRVZFTlRfVFlQRV9FUF9IQU5ETEUJCQkzdQ0KKyNkZWZp
bmUgTUFVU0JfRVZFTlRfVFlQRV9FUF9IQU5ETEVfQUNUSVZBVEUJCTR1DQorI2RlZmluZSBNQVVT
Ql9FVkVOVF9UWVBFX0VQX0hBTkRMRV9JTkFDVElWQVRFCQk1dQ0KKyNkZWZpbmUgTUFVU0JfRVZF
TlRfVFlQRV9FUF9IQU5ETEVfUkVTRVQJCTZ1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX0VQ
X0hBTkRMRV9ERUxFVEUJCTd1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX01PRElGWV9FUDAJ
CQk4dQ0KKyNkZWZpbmUgTUFVU0JfRVZFTlRfVFlQRV9TRVRfVVNCX0RFVl9BRERSRVNTCQk5dQ0K
KyNkZWZpbmUgTUFVU0JfRVZFTlRfVFlQRV9VUERBVEVfREVWCQkJMTB1DQorI2RlZmluZSBNQVVT
Ql9FVkVOVF9UWVBFX1VTQl9ERVZfRElTQ09OTkVDVAkJMTF1DQorI2RlZmluZSBNQVVTQl9FVkVO
VF9UWVBFX1BJTkcJCQkJMTJ1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX0RFVl9ESVNDT05O
RUNUCQkJMTN1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX1VTQl9ERVZfUkVTRVQJCQkxNHUN
CisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZUEVfQ0FOQ0VMX1RSQU5TRkVSCQkxNXUNCisNCisjZGVm
aW5lIE1BVVNCX0VWRU5UX1RZUEVfUE9SVF9DSEFOR0VECQkJODB1DQorI2RlZmluZSBNQVVTQl9F
VkVOVF9UWVBFX1NFTkRfTUdNVF9NU0cJCQk4MXUNCisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZUEVf
U0VORF9EQVRBX01TRwkJCTgydQ0KKyNkZWZpbmUgTUFVU0JfRVZFTlRfVFlQRV9SRUNFSVZFRF9N
R01UX01TRwkJODN1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX1JFQ0VJVkVEX0RBVEFfTVNH
CQk4NHUNCisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZUEVfVVJCX0NPTVBMRVRFCQkJODV1DQorI2Rl
ZmluZSBNQVVTQl9FVkVOVF9UWVBFX1NFTkRfQUNLCQkJODZ1DQorI2RlZmluZSBNQVVTQl9FVkVO
VF9UWVBFX0lURVJBVE9SX1JFU0VUCQkJODd1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX0lU
RVJBVE9SX1NFRUsJCQk4OHUNCisjZGVmaW5lIE1BVVNCX0VWRU5UX1RZUEVfREVMRVRFX0RBVEFf
VFJBTlNGRVIJCTg5dQ0KKyNkZWZpbmUgTUFVU0JfRVZFTlRfVFlQRV9ERUxFVEVfTUFfREVWCQkJ
OTB1DQorI2RlZmluZSBNQVVTQl9FVkVOVF9UWVBFX1VTRVJfRklOSVNIRUQJCQk5MXUNCisjZGVm
aW5lIE1BVVNCX0VWRU5UX1RZUEVfUkVMRUFTRV9FVkVOVF9SRVNPVVJDRVMJOTJ1DQorI2RlZmlu
ZSBNQVVTQl9FVkVOVF9UWVBFX05FVFdPUktfRElTQ09OTkVDVEVECQk5M3UNCisjZGVmaW5lIE1B
VVNCX0VWRU5UX1RZUEVfTUdNVF9SRVFVRVNUX1RJTUVEX09VVAkJOTR1DQorDQorI2RlZmluZSBN
QVVTQl9FVkVOVF9UWVBFX05PTkUJCQkJMjU1dQ0KKw0KKyNkZWZpbmUgTUFVU0JfREFUQV9NU0df
RElSRUNUSU9OX09VVAkJCTANCisjZGVmaW5lIE1BVVNCX0RBVEFfTVNHX0RJUkVDVElPTl9JTgkJ
CTENCisjZGVmaW5lIE1BVVNCX0RBVEFfTVNHX0NPTlRST0wgTUFVU0JfREFUQV9NU0dfRElSRUNU
SU9OX09VVA0KKw0KK3N0cnVjdCBtYXVzYl9kZXZoYW5kbGUgew0KKwl1aW50NjRfdCBldmVudF9p
ZDsNCisJdWludDMyX3Qgcm91dGVfc3RyaW5nOw0KKwl1aW50MTZfdCBodWJfZGV2X2hhbmRsZTsN
CisJdWludDE2X3QgcGFyZW50X2hzX2h1Yl9kZXZfaGFuZGxlOw0KKwl1aW50MTZfdCBwYXJlbnRf
aHNfaHViX3BvcnQ7DQorCXVpbnQxNl90IG10dDsNCisJLyogZGV2X2hhbmRsZSBhc3NpZ25lZCBp
biB1c2VyICovDQorCXVpbnQxNl90IGRldl9oYW5kbGU7DQorCXVpbnQ4X3QgIGRldmljZV9zcGVl
ZDsNCisJdWludDhfdCAgbHNlOw0KK307DQorDQorc3RydWN0IG1hdXNiX2VwaGFuZGxlIHsNCisJ
dWludDY0X3QgZXZlbnRfaWQ7DQorCXVpbnQxNl90IGRldmljZV9oYW5kbGU7DQorCXVpbnQxNl90
IGRlc2NyaXB0b3Jfc2l6ZTsNCisJLyogZXBfaGFuZGxlIGFzc2lnbmVkIGluIHVzZXIgKi8NCisJ
dWludDE2X3QgZXBfaGFuZGxlOw0KKwljaGFyCSBkZXNjcmlwdG9yW3NpemVvZihzdHJ1Y3QgbWFf
dXNiX2VwaGFuZGxlcmVxX2Rlc2Nfc3MpXTsNCit9Ow0KKw0KK3N0cnVjdCBtYXVzYl9lcGFjdGl2
YXRlIHsNCisJdWludDY0X3QgZXZlbnRfaWQ7DQorCXVpbnQxNl90IGRldmljZV9oYW5kbGU7DQor
CXVpbnQxNl90IGVwX2hhbmRsZTsNCit9Ow0KKw0KK3N0cnVjdCBtYXVzYl9lcGluYWN0aXZhdGUg
ew0KKwl1aW50NjRfdCBldmVudF9pZDsNCisJdWludDE2X3QgZGV2aWNlX2hhbmRsZTsNCisJdWlu
dDE2X3QgZXBfaGFuZGxlOw0KK307DQorDQorc3RydWN0IG1hdXNiX2VwcmVzZXQgew0KKwl1aW50
NjRfdCBldmVudF9pZDsNCisJdWludDE2X3QgZGV2aWNlX2hhbmRsZTsNCisJdWludDE2X3QgZXBf
aGFuZGxlOw0KKwl1aW50OF90ICB0c3A7DQorfTsNCisNCitzdHJ1Y3QgbWF1c2JfZXBkZWxldGUg
ew0KKwl1aW50NjRfdCBldmVudF9pZDsNCisJdWludDE2X3QgZGV2aWNlX2hhbmRsZTsNCisJdWlu
dDE2X3QgZXBfaGFuZGxlOw0KK307DQorDQorc3RydWN0IG1hdXNiX3VwZGF0ZWRldiB7DQorCXVp
bnQ2NF90IGV2ZW50X2lkOw0KKwl1aW50MTZfdCBkZXZpY2VfaGFuZGxlOw0KKwl1aW50MTZfdCBt
YXhfZXhpdF9sYXRlbmN5Ow0KKwlzdHJ1Y3QgbWFfdXNiX3VwZGF0ZWRldnJlcV9kZXNjIHVwZGF0
ZV9kZXNjcmlwdG9yOw0KKwl1aW50OF90ICBodWI7DQorCXVpbnQ4X3QgIG51bWJlcl9vZl9wb3J0
czsNCisJdWludDhfdCAgbXR0Ow0KKwl1aW50OF90ICB0dHQ7DQorCXVpbnQ4X3QgIGludGVncmF0
ZWRfaHViX2xhdGVuY3k7DQorfTsNCisNCitzdHJ1Y3QgbWF1c2JfdXNiZGV2cmVzZXQgew0KKwl1
aW50NjRfdCBldmVudF9pZDsNCisJdWludDE2X3QgZGV2aWNlX2hhbmRsZTsNCit9Ow0KKw0KK3N0
cnVjdCBtYXVzYl9tb2RpZnllcDAgew0KKwl1aW50NjRfdCBldmVudF9pZDsNCisJdWludDE2X3Qg
ZGV2aWNlX2hhbmRsZTsNCisJdWludDE2X3QgZXBfaGFuZGxlOw0KKwl1aW50MTZfdCBtYXhfcGFj
a2V0X3NpemU7DQorfTsNCisNCitzdHJ1Y3QgbWF1c2Jfc2V0dXNiZGV2YWRkcmVzcyB7DQorCXVp
bnQ2NF90IGV2ZW50X2lkOw0KKwl1aW50MTZfdCBkZXZpY2VfaGFuZGxlOw0KKwl1aW50MTZfdCBy
ZXNwb25zZV90aW1lb3V0Ow0KK307DQorDQorc3RydWN0IG1hdXNiX3VzYmRldmRpc2Nvbm5lY3Qg
ew0KKwl1aW50MTZfdCBkZXZpY2VfaGFuZGxlOw0KK307DQorDQorc3RydWN0IG1hdXNiX2NhbmNl
bHRyYW5zZmVyIHsNCisJdWludDY0X3QgdXJiOw0KKwl1aW50MTZfdCBkZXZpY2VfaGFuZGxlOw0K
Kwl1aW50MTZfdCBlcF9oYW5kbGU7DQorfTsNCisNCitzdHJ1Y3QgbWF1c2JfbWdtdF9oZHIgew0K
KwlfX2FsaWduZWQoNCkgY2hhciBoZHJbTUFVU0JfTUFYX01HTVRfU0laRV07DQorfTsNCisNCitz
dHJ1Y3QgbWF1c2JfbWdtdF9yZXFfdGltZWRvdXQgew0KKwl1aW50NjRfdCBldmVudF9pZDsNCit9
Ow0KKw0KK3N0cnVjdCBtYXVzYl9kZWxldGVfbWFfZGV2IHsNCisJdWludDY0X3QgZXZlbnRfaWQ7
DQorCXVpbnQxNl90IGRldmljZV9pZDsNCit9Ow0KKw0KKy8qIFRPRE8gc3BsaXQgbWdtdF9ldmVu
dCB0byBnZW5lcmljIHNlbmQgbWdtdCByZXEgYW5kIHNwZWNpZmljIHJlcXVlc3RzICovDQorc3Ry
dWN0IG1hdXNiX21nbXRfZXZlbnQgew0KKwl1bmlvbiB7DQorCQlzdHJ1Y3QgbWF1c2JfZGV2aGFu
ZGxlCQlkZXZfaGFuZGxlOw0KKwkJc3RydWN0IG1hdXNiX2VwaGFuZGxlCQllcF9oYW5kbGU7DQor
CQlzdHJ1Y3QgbWF1c2JfZXBhY3RpdmF0ZQkJZXBfYWN0aXZhdGU7DQorCQlzdHJ1Y3QgbWF1c2Jf
ZXBpbmFjdGl2YXRlCWVwX2luYWN0aXZhdGU7DQorCQlzdHJ1Y3QgbWF1c2JfZXByZXNldAkJZXBf
cmVzZXQ7DQorCQlzdHJ1Y3QgbWF1c2JfZXBkZWxldGUJCWVwX2RlbGV0ZTsNCisJCXN0cnVjdCBt
YXVzYl9tb2RpZnllcDAJCW1vZGlmeV9lcDA7DQorCQlzdHJ1Y3QgbWF1c2Jfc2V0dXNiZGV2YWRk
cmVzcwlzZXRfdXNiX2Rldl9hZGRyZXNzOw0KKwkJc3RydWN0IG1hdXNiX3VwZGF0ZWRldgkJdXBk
YXRlX2RldjsNCisJCXN0cnVjdCBtYXVzYl91c2JkZXZyZXNldAl1c2JfZGV2X3Jlc2V0Ow0KKwkJ
c3RydWN0IG1hdXNiX3VzYmRldmRpc2Nvbm5lY3QJdXNiX2Rldl9kaXNjb25uZWN0Ow0KKwkJc3Ry
dWN0IG1hdXNiX2NhbmNlbHRyYW5zZmVyCWNhbmNlbF90cmFuc2ZlcjsNCisJCXN0cnVjdCBtYXVz
Yl9tZ210X2hkcgkJbWdtdF9oZHI7DQorCQlzdHJ1Y3QgbWF1c2JfbWdtdF9yZXFfdGltZWRvdXQJ
bWdtdF9yZXFfdGltZWRvdXQ7DQorCQlzdHJ1Y3QgbWF1c2JfZGVsZXRlX21hX2RldglkZWxldGVf
bWFfZGV2Ow0KKwl9Ow0KK307DQorDQorc3RydWN0IG1hdXNiX2RhdGFfZXZlbnQgew0KKwl1aW50
NjRfdCB1cmI7DQorCXVpbnQ2NF90IHJlY3ZfYnVmOw0KKwl1aW50MzJfdCBpdGVyYXRvcl9zZWVr
X2RlbHRhOw0KKwl1aW50MzJfdCB0cmFuc2Zlcl9zaXplOw0KKwl1aW50MzJfdCByZW1fdHJhbnNm
ZXJfc2l6ZTsNCisJdWludDMyX3QgdHJhbnNmZXJfZmxhZ3M7DQorCXVpbnQzMl90IGlzb2NoX3Nl
Z19udW07DQorCXVpbnQzMl90IHJlcV9pZDsNCisJdWludDMyX3QgcGF5bG9hZF9zaXplOw0KKwlp
bnQzMl90ICBzdGF0dXM7DQorDQorCV9fYWxpZ25lZCg0KSBjaGFyIGhkcltNQVVTQl9UUkFOU0ZF
Ul9IRFJfU0laRV07DQorCV9fYWxpZ25lZCg0KSBjaGFyIGhkcl9hY2tbTUFVU0JfVFJBTlNGRVJf
SERSX1NJWkVdOw0KKw0KKwl1aW50MTZfdCBkZXZpY2VfaWQ7DQorCXVpbnQxNl90IGVwX2hhbmRs
ZTsNCisJdWludDE2X3QgcGFja2V0X3NpemU7DQorCXVpbnQ4X3QgIHNldHVwX3BhY2tldDsNCisJ
dWludDhfdCAgZGlyZWN0aW9uOw0KKwl1aW50OF90ICB0cmFuc2Zlcl90eXBlOw0KKwl1aW50OF90
ICBmaXJzdF9jb250cm9sX3BhY2tldDsNCisJdWludDhfdCAgdHJhbnNmZXJfZW90Ow0KKwl1aW50
OF90ICBtYXVzYl9hZGRyZXNzOw0KKwl1aW50OF90ICBtYXVzYl9zc2lkOw0KK307DQorDQorc3Ry
dWN0IG1hdXNiX3BvcnRfY2hhbmdlZF9ldmVudCB7DQorCXVpbnQ4X3QgcG9ydDsNCisJdWludDhf
dCBkZXZfdHlwZTsNCisJdWludDhfdCBkZXZfc3BlZWQ7DQorCXVpbnQ4X3QgbHNlOw0KK307DQor
DQorc3RydWN0IG1hdXNiX2V2ZW50IHsNCisJdW5pb24gew0KKwkJc3RydWN0IG1hdXNiX21nbXRf
ZXZlbnQJCW1nbXQ7DQorCQlzdHJ1Y3QgbWF1c2JfZGF0YV9ldmVudAkJZGF0YTsNCisJCXN0cnVj
dCBtYXVzYl9wb3J0X2NoYW5nZWRfZXZlbnQgcG9ydF9jaGFuZ2VkOw0KKwl9Ow0KKwlpbnQzMl90
IHN0YXR1czsNCisJdWludDhfdCB0eXBlOw0KKwl1aW50OF90IG1hZGV2X2FkZHI7DQorfTsNCisN
CitzdHJ1Y3QgbWF1c2JfZXZlbnRzX25vdGlmaWNhdGlvbiB7DQorCXVpbnQxNl90IG51bV9vZl9l
dmVudHM7DQorCXVpbnQxNl90IG51bV9vZl9jb21wbGV0ZWRfZXZlbnRzOw0KKwl1aW50OF90ICBt
YWRldl9hZGRyOw0KK307DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfQ09NTU9OX01BVVNCX0VWRU5U
X0hfXyAqLw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUv
aGNkL2h1Yi5oIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9oY2QvaHViLmgN
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjliNzM5MDQ4NTcwNQ0K
LS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9o
Y2QvaHViLmgNCkBAIC0wLDAgKzEsMTIwIEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6
IEdQTC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxp
bmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMg
YW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIu
IFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hp
dmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9IQ0RfSFVC
X0hfXw0KKyNkZWZpbmUgX19NQVVTQl9IQ0RfSFVCX0hfXw0KKw0KKyNpbmNsdWRlIDxsaW51eC91
c2IuaD4NCisjaW5jbHVkZSA8bGludXgvdXNiL2hjZC5oPg0KKw0KKyNpbmNsdWRlICJ1dGlscy9t
YXVzYl9kYXRhX2l0ZXJhdG9yLmgiDQorDQorc3RhdGljIGNvbnN0IGNoYXIgZHJpdmVyX25hbWVb
XSA9ICJNQS1VU0IgaG9zdCBjb250cm9sbGVyIjsNCisNCisjZGVmaW5lIFBPUlRfQ19NQVNLIFwN
CisJCSgoVVNCX1BPUlRfU1RBVF9DX0NPTk5FQ1RJT04gXA0KKwkJfCBVU0JfUE9SVF9TVEFUX0Nf
RU5BQkxFIFwNCisJCXwgVVNCX1BPUlRfU1RBVF9DX1NVU1BFTkQgXA0KKwkJfCBVU0JfUE9SVF9T
VEFUX0NfT1ZFUkNVUlJFTlQgXA0KKwkJfCBVU0JfUE9SVF9TVEFUX0NfUkVTRVQpIDw8IDE2KQ0K
Kw0KKyNkZWZpbmUgTUFVU0JfUE9SVF8yMF9TVEFUVVNfQ09OTkVDVCAgICAgICAgIDB4MDAwMQ0K
KyNkZWZpbmUgTUFVU0JfUE9SVF8yMF9TVEFUVVNfRU5BQkxFICAgICAgICAgIDB4MDAwMg0KKyNk
ZWZpbmUgTUFVU0JfUE9SVF8yMF9TVEFUVVNfU1VTUEVORCAgICAgICAgIDB4MDAwNA0KKyNkZWZp
bmUgTUFVU0JfUE9SVF8yMF9TVEFUVVNfT1ZFUl9DVVJSRU5UICAgIDB4MDAwOA0KKyNkZWZpbmUg
TUFVU0JfUE9SVF8yMF9TVEFUVVNfUkVTRVQgICAgICAgICAgIDB4MDAxMA0KKyNkZWZpbmUgTUFV
U0JfUE9SVF8yMF9TVEFUVVNfUE9XRVIgICAgICAgICAgIDB4MDEwMA0KKyNkZWZpbmUgTUFVU0Jf
UE9SVF8yMF9TVEFUVVNfTE9XX1NQRUVEICAgICAgIDB4MDIwMA0KKyNkZWZpbmUgTUFVU0JfUE9S
VF8yMF9TVEFUVVNfSElHSF9TUEVFRCAgICAgIDB4MDQwMA0KKw0KKyNkZWZpbmUgTUFVU0JfQ0hB
TkdFX1BPUlRfMjBfU1RBVFVTX0NPTk5FQ1QgIDB4MDEwMDAwDQorI2RlZmluZSBNQVVTQl9DSEFO
R0VfUE9SVF8yMF9TVEFUVVNfUkVTRVQgICAgMHgxMDAwMDANCisNCisvKiBVU0IgMy4yIHNwZWNp
ZmljYXRpb24gY2hhcHRlciAxMC4xNi4yLjYuMSB0YWJsZSAxMC0xMyBwYWdlIDQ0MCAqLw0KKyNk
ZWZpbmUgTUFVU0JfUE9SVF8zMF9TVEFUVVNfQ09OTkVDVCAgICAgICAgICAgICAgMHgwMDAxDQor
I2RlZmluZSBNQVVTQl9QT1JUXzMwX1NUQVRVU19FTkFCTEUgICAgICAgICAgICAgICAweDAwMDIN
CisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfU1RBVFVTX09WRVJfQ1VSUkVOVCAgICAgICAgIDB4MDAw
OA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9TVEFUVVNfUkVTRVQgICAgICAgICAgICAgICAgMHgw
MDEwDQorI2RlZmluZSBNQVVTQl9QT1JUXzMwX0xJTktfU1RBVEVfVTAgICAgICAgICAgICAgICAw
eDAwMDANCisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfTElOS19TVEFURV9VMSAgICAgICAgICAgICAg
IDB4MDAyMA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9MSU5LX1NUQVRFX1UyICAgICAgICAgICAg
ICAgMHgwMDQwDQorI2RlZmluZSBNQVVTQl9QT1JUXzMwX0xJTktfU1RBVEVfVTMgICAgICAgICAg
ICAgICAweDAwNjANCisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfTElOS19TVEFURV9ESVNBQkxFRCAg
ICAgICAgIDB4MDA4MA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9MSU5LX1NUQVRFX1JYX0RFVEVD
VCAgICAgICAgMHgwMEEwDQorI2RlZmluZSBNQVVTQl9QT1JUXzMwX0xJTktfU1RBVEVfSU5BQ1RJ
VkUgICAgICAgICAweDAwQzANCisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfTElOS19TVEFURV9QT0xM
SU5HICAgICAgICAgIDB4MDBFMA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9MSU5LX1NUQVRFX1JF
Q09WRVJZICAgICAgICAgMHgwMTAwDQorI2RlZmluZSBNQVVTQl9QT1JUXzMwX0xJTktfU1RBVEVf
SE9UX1JFU0VUICAgICAgICAweDAxMjANCisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfTElOS19TVEFU
RV9DT01QTElBTkNFX01PREUgIDB4MDE0MA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9MSU5LX1NU
QVRFX0xPT1BCQUNLICAgICAgICAgMHgwMTYwDQorI2RlZmluZSBNQVVTQl9QT1JUXzMwX1NUQVRV
U19QT1dFUiAgICAgICAgICAgICAgICAweDAyMDANCisjZGVmaW5lIE1BVVNCX1BPUlRfMzBfU1RB
VFVTX1NVUEVSX1NQRUVEICAgICAgICAgIDB4MDQwMA0KKyNkZWZpbmUgTUFVU0JfUE9SVF8zMF9D
TEVBUl9MSU5LX1NUQVRFICAgICAgICAgICAgMHhGRTFGDQorDQorLyogVVNCIDMuMiBzcGVjaWZp
Y2F0aW9uIGNoYXB0ZXIgMTAuMTYuMi42LjIgdGFibGUgMTAtMTQgcGFnZSA0NDMgKi8NCisjZGVm
aW5lIE1BVVNCX0NIQU5HRV9QT1JUXzMwX1NUQVRVU19DT05ORUNUICAgICAgICAgICAgICAweDAx
MDAwMA0KKyNkZWZpbmUgTUFVU0JfQ0hBTkdFX1BPUlRfMzBfU1RBVFVTX09WRVJfQ1VSUkVOVCAg
ICAgICAgIDB4MDgwMDAwDQorI2RlZmluZSBNQVVTQl9DSEFOR0VfUE9SVF8zMF9TVEFUVVNfUkVT
RVQgICAgICAgICAgICAgICAgMHgxMDAwMDANCisjZGVmaW5lIE1BVVNCX0NIQU5HRV9QT1JUXzMw
X0JIX1NUQVRVU19SRVNFVCAgICAgICAgICAgICAweDIwMDAwMA0KKyNkZWZpbmUgTUFVU0JfQ0hB
TkdFX1BPUlRfMzBfTElOS19TVEFURSAgICAgICAgICAgICAgICAgIDB4NDAwMDAwDQorI2RlZmlu
ZSBNQVVTQl9DSEFOR0VfUE9SVF8zMF9DT05GSUdfRVJST1IgICAgICAgICAgICAgICAgMHg4MDAw
MDANCisNCisvKiBVU0IgMy4yIHNwZWNpZmljYXRpb24gY2hhcHRlciAxMC4xNi4yLjQgdGFibGUg
MTAtMTAgcGFnZSA0MzggKi8NCisjZGVmaW5lIE1BVVNCX0hVQl8zMF9QT1dFUl9HT09EICAgICAg
ICAgICAgICAweDAwDQorI2RlZmluZSBNQVVTQl9IVUJfMzBfTE9DQUxfUE9XRVJfU09VUkNFX0xP
U1QgMHgwMQ0KKyNkZWZpbmUgTUFVU0JfSFVCXzMwX09WRVJfQ1VSUkVOVCAgICAgICAgICAgIDB4
MDINCisNCisvKiBVU0IgMy4yIHNwZWNpZmljYXRpb24gY2hhcHRlciAxMC4xNi4yLjQgdGFibGUg
MTAtMTEgcGFnZSA0MzggKi8NCisjZGVmaW5lIE1BVVNCX0NIQU5HRV9IVUJfMzBfTE9DQUxfUE9X
RVJfU09VUkNFX0xPU1QgIDB4MTAwMDANCisjZGVmaW5lIE1BVVNCX0NIQU5HRV9IVUJfMzBfT1ZF
Ul9DVVJSRU5UICAgICAgICAgICAgIDB4MjAwMDANCisNCisjZGVmaW5lIERFVl9IQU5ETEVfTk9U
X0FTU0lHTkVECS0xDQorDQorc3RydWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4IHsNCisJaW50MzJf
dAkJZGV2X2hhbmRsZTsNCisJYm9vbAkJYWRkcmVzc2VkOw0KKwl2b2lkCQkqZGV2X2FkZHI7DQor
CXN0cnVjdCByYl9ub2RlCXJiX25vZGU7DQorfTsNCisNCitzdHJ1Y3QgbWF1c2JfZW5kcG9pbnRf
Y3R4IHsNCisJdWludDE2X3QgZXBfaGFuZGxlOw0KKwl1aW50MTZfdCBkZXZfaGFuZGxlOw0KKwl2
b2lkCSAqbWFfZGV2Ow0KKwlzdHJ1Y3QgbWF1c2JfdXNiX2RldmljZV9jdHggKnVzYl9kZXZpY2Vf
Y3R4Ow0KK307DQorDQorc3RydWN0IG1hdXNiX3VyYl9jdHggew0KKwlzdHJ1Y3QgdXJiCQkqdXJi
Ow0KKwlzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyCWl0ZXJhdG9yOw0KKwlzdHJ1Y3QgcmJfbm9kZQkJ
cmJfbm9kZTsNCisJc3RydWN0IHdvcmtfc3RydWN0CXdvcms7DQorfTsNCisNCitpbnQgbWF1c2Jf
cHJvYmUoc3RydWN0IGRldmljZSAqZGV2KTsNCit2b2lkIG1hdXNiX2hjZF91cmJfY29tcGxldGUo
c3RydWN0IHVyYiAqdXJiLCB1aW50MzJfdCBhY3R1YWxfbGVuZ3RoLA0KKwkJCSAgICBpbnQgc3Rh
dHVzKTsNCisNCisjaWZkZWYgSVNPQ0hfQ0FMTEJBQ0tTDQoraW50IG1hdXNiX3NlY19ldmVudF9y
aW5nX3NldHVwKHN0cnVjdCB1c2JfaGNkICpoY2QsIHVuc2lnbmVkIGludCBpbnRyX251bSk7DQor
aW50IG1hdXNiX3NlY19ldmVudF9yaW5nX2NsZWFudXAoc3RydWN0IHVzYl9oY2QgKmhjZCwgdW5z
aWduZWQgaW50IGludHJfbnVtKTsNCitwaHlzX2FkZHJfdCBtYXVzYl9nZXRfc2VjX2V2ZW50X3Jp
bmdfcGh5c19hZGRyKHN0cnVjdCB1c2JfaGNkICpoY2QsDQorCQkJCQkgICAgICAgdW5zaWduZWQg
aW50IGludHJfbnVtLA0KKwkJCQkJICAgICAgIGRtYV9hZGRyX3QgKmRtYSk7DQorcGh5c19hZGRy
X3QgbWF1c2JfZ2V0X3hmZXJfcmluZ19waHlzX2FkZHIoc3RydWN0IHVzYl9oY2QgKmhjZCwNCisJ
CQkJCSAgc3RydWN0IHVzYl9kZXZpY2UgKnVkZXYsDQorCQkJCQkgIHN0cnVjdCB1c2JfaG9zdF9l
bmRwb2ludCAqZXAsDQorCQkJCQkgIGRtYV9hZGRyX3QgKmRtYSk7DQoraW50IG1hdXNiX2dldF9j
b3JlX2lkKHN0cnVjdCB1c2JfaGNkICpoY2QpOw0KKyNlbmRpZiAvKiBJU09DSF9DQUxMQkFDS1Mg
Ki8NCisNCit2b2lkIG1hdXNiX2NsZWFyX2hjZF9tYWRldih1aW50MTZfdCBwb3J0X251bWJlcik7
DQorDQorDQorI2VuZGlmIC8qIF9fTUFVU0JfSENEX0hVQl9IX18gKi8NCisNCmRpZmYgLS1naXQg
YS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hjZC92aGNkLmggYi9kcml2ZXJz
L3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hjZC92aGNkLmgNCm5ldyBmaWxlIG1vZGUgMTAw
NjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjRlNzRhNzQ5ZTg5ZA0KLS0tIC9kZXYvbnVsbA0KKysr
IGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9oY2QvdmhjZC5oDQpAQCAtMCww
ICsxLDgxIEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8NCisvKg0K
KyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsgKFVLKSBMdGQuDQorICoN
CisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2Yg
dGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZ
SU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUgZm9yDQorICogbW9yZSBk
ZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9IQ0RfVkhDRF9IX18NCisjZGVmaW5lIF9f
TUFVU0JfSENEX1ZIQ0RfSF9fDQorDQorI2luY2x1ZGUgPGxpbnV4L2RldmljZS5oPg0KKyNpbmNs
dWRlIDxsaW51eC9mcy5oPg0KKyNpbmNsdWRlIDxsaW51eC9tYWpvci5oPg0KKyNpbmNsdWRlIDxs
aW51eC9wcm9jX2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4L3JidHJlZS5oPg0KKyNpbmNsdWRlIDxs
aW51eC9zbGFiLmg+DQorI2luY2x1ZGUgPGxpbnV4L3VhY2Nlc3MuaD4NCisNCisjaW5jbHVkZSAi
dXRpbHMvbWF1c2JfcmluZ19idWZmZXIuaCINCisNCisjZGVmaW5lIERFVklDRV9OQU1FICJtYXVz
Yl9ob3N0X2hjZF9kZXYiDQorI2RlZmluZSBDTEFTU19OQU1FICJtYXVzYiINCisNCisjZGVmaW5l
IE5VTUJFUl9PRl9QT1JUUwkJMTUNCisNCisjZGVmaW5lIE1BWF9VU0JfREVWSUNFX0RFUFRICTYN
CisNCisjZGVmaW5lIFJFU1BPTlNFX1RJTUVPVVQJNTAwMA0KKw0KK3N0cnVjdCBtYXVzYl9oY2Qg
ew0KKwlzcGlubG9ja190CWxvY2s7DQorCXN0cnVjdCBkZXZpY2UJKnBkZXY7DQorCXVpbnQxNl90
CWNvbm5lY3RlZF9wb3J0czsNCisNCisJc3RydWN0IHJiX3Jvb3QJbWF1c2JfdXJiczsNCisJc3Ry
dWN0IGh1Yl9jdHgJKmhjZF9zc19jdHg7DQorCXN0cnVjdCBodWJfY3R4CSpoY2RfaHNfY3R4Ow0K
KwlzdHJ1Y3Qgbm90aWZpZXJfYmxvY2sgcG93ZXJfc3RhdGVfbGlzdGVuZXI7DQorfTsNCisNCitz
dHJ1Y3QgbWF1c2JfZGV2IHsNCisJdWludDMyX3QJcG9ydF9zdGF0dXM7DQorCXN0cnVjdCByYl9y
b290CXVzYl9kZXZpY2VzOw0KKwl1aW50OF90CQlkZXZfc3BlZWQ7DQorCXZvaWQJCSptYV9kZXY7
DQorfTsNCisNCitzdHJ1Y3QgaHViX2N0eCB7DQorCXN0cnVjdCBtYXVzYl9oY2QgKm1oY2Q7DQor
CXN0cnVjdCB1c2JfaGNkCSAqaGNkOw0KKwlzdHJ1Y3QgbWF1c2JfZGV2IG1hX2RldnNbTlVNQkVS
X09GX1BPUlRTXTsNCit9Ow0KKw0KK2VudW0gbWF1c2JfZGV2aWNlX3R5cGUgew0KKwlVU0JERVZJ
Q0UgPSAwLA0KKwlVU0IyMEhVQiAgPSAxLA0KKwlVU0IzMEhVQiAgPSAyDQorfTsNCisNCitlbnVt
IG1hdXNiX2RldmljZV9zcGVlZCB7DQorCUxPV19TUEVFRAkgPSAwLA0KKwlGVUxMX1NQRUVECSA9
IDEsDQorCUhJR0hfU1BFRUQJID0gMiwNCisJU1VQRVJfU1BFRUQJID0gMywNCisJU1VQRVJfU1BF
RURfUExVUyA9IDQNCit9Ow0KKw0KK2V4dGVybiBzdHJ1Y3QgbWF1c2JfaGNkICptaGNkOw0KKw0K
K2ludCBtYXVzYl9pbml0X2hjZCh2b2lkKTsNCit2b2lkIG1hdXNiX2RlaW5pdF9oY2Qodm9pZCk7
DQorDQordm9pZCBtYXVzYl9wb3J0X2hhc19jaGFuZ2VkKGNvbnN0IGVudW0gbWF1c2JfZGV2aWNl
X3R5cGUgZGV2aWNlX3R5cGUsDQorCQkJICAgIGNvbnN0IGVudW0gbWF1c2JfZGV2aWNlX3NwZWVk
IGRldmljZV9zcGVlZCwNCisJCQkgICAgdm9pZCAqbWFfZGV2KTsNCit2b2lkIG1hdXNiX2hjZF9k
aXNjb25uZWN0KGNvbnN0IHVpbnQxNl90IHBvcnRfbnVtYmVyLA0KKwkJCSAgY29uc3QgZW51bSBt
YXVzYl9kZXZpY2VfdHlwZSBkZXZpY2VfdHlwZSwNCisJCQkgIGNvbnN0IGVudW0gbWF1c2JfZGV2
aWNlX3NwZWVkIGRldmljZV9zcGVlZCk7DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfSENEX1ZIQ0Rf
SF9fICovDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9o
cGFsL2RhdGFfY29tbW9uLmggYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hw
YWwvZGF0YV9jb21tb24uaA0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAw
MC4uN2I3YmI0ODQ4YzlmDQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1
c2JfaG9zdC9pbmNsdWRlL2hwYWwvZGF0YV9jb21tb24uaA0KQEAgLTAsMCArMSw2NyBAQA0KKy8q
IFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wICovDQorLyoNCisgKiBDb3B5cmlnaHQg
KGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxl
IGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJh
bCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFp
biBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8N
CisjaWZuZGVmIF9fTUFVU0JfSFBBTF9EQVRBX0NPTU1PTl9IX18NCisjZGVmaW5lIF9fTUFVU0Jf
SFBBTF9EQVRBX0NPTU1PTl9IX18NCisNCisjaW5jbHVkZSAiaHBhbC9ocGFsLmgiDQorDQoraW50
IG1hdXNiX3NlbmRfZGF0YShzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsIGVudW0gbWF1c2JfY2hh
bm5lbCBjaGFubmVsX251bSwNCisJCSAgICBzdHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBwZXIg
KmRhdGEpOw0KKw0KK2ludCBtYXVzYl9zZW5kX3RyYW5zZmVyX2FjayhzdHJ1Y3QgbWF1c2JfZGV2
aWNlICpkZXYsDQorCQkJICAgIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpOw0KKw0KK2ludCBt
YXVzYl9zZW5kX2RhdGFfbXNnKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwgc3RydWN0IG1hdXNi
X2V2ZW50ICpldmVudCk7DQorDQoraW50IG1hdXNiX3JlY2VpdmVfZGF0YV9tc2coc3RydWN0IG1h
dXNiX2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KTsNCisNCitzdGF0aWMg
aW5saW5lIGJvb2wgbWF1c2JfY3RybF90cmFuc2ZlcihzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24g
KmhkcikNCit7DQorCXJldHVybiAoaGRyLT5kYXRhLnRfZmxhZ3MgJiBNQV9VU0JfREFUQV9URkxB
R1NfVFJBTlNGRVJfVFlQRV9NQVNLKSA9PQ0KKwkJTUFfVVNCX0RBVEFfVEZMQUdTX1RSQU5TRkVS
X1RZUEVfQ1RSTDsNCit9DQorDQorc3RhdGljIGlubGluZSBib29sIG1hdXNiX2lzb2NoX3RyYW5z
ZmVyKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqaGRyKQ0KK3sNCisJcmV0dXJuIChoZHItPmRh
dGEudF9mbGFncyAmIE1BX1VTQl9EQVRBX1RGTEFHU19UUkFOU0ZFUl9UWVBFX01BU0spID09DQor
CQlNQV9VU0JfREFUQV9URkxBR1NfVFJBTlNGRVJfVFlQRV9JU09DSDsNCit9DQorDQorc3RhdGlj
IGlubGluZSBib29sIG1hdXNiX2N0cmxfZGF0YV9ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2
ZW50KQ0KK3sNCisJcmV0dXJuIGV2ZW50LT5kYXRhLnRyYW5zZmVyX3R5cGUgPT0NCisJCU1BX1VT
Ql9EQVRBX1RGTEFHU19UUkFOU0ZFUl9UWVBFX0NUUkw7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUg
Ym9vbCBtYXVzYl9pc29jaF9kYXRhX2V2ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQor
ew0KKwlyZXR1cm4gZXZlbnQtPmRhdGEudHJhbnNmZXJfdHlwZSA9PQ0KKwkJTUFfVVNCX0RBVEFf
VEZMQUdTX1RSQU5TRkVSX1RZUEVfSVNPQ0g7DQorfQ0KKw0KKy8qIHVzYiB0byBtYXVzYiB0cmFu
c2ZlciB0eXBlICovDQorc3RhdGljIGlubGluZSB1aW50OF90IG1hdXNiX3RyYW5zZmVyX3R5cGVf
ZnJvbV91c2IoDQorCQkJCQlzdHJ1Y3QgdXNiX2VuZHBvaW50X2Rlc2NyaXB0b3IgKmVwZCkNCit7
DQorCXJldHVybiAodWludDhfdCl1c2JfZW5kcG9pbnRfdHlwZShlcGQpIDw8IDM7DQorfQ0KKw0K
K3N0YXRpYyBpbmxpbmUgdWludDhfdCBtYXVzYl90cmFuc2Zlcl90eXBlX2Zyb21faGRyKA0KKwkJ
CQkJCXN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqaGRyKQ0KK3sNCisJcmV0dXJuIGhkci0+ZGF0
YS50X2ZsYWdzICYgTUFfVVNCX0RBVEFfVEZMQUdTX1RSQU5TRkVSX1RZUEVfTUFTSzsNCit9DQor
DQorc3RhdGljIGlubGluZSBlbnVtIG1hdXNiX2NoYW5uZWwgbWF1c2JfdHJhbnNmZXJfdHlwZV90
b19jaGFubmVsKA0KKwkJCQkJCXVpbnQ4X3QgdHJhbnNmZXJfdHlwZSkNCit7DQorCXJldHVybiB0
cmFuc2Zlcl90eXBlID4+IDM7DQorfQ0KKw0KKyNlbmRpZiAvKiBfX01BVVNCX0hQQUxfREFUQV9D
T01NT05fSF9fICovDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5j
bHVkZS9ocGFsL2RhdGFfaW4uaCBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUv
aHBhbC9kYXRhX2luLmgNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAu
LmUxZTA2ODMxM2Y2Ng0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNi
X2hvc3QvaW5jbHVkZS9ocGFsL2RhdGFfaW4uaA0KQEAgLTAsMCArMSwxOCBAQA0KKy8qIFNQRFgt
TGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wICovDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIw
MTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1
YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJs
aWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJl
Y3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaWZu
ZGVmIF9fTUFVU0JfSFBBTF9EQVRBX0lOX0hfXw0KKyNkZWZpbmUgX19NQVVTQl9IUEFMX0RBVEFf
SU5fSF9fDQorDQorI2luY2x1ZGUgImhwYWwvaHBhbC5oIg0KKw0KK2ludCBtYXVzYl9zZW5kX2lu
X2RhdGFfbXNnKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwgc3RydWN0IG1hdXNiX2V2ZW50ICpl
dmVudCk7DQoraW50IG1hdXNiX3JlY2VpdmVfaW5fZGF0YShzdHJ1Y3QgbWF1c2JfZGV2aWNlICpk
ZXYsIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJICBzdHJ1Y3QgbWF1c2JfdXJiX2N0
eCAqdXJiX2N0eCk7DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfSFBBTF9EQVRBX0lOX0hfXyAqLw0K
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9kYXRh
X291dC5oIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL2RhdGFfb3V0
LmgNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjgwOWU5NzJhOTcy
OA0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVk
ZS9ocGFsL2RhdGFfb3V0LmgNCkBAIC0wLDAgKzEsMjIgQEANCisvKiBTUERYLUxpY2Vuc2UtSWRl
bnRpZmllcjogR1BMLTIuMCAqLw0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBE
aXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRo
ZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorICogTGlj
ZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRo
aXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2lmbmRlZiBfX01BVVNC
X0hQQUxfREFUQV9PVVRfSF9fDQorI2RlZmluZSBfX01BVVNCX0hQQUxfREFUQV9PVVRfSF9fDQor
DQorI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+DQorDQorI2luY2x1ZGUgImhwYWwvbWF1c2JfZXZl
bnRzLmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX2RhdGFfaXRlcmF0b3IuaCINCisNCitpbnQg
bWF1c2Jfc2VuZF9vdXRfZGF0YV9tc2coc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3Qg
bWF1c2JfZXZlbnQgKmV2ZW50LA0KKwkJCSAgICBzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0
eCk7DQoraW50IG1hdXNiX3JlY2VpdmVfb3V0X2RhdGEoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2
LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50LA0KKwkJCSAgIHN0cnVjdCBtYXVzYl91cmJfY3R4
ICp1cmJfY3R4KTsNCisNCisjZW5kaWYgLyogX19NQVVTQl9IUEFMX0RBVEFfT1VUX0hfXyAqLw0K
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9ocGFs
LmggYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hwYWwvaHBhbC5oDQpuZXcg
ZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi4yOWM2MzVkYTZhMGENCi0tLSAv
ZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9o
cGFsLmgNCkBAIC0wLDAgKzEsMTc0IEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQ
TC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsg
KFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5k
IGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNl
ZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUg
Zm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9IUEFMX0hQQUxf
SF9fDQorI2RlZmluZSBfX01BVVNCX0hQQUxfSFBBTF9IX18NCisNCisjaW5jbHVkZSA8bGludXgv
a3JlZi5oPg0KKyNpbmNsdWRlIDxsaW51eC9zdXNwZW5kLmg+DQorI2luY2x1ZGUgPGxpbnV4L3Vz
Yi5oPg0KKw0KKyNpbmNsdWRlICJjb21tb24vbWF1c2JfYWRkcmVzcy5oIg0KKyNpbmNsdWRlICJj
b21tb24vbWF1c2JfZXZlbnQuaCINCisjaW5jbHVkZSAibGluay9tYXVzYl9pcF9saW5rLmgiDQor
DQorI2RlZmluZSBNQVVTQl9DT05UUk9MX1NFVFVQX1NJWkUJOA0KKyNkZWZpbmUgTUFVU0JfQlVT
WV9SRVRSSUVTX0NPVU5UCTMNCisjZGVmaW5lIE1BVVNCX0JVU1lfVElNRU9VVF9NSU4JCTEwMDAw
DQorI2RlZmluZSBNQVVTQl9CVVNZX1RJTUVPVVRfTUFYCQkxMDAwMQ0KKyNkZWZpbmUgTUFVU0Jf
SEVBUlRCRUFUX1RJTUVPVVRfTVMJMTAwMA0KKyNkZWZpbmUgTUFVU0JfQ0xJRU5UX1NUT1BQRURf
VElNRU9VVF9NUwkzMDAwDQorDQorI2RlZmluZSBNQVVTQl9NQVhfUkVDRUlWRV9GQUlMVVJFUwkz
DQorI2RlZmluZSBNQVVTQl9NQVhfTUlTU0VEX0hFQVJUQkVBVFMJMw0KKyNkZWZpbmUgTUFVU0Jf
VFJBTlNGRVJfUkVTRVJWRUQJCTANCisNCisjZGVmaW5lIE1BVVNCX0NIQU5ORUxfTUFQX0xFTkdU
SAk0DQorDQorZW51bSBtYXVzYl9pc29jaF9oZWFkZXJfZm9ybWF0X3NpemUgew0KKwlJU09DSF9T
SE9SVF9GT1JNQVRfU0laRQkgICA9IDQsDQorCUlTT0NIX1NUQU5EQVJEX0ZPUk1BVF9TSVpFID0g
OCwNCisJSVNPQ0hfTE9OR19GT1JNQVRfU0laRQkgICA9IDEyDQorfTsNCisNCitzdHJ1Y3QgbWF1
c2JfY29tcGxldGlvbiB7DQorCXN0cnVjdCBsaXN0X2hlYWQgICBsaXN0X2VudHJ5Ow0KKwlzdHJ1
Y3QgY29tcGxldGlvbiAgKmNvbXBsZXRpb25fZXZlbnQ7DQorCXN0cnVjdCBtYXVzYl9ldmVudCAq
bWF1c2JfZXZlbnQ7DQorCWxvbmcJCSAgIGV2ZW50X2lkOw0KK307DQorDQorc3RydWN0IG1hdXNi
X21zc19yaW5nc19ldmVudHMgew0KKwlhdG9taWNfdAkgIG1hdXNiX3N0b3BfcmVhZGluZ19yaW5n
X2V2ZW50czsNCisJc3RydWN0IGNvbXBsZXRpb24gbWF1c2JfcmluZ19oYXNfZXZlbnRzOw0KK307
DQorDQorc3RydWN0IG1zcyB7DQorCWJvb2wJICAgZGVpbml0X2luX3Byb2dyZXNzOw0KKwlzcGlu
bG9ja190IGxvY2s7DQorCXVpbnQ2NF90ICAgcmluZ19idWZmZXJfaWQ7DQorDQorCXN0cnVjdCBj
b21wbGV0aW9uIGVtcHR5Ow0KKwlzdHJ1Y3QgY29tcGxldGlvbiBjbGllbnRfc3RvcHBlZDsNCisJ
Ym9vbCBjbGllbnRfY29ubmVjdGVkOw0KKwlzdHJ1Y3QgdGltZXJfbGlzdCBoZWFydGJlYXRfdGlt
ZXI7DQorCXVpbnQ4X3QJCSAgbWlzc2VkX2hlYXJ0YmVhdHM7DQorDQorCXN0cnVjdCBsaXN0X2hl
YWQgIG1hZGV2X2xpc3Q7DQorCWF0b21pY190IG51bV9vZl90cmFuc2l0aW9uc190b19zbGVlcDsN
CisJc3RydWN0IGxpc3RfaGVhZCAgYXZhaWxhYmxlX3JpbmdfYnVmZmVyczsNCisNCisJc3RydWN0
IG1hdXNiX21zc19yaW5nc19ldmVudHMJIHJpbmdzX2V2ZW50czsNCisJc3RydWN0IG1hdXNiX2V2
ZW50c19ub3RpZmljYXRpb24gZXZlbnRzW01BVVNCX01BWF9OVU1fT0ZfTUFfREVWU107DQorfTsN
CisNCitzdHJ1Y3QgbWF1c2JfZGV2aWNlIHsNCisJc3RydWN0IG1hdXNiX2RldmljZV9hZGRyZXNz
IGRldl9hZGRyOw0KKwlzdHJ1Y3QgbmV0CQkgICAgKm5ldF9uczsNCisJc3RydWN0IG1hdXNiX3Jp
bmdfYnVmZmVyICAgICpyaW5nX2J1ZmZlcjsNCisJc3RydWN0IGxpc3RfaGVhZAkgICAgbGlzdF9l
bnRyeTsNCisNCisJc3RydWN0IG1hdXNiX2lwX2N0eCAqbWdtdF9jaGFubmVsOw0KKwlzdHJ1Y3Qg
bWF1c2JfaXBfY3R4ICpjdHJsX2NoYW5uZWw7DQorCXN0cnVjdCBtYXVzYl9pcF9jdHggKmJ1bGtf
Y2hhbm5lbDsNCisJc3RydWN0IG1hdXNiX2lwX2N0eCAqaXNvY2hfY2hhbm5lbDsNCisJc3RydWN0
IG1hdXNiX2lwX2N0eCAqY2hhbm5lbF9tYXBbTUFVU0JfQ0hBTk5FTF9NQVBfTEVOR1RIXTsNCisN
CisJc3RydWN0IHdvcmtfc3RydWN0IHdvcms7DQorCXN0cnVjdCB3b3JrX3N0cnVjdCBzb2NrZXRf
ZGlzY29ubmVjdF93b3JrOw0KKwlzdHJ1Y3Qgd29ya19zdHJ1Y3QgaGNkX2Rpc2Nvbm5lY3Rfd29y
azsNCisJc3RydWN0IHdvcmtfc3RydWN0IG1hZGV2X2RlbGV0ZV93b3JrOw0KKwlzdHJ1Y3Qgd29y
a19zdHJ1Y3QgcGluZ193b3JrOw0KKwlzdHJ1Y3Qgd29ya19zdHJ1Y3QgaGVhcnRiZWF0X3dvcms7
DQorCXN0cnVjdCB3b3JrcXVldWVfc3RydWN0ICp3b3JrcTsNCisNCisJc3RydWN0IGtyZWYgcmVm
Y291bnQ7DQorCS8qIFNldCBvbiBwb3J0IGNoYW5nZSBldmVudCBhZnRlciBjYXAgcmVzcCAqLw0K
Kwl1aW50OF90IGRldl90eXBlOw0KKwl1aW50OF90IGRldl9zcGVlZDsNCisJdWludDhfdCBsc2U7
DQorCXVpbnQ4X3QgbWFkZXZfYWRkcjsNCisJdWludDhfdCBkZXZfY29ubmVjdGVkOw0KKw0KKwl1
aW50MTZfdCBpZDsNCisJdWludDE2X3QgcG9ydF9udW1iZXI7DQorDQorCXN0cnVjdCBsaXN0X2hl
YWQgY29tcGxldGlvbl9ldmVudHM7DQorCWF0b21pY19sb25nX3QJIGV2ZW50X2lkOw0KKwlzcGlu
bG9ja190CSBjb21wbGV0aW9uX2V2ZW50c19sb2NrOw0KKw0KKwlzdHJ1Y3QgY29tcGxldGlvbiB1
c2VyX2ZpbmlzaGVkX2V2ZW50Ow0KKwl1aW50MzJfdAkgIG51bV9vZl91c2VyX2V2ZW50czsNCisJ
c3BpbmxvY2tfdAkgIG51bV9vZl91c2VyX2V2ZW50c19sb2NrOw0KKw0KKwlzdHJ1Y3QgdGltZXJf
bGlzdCBjb25uZWN0aW9uX3RpbWVyOw0KKwl1aW50OF90CQkgIHJlY2VpdmVfZmFpbHVyZXNfbnVt
Ow0KKwlzcGlubG9ja190CSAgY29ubmVjdGlvbl90aW1lcl9sb2NrOw0KKw0KKwlhdG9taWNfdAkg
IHVucmVzcG9uc2l2ZV9jbGllbnQ7DQorDQorCWF0b21pY190IG51bV9vZl91c2JfZGV2aWNlczsN
Cit9Ow0KKw0KK3N0cnVjdCBtYXVzYl91cmJfY3R4ICptYXVzYl9maW5kX3VyYl9pbl90cmVlKHN0
cnVjdCB1cmIgKnVyYik7DQorc3RydWN0IG1hdXNiX3VyYl9jdHggKm1hdXNiX3VubGlua19hbmRf
ZGVsZXRlX3VyYl9mcm9tX3RyZWUoc3RydWN0IHVyYiAqdXJiLA0KKwkJCQkJCQkgICAgaW50IHN0
YXR1cyk7DQorc3RydWN0IG1hdXNiX2RldmljZSAqbWF1c2JfZ2V0X2Rldl9mcm9tX2FkZHJfdW5z
YWZlKHVpbnQ4X3QgbWFkZXZfYWRkcik7DQorDQorc3RhdGljIGlubGluZSBsb25nIG1hdXNiX2V2
ZW50X2lkKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldikNCit7DQorCWxvbmcgdmFsID0gYXRvbWlj
X2xvbmdfaW5jX3JldHVybigmZGV2LT5ldmVudF9pZCk7DQorCXJldHVybiB2YWw7DQorfQ0KKw0K
K2ludCBtYXVzYl9pbml0aWF0ZV9kZXZfY29ubmVjdGlvbihzdHJ1Y3QgbWF1c2JfZGV2aWNlX2Fk
ZHJlc3MgZGV2aWNlX2FkZHJlc3MsDQorCQkJCSAgdWludDhfdCBtYWRldl9hZGRyZXNzKTsNCitp
bnQgbWF1c2JfZW5xdWV1ZV9ldmVudF9mcm9tX3VzZXIodWludDhfdCBtYWRldl9hZGRyLCB1aW50
MzJfdCBudW1fb2ZfZXZlbnRzKTsNCitpbnQgbWF1c2JfZW5xdWV1ZV9ldmVudF90b191c2VyKHN0
cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCk7
DQoraW50IG1hdXNiX2RhdGFfcmVxX2VucXVldWVfZXZlbnQoc3RydWN0IG1hdXNiX2RldmljZSAq
ZGV2LCB1aW50MTZfdCBlcF9oYW5kbGUsDQorCQkJCSBzdHJ1Y3QgdXJiICpyZXF1ZXN0KTsNCitp
bnQgbWF1c2Jfc2lnbmFsX2V2ZW50KHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwgc3RydWN0IG1h
dXNiX2V2ZW50ICpldmVudCwNCisJCSAgICAgICBsb25nIGV2ZW50X2lkKTsNCitpbnQgbWF1c2Jf
aW5zZXJ0X3VyYl9pbl90cmVlKHN0cnVjdCB1cmIgKnVyYiwgYm9vbCBsaW5rX3VyYl90b19lcCk7
DQorDQorc3RhdGljIGlubGluZSB2b2lkIG1hdXNiX2luc2VydF9ldmVudChzdHJ1Y3QgbWF1c2Jf
ZGV2aWNlICpkZXYsDQorCQkJCSAgICAgIHN0cnVjdCBtYXVzYl9jb21wbGV0aW9uICpldmVudCkN
Cit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZkZXYt
PmNvbXBsZXRpb25fZXZlbnRzX2xvY2ssIGZsYWdzKTsNCisJbGlzdF9hZGRfdGFpbCgmZXZlbnQt
Pmxpc3RfZW50cnksICZkZXYtPmNvbXBsZXRpb25fZXZlbnRzKTsNCisJc3Bpbl91bmxvY2tfaXJx
cmVzdG9yZSgmZGV2LT5jb21wbGV0aW9uX2V2ZW50c19sb2NrLCBmbGFncyk7DQorfQ0KKw0KK3N0
YXRpYyBpbmxpbmUgdm9pZCBtYXVzYl9yZW1vdmVfZXZlbnQoc3RydWN0IG1hdXNiX2RldmljZSAq
ZGV2LA0KKwkJCQkgICAgICBzdHJ1Y3QgbWF1c2JfY29tcGxldGlvbiAqZXZlbnQpDQorew0KKwl1
bnNpZ25lZCBsb25nIGZsYWdzOw0KKw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmZGV2LT5jb21wbGV0
aW9uX2V2ZW50c19sb2NrLCBmbGFncyk7DQorCWxpc3RfZGVsKCZldmVudC0+bGlzdF9lbnRyeSk7
DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJmRldi0+Y29tcGxldGlvbl9ldmVudHNfbG9jaywg
ZmxhZ3MpOw0KK30NCisNCisvKiBBZnRlciB0aGlzIGZ1bmN0aW9uIGNhbGwgb25seSB2YWxpZCB0
aGluZyB0byBkbyB3aXRoIHVyYiBpcyB0byBnaXZlIGl0IGJhY2sqLw0KK3ZvaWQgbWF1c2JfcmVs
ZWFzZV9tYV9kZXZfYXN5bmMoc3RydWN0IGtyZWYgKmtyZWYpOw0KK3ZvaWQgbWF1c2Jfb25fbWFk
ZXZfY29ubmVjdGVkKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldik7DQordm9pZCBtYXVzYl9jb21w
bGV0ZV9yZXF1ZXN0KHN0cnVjdCB1cmIgKnVyYiwgdWludDMyX3QgYWN0dWFsX2xlbmd0aCwNCisJ
CQlpbnQgc3RhdHVzKTsNCit2b2lkIG1hdXNiX2NvbXBsZXRlX3VyYihzdHJ1Y3QgbWF1c2JfZXZl
bnQgKmV2ZW50KTsNCit2b2lkIG1hdXNiX3Jlc2V0X2Nvbm5lY3Rpb25fdGltZXIoc3RydWN0IG1h
dXNiX2RldmljZSAqZGV2KTsNCit2b2lkIG1hdXNiX3Jlc2V0X2hlYXJ0YmVhdF9jbnQodm9pZCk7
DQordm9pZCBtYXVzYl9yZWxlYXNlX2V2ZW50X3Jlc291cmNlcyhzdHJ1Y3QgbWF1c2JfZXZlbnQg
ICpldmVudCk7DQordm9pZCBtYXVzYl9pbml0aWFsaXplX21zcyh2b2lkKTsNCit2b2lkIG1hdXNi
X2RlaW5pdGlhbGl6ZV9tc3Modm9pZCk7DQoraW50IG1hdXNiX3JlZ2lzdGVyX3Bvd2VyX3N0YXRl
X2xpc3RlbmVyKHZvaWQpOw0KK3ZvaWQgbWF1c2JfdW5yZWdpc3Rlcl9wb3dlcl9zdGF0ZV9saXN0
ZW5lcih2b2lkKTsNCisNCisjZW5kaWYgLyogX19NQVVTQl9IUEFMX0hQQUxfSF9fICovDQpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL2lzb2NoX2lu
LmggYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hwYWwvaXNvY2hfaW4uaA0K
bmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uYzA5NjU5MzQyNTc4DQot
LS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hw
YWwvaXNvY2hfaW4uaA0KQEAgLTAsMCArMSwyMiBAQA0KKy8qIFNQRFgtTGljZW5zZS1JZGVudGlm
aWVyOiBHUEwtMi4wICovDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3Bs
YXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRl
cm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNl
IHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBh
cmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaWZuZGVmIF9fTUFVU0JfSFBB
TF9JU09DSF9JTl9IX18NCisjZGVmaW5lIF9fTUFVU0JfSFBBTF9JU09DSF9JTl9IX18NCisNCisj
aW5jbHVkZSAiaHBhbC9ocGFsLmgiDQorDQorI2RlZmluZSBNQVVTQl9JU09DSF9JTl9LVkVDX05V
TSAzDQorDQoraW50IG1hdXNiX3NlbmRfaXNvY2hfaW5fbXNnKHN0cnVjdCBtYXVzYl9kZXZpY2Ug
KmRldiwNCisJCQkgICAgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCk7DQoraW50IG1hdXNiX3Jl
Y2VpdmVfaXNvY2hfaW5fZGF0YShzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCXN0cnVj
dCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJCXN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4
KTsNCisNCisjZW5kaWYgLyogX19NQVVTQl9IUEFMX0lTT0NIX0lOX0hfXyAqLw0KZGlmZiAtLWdp
dCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9pc29jaF9vdXQuaCBi
L2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9pc29jaF9vdXQuaA0KbmV3
IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uM2EwNzQxY2VlNzVmDQotLS0g
L2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL2hwYWwv
aXNvY2hfb3V0LmgNCkBAIC0wLDAgKzEsMjEgQEANCisvKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmll
cjogR1BMLTIuMCAqLw0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBEaXNwbGF5
TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJt
cyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorICogTGljZW5zZSB2
Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRoaXMgYXJj
aGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2lmbmRlZiBfX01BVVNCX0hQQUxf
SVNPQ0hfT1VUX0hfXw0KKyNkZWZpbmUgX19NQVVTQl9IUEFMX0lTT0NIX09VVF9IX18NCisNCisj
aW5jbHVkZSAiY29tbW9uL21hdXNiX2V2ZW50LmgiDQorI2luY2x1ZGUgImhwYWwvaHBhbC5oIg0K
Kw0KK2ludCBtYXVzYl9zZW5kX2lzb2NoX291dF9tc2coc3RydWN0IG1hdXNiX2RldmljZSAqbWFf
ZGV2LA0KKwkJCSAgICAgc3RydWN0IG1hdXNiX2V2ZW50ICptYXVzYl9ldmVudCwNCisJCQkgICAg
IHN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4KTsNCitpbnQgbWF1c2JfcmVjZWl2ZV9pc29j
aF9vdXQoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50
LA0KKwkJCSAgICBzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0eCk7DQorDQorI2VuZGlmIC8q
IF9fTUFVU0JfSFBBTF9JU09DSF9PVVRfSF9fICovDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFn
aW5nL21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL21hdXNiX2V2ZW50cy5oIGIvZHJpdmVycy9zdGFn
aW5nL21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL21hdXNiX2V2ZW50cy5oDQpuZXcgZmlsZSBtb2Rl
IDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi41NDMxMThlYTE5NTUNCi0tLSAvZGV2L251bGwN
CisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvaHBhbC9tYXVzYl9ldmVu
dHMuaA0KQEAgLTAsMCArMSw5NyBAQA0KKy8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwt
Mi4wICovDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChV
SykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBj
b25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUg
dGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZv
cg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaWZuZGVmIF9fTUFVU0JfSFBBTF9NQVVTQl9F
VkVOVFNfSF9fDQorI2RlZmluZSBfX01BVVNCX0hQQUxfTUFVU0JfRVZFTlRTX0hfXw0KKw0KKyNp
bmNsdWRlICJjb21tb24vbWF1c2JfZXZlbnQuaCINCisjaW5jbHVkZSAiaHBhbC9ocGFsLmgiDQor
I2luY2x1ZGUgImxpbmsvbWF1c2JfaXBfbGluay5oIg0KKw0KKyNkZWZpbmUgTUFOQUdFTUVOVF9F
VkVOVF9USU1FT1VUIDMwMDANCisNCitpbnQgbWF1c2JfbXNnX3JlY2VpdmVkX2V2ZW50KHN0cnVj
dCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJICAgICBzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24g
KmhkciwNCisJCQkgICAgIGVudW0gbWF1c2JfY2hhbm5lbCBjaGFubmVsKTsNCitpbnQgbWF1c2Jf
dXNiZGV2aGFuZGxlX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJ
CQkgICAgIHVpbnQ4X3QgZGV2aWNlX3NwZWVkLA0KKwkJCQkgICAgIHVpbnQzMl90IHJvdXRlX3N0
cmluZywNCisJCQkJICAgICB1aW50MTZfdCBodWJfZGV2X2hhbmRsZSwNCisJCQkJICAgICB1aW50
MTZfdCBwYXJlbnRfaHNfaHViX2Rldl9oYW5kbGUsDQorCQkJCSAgICAgdWludDE2X3QgcGFyZW50
X2hzX2h1Yl9wb3J0LCB1aW50MTZfdCBtdHQsDQorCQkJCSAgICAgdWludDhfdCBsc2UsIGludDMy
X3QgKnVzYl9kZXZfaGFuZGxlKTsNCitpbnQgbWF1c2JfdXNiZGV2aGFuZGxlX2V2ZW50X2Zyb21f
dXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgICBzdHJ1Y3QgbWF1c2Jf
ZXZlbnQgKmV2ZW50KTsNCit2b2lkIG1hdXNiX2luaXRfc3RhbmRhcmRfZXBfZGVzY3JpcHRvcigN
CisJCQkJc3RydWN0IG1hX3VzYl9lcGhhbmRsZXJlcV9kZXNjX3N0ZCAqc3RkX2Rlc2MsDQorCQkJ
CXN0cnVjdCB1c2JfZW5kcG9pbnRfZGVzY3JpcHRvciAqdXNiX3N0ZF9kZXNjKTsNCit2b2lkIG1h
dXNiX2luaXRfc3VwZXJzcGVlZF9lcF9kZXNjcmlwdG9yKA0KKwkJCQlzdHJ1Y3QgbWFfdXNiX2Vw
aGFuZGxlcmVxX2Rlc2Nfc3MgKnNzX2Rlc2MsDQorCQkJCXN0cnVjdCB1c2JfZW5kcG9pbnRfZGVz
Y3JpcHRvciAqdXNiX3N0ZF9kZXNjLA0KKwkJCQlzdHJ1Y3QgdXNiX3NzX2VwX2NvbXBfZGVzY3Jp
cHRvciAqdXNiX3NzX2Rlc2MpOw0KK2ludCBtYXVzYl9lcGhhbmRsZV9ldmVudF90b191c2VyKHN0
cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJIHVpbnQxNl90IGRldmljZV9oYW5kbGUsDQor
CQkJCSB1aW50MTZfdCBkZXNjcmlwdG9yX3NpemUsIHZvaWQgKmRlc2NyaXB0b3IsDQorCQkJCSB1
aW50MTZfdCAqZXBfaGFuZGxlKTsNCitpbnQgbWF1c2JfZXBoYW5kbGVfZXZlbnRfZnJvbV91c2Vy
KHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICAgc3RydWN0IG1hdXNiX2V2ZW50ICpl
dmVudCk7DQoraW50IG1hdXNiX2VwYWN0aXZhdGVfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2Jf
ZGV2aWNlICpkZXYsDQorCQkJCSAgIHVpbnQxNl90IGRldmljZV9oYW5kbGUsIHVpbnQxNl90IGVw
X2hhbmRsZSk7DQoraW50IG1hdXNiX2VwYWN0aXZhdGVfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBt
YXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICAgICBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KTsN
CitpbnQgbWF1c2JfZXBpbmFjdGl2YXRlX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2Rldmlj
ZSAqZGV2LA0KKwkJCQkgICAgIHVpbnQxNl90IGRldmljZV9oYW5kbGUsDQorCQkJCSAgICAgdWlu
dDE2X3QgZXBfaGFuZGxlKTsNCitpbnQgbWF1c2JfZXBpbmFjdGl2YXRlX2V2ZW50X2Zyb21fdXNl
cihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgICBzdHJ1Y3QgbWF1c2JfZXZl
bnQgKmV2ZW50KTsNCitpbnQgbWF1c2JfZXByZXNldF9ldmVudF90b191c2VyKHN0cnVjdCBtYXVz
Yl9kZXZpY2UgKmRldiwNCisJCQkJdWludDE2X3QgZGV2aWNlX2hhbmRsZSwgdWludDE2X3QgZXBf
aGFuZGxlLA0KKwkJCQl1aW50OF90IHRzcF9mbGFnKTsNCitpbnQgbWF1c2JfZXByZXNldF9ldmVu
dF9mcm9tX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgIHN0cnVjdCBtYXVz
Yl9ldmVudCAqZXZlbnQpOw0KK2ludCBtYXVzYl9lcGRlbGV0ZV9ldmVudF90b191c2VyKHN0cnVj
dCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJIHVpbnQxNl90IGRldmljZV9oYW5kbGUsIHVpbnQx
Nl90IGVwX2hhbmRsZSk7DQoraW50IG1hdXNiX2VwZGVsZXRlX2V2ZW50X2Zyb21fdXNlcihzdHJ1
Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQp
Ow0KK2ludCBtYXVzYl9tb2RpZnllcDBfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNl
ICpkZXYsDQorCQkJCSAgdWludDE2X3QgZGV2aWNlX2hhbmRsZSwgdWludDE2X3QgKmVwX2hhbmRs
ZSwNCisJCQkJICB1aW50MTZfdCBtYXhfcGFja2V0X3NpemUpOw0KK2ludCBtYXVzYl9tb2RpZnll
cDBfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICAgIHN0
cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpOw0KK2ludCBtYXVzYl9zZXR1c2JkZXZhZGRyZXNzX2V2
ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkJIHVpbnQxNl90IGRl
dmljZV9oYW5kbGUsDQorCQkJCQkgdWludDE2X3QgcmVzcG9uc2VfdGltZW91dCk7DQoraW50IG1h
dXNiX3NldHVzYmRldmFkZHJlc3NfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2Ug
KmRldiwNCisJCQkJCSAgIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpOw0KK2ludCBtYXVzYl91
cGRhdGVkZXZfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAg
dWludDE2X3QgZGV2aWNlX2hhbmRsZSwNCisJCQkJICB1aW50MTZfdCBtYXhfZXhpdF9sYXRlbmN5
LCB1aW50OF90IGh1YiwNCisJCQkJICB1aW50OF90IG51bWJlcl9vZl9wb3J0cywgdWludDhfdCBt
dHQsDQorCQkJCSAgdWludDhfdCB0dHQsIHVpbnQ4X3QgaW50ZWdyYXRlZF9odWJfbGF0ZW5jeSwN
CisJCQkJICBzdHJ1Y3QgdXNiX2RldmljZV9kZXNjcmlwdG9yICpkZXZfZGVzY3JpcHRvcik7DQor
aW50IG1hdXNiX3VwZGF0ZWRldl9ldmVudF9mcm9tX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAq
ZGV2LA0KKwkJCQkgICAgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCk7DQoraW50IG1hdXNiX3Vz
YmRldmRpc2Nvbm5lY3RfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQor
CQkJCQkgdWludDE2X3QgZGV2X2hhbmRsZSk7DQoraW50IG1hdXNiX3BpbmdfZXZlbnRfdG9fdXNl
cihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYpOw0KK2ludCBtYXVzYl91c2JkZXZyZXNldF9ldmVu
dF90b191c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICAgIHVpbnQxNl90IGRl
dmljZV9oYW5kbGUpOw0KK2ludCBtYXVzYl91c2JkZXZyZXNldF9ldmVudF9mcm9tX3VzZXIoc3Ry
dWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICAgICBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2
ZW50KTsNCitpbnQgbWF1c2JfY2FuY2VsdHJhbnNmZXJfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgICB1aW50MTZfdCBkZXZpY2VfaGFuZGxlLA0KKwkJ
CQkgICAgICAgdWludDE2X3QgZXBfaGFuZGxlLCB1aW50NjRfdCB1cmIpOw0KK2ludCBtYXVzYl9j
YW5jZWx0cmFuc2Zlcl9ldmVudF9mcm9tX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0K
KwkJCQkJIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpOw0KKw0KK3ZvaWQgbWF1c2JfZGV2X3Jl
c2V0X3JlcV9ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KTsNCit2b2lkIG1hdXNiX2Ns
ZWFudXBfc2VuZF9kYXRhX21zZ19ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KTsNCit2
b2lkIG1hdXNiX2NsZWFudXBfcmVjZWl2ZWRfZGF0YV9tc2dfZXZlbnQoc3RydWN0IG1hdXNiX2V2
ZW50ICpldmVudCk7DQordm9pZCBtYXVzYl9jbGVhbnVwX2RlbGV0ZV9kYXRhX3RyYW5zZmVyX2V2
ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpOw0KKw0KKyNlbmRpZiAvKiBfX01BVVNCX0hQ
QUxfTUFVU0JfRVZFTlRTX0hfXyAqLw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVz
Yl9ob3N0L2luY2x1ZGUvaHBhbC9uZXR3b3JrX2NhbGxiYWNrcy5oIGIvZHJpdmVycy9zdGFnaW5n
L21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL25ldHdvcmtfY2FsbGJhY2tzLmgNCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLmExMGI1OTBkNTNhYQ0KLS0tIC9kZXYvbnVs
bA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9ocGFsL25ldHdvcmtf
Y2FsbGJhY2tzLmgNCkBAIC0wLDAgKzEsMjAgQEANCisvKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmll
cjogR1BMLTIuMCAqLw0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBEaXNwbGF5
TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJt
cyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorICogTGljZW5zZSB2
Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRoaXMgYXJj
aGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2lmbmRlZiBfX01BVVNCX0hQQUxf
TkVUV09SS19DQUxMQkFDS1NfSF9fDQorI2RlZmluZSBfX01BVVNCX0hQQUxfTkVUV09SS19DQUxM
QkFDS1NfSF9fDQorDQorI2luY2x1ZGUgPGxpbnV4L3dvcmtxdWV1ZS5oPg0KKw0KKyNpbmNsdWRl
ICJsaW5rL21hdXNiX2lwX2xpbmsuaCINCisNCisvKiBnZW5lcmljIGNhbGxiYWNrIGJ5IGRlZmF1
bHQgKi8NCit2b2lkIG1hdXNiX2lwX2NhbGxiYWNrKHZvaWQgKmN0eCwgZW51bSBtYXVzYl9jaGFu
bmVsIGNoYW5uZWwsDQorCQkgICAgICAgZW51bSBtYXVzYl9saW5rX2FjdGlvbiBhY3Rpb24sIGlu
dCBzdGF0dXMsIHZvaWQgKmRhdGEpOw0KKw0KKyNlbmRpZiAvKiBfX01BVVNCX0hQQUxfTkVUV09S
S19DQUxMQkFDS1NfSF9fICovDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hv
c3QvaW5jbHVkZS9saW5rL21hdXNiX2lwX2xpbmsuaCBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9o
b3N0L2luY2x1ZGUvbGluay9tYXVzYl9pcF9saW5rLmgNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQpp
bmRleCAwMDAwMDAwMDAwMDAuLjM4NjM1OGI1OWFmYg0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJp
dmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS9saW5rL21hdXNiX2lwX2xpbmsuaA0KQEAg
LTAsMCArMSw4OSBAQA0KKy8qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wICovDQor
LyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0K
KyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25z
IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUg
Q09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1v
cmUgZGV0YWlscy4NCisgKi8NCisjaWZuZGVmIF9fTUFVU0JfTElOS19NQVVTQl9JUF9MSU5LX0hf
Xw0KKyNkZWZpbmUgX19NQVVTQl9MSU5LX01BVVNCX0lQX0xJTktfSF9fDQorDQorI2luY2x1ZGUg
PGxpbnV4L2luZXQuaD4NCisjaW5jbHVkZSA8bGludXgvbGlzdC5oPg0KKyNpbmNsdWRlIDxsaW51
eC93b3JrcXVldWUuaD4NCisjaW5jbHVkZSA8bmV0L25ldF9uYW1lc3BhY2UuaD4NCisNCisjZGVm
aW5lIE1BVVNCX0xJTktfQlVGRl9TSVpFCTE2Nzc3MjE2DQorI2RlZmluZSBNQVVTQl9MSU5LX1RP
U19MRVZFTF9FRiAweEI4DQorDQorZW51bSBtYXVzYl9saW5rX2FjdGlvbiB7DQorCU1BVVNCX0xJ
TktfQ09OTkVDVAk9IDAsDQorCU1BVVNCX0xJTktfRElTQ09OTkVDVAk9IDEsDQorCU1BVVNCX0xJ
TktfUkVDVgkJPSAyLA0KKwlNQVVTQl9MSU5LX1NFTkQJCT0gMw0KK307DQorDQorZW51bSBtYXVz
Yl9jaGFubmVsIHsNCisJTUFVU0JfQ1RSTF9DSEFOTkVMICA9IDAsDQorCU1BVVNCX0lTT0NIX0NI
QU5ORUwgPSAxLA0KKwlNQVVTQl9CVUxLX0NIQU5ORUwgID0gMiwNCisJTUFVU0JfSU5UUl9DSEFO
TkVMICA9IDMsDQorCU1BVVNCX01HTVRfQ0hBTk5FTCAgPSA0DQorfTsNCisNCitzdHJ1Y3QgbWF1
c2Jfa3ZlY19kYXRhX3dyYXBwZXIgew0KKwlzdHJ1Y3Qga3ZlYyAqa3ZlYzsNCisJdWludDMyX3Qg
ICAga3ZlY19udW07DQorCXVpbnQzMl90ICAgIGxlbmd0aDsNCit9Ow0KKw0KK3N0cnVjdCBtYXVz
Yl9pcF9yZWN2X2N0eCB7DQorCXVpbnQxNl90IGxlZnQ7DQorCXVpbnQxNl90IHJlY2VpdmVkOw0K
KwljaGFyCSAqYnVmZmVyOw0KKwljaGFyCSBjb21tb25faGRyWzEyXQ0KKwkJIF9fYWxpZ25lZCg0
KTsNCit9Ow0KKw0KK3N0cnVjdCBtYXVzYl9pcF9jdHggew0KKwlzdHJ1Y3Qgc29ja2V0ICpjbGll
bnRfc29ja2V0Ow0KKwlzdHJ1Y3QgbmV0ICAgICpuZXRfbnM7DQorCWNoYXIJICAgICAgaXBfYWRk
cltJTkVUNl9BRERSU1RSTEVOXTsNCisJdWludDE2X3QgICAgICBwb3J0Ow0KKwlib29sCSAgICAg
IHVkcDsNCisJLyogSVBWNiBzdXBwb3J0ICovDQorDQorCS8qIFF1ZXVlcyB0byBzY2hlZHVsZSBy
eCB3b3JrICovDQorCXN0cnVjdCB3b3JrcXVldWVfc3RydWN0CSpyZWN2X3dvcmtxOw0KKwlzdHJ1
Y3Qgd29ya3F1ZXVlX3N0cnVjdAkqY29ubmVjdF93b3JrcTsNCisJc3RydWN0IHdvcmtfc3RydWN0
CXJlY3Zfd29yazsNCisJc3RydWN0IHdvcmtfc3RydWN0CWNvbm5lY3Rfd29yazsNCisJLyogcmVj
diBidWZmZXIgKi8NCisJc3RydWN0IG1hdXNiX2lwX3JlY3ZfY3R4IHJlY3ZfY3R4Ow0KKw0KKwll
bnVtIG1hdXNiX2NoYW5uZWwgY2hhbm5lbDsNCisJdm9pZCAqY3R4Ow0KKwkvKiBjYWxsYmFjayBz
aG91bGQgc3RvcmUgdGFzayBpbnRvIGhwYWwgcXVldWUgKi8NCisJdm9pZCAoKmZuX2NhbGxiYWNr
KSh2b2lkICpjdHgsIGVudW0gbWF1c2JfY2hhbm5lbCBjaGFubmVsLA0KKwkJCSAgICBlbnVtIG1h
dXNiX2xpbmtfYWN0aW9uIGFjdCwgaW50IHN0YXR1cywgdm9pZCAqZGF0YSk7DQorfTsNCisNCitp
bnQgbWF1c2JfaW5pdF9pcF9jdHgoc3RydWN0IG1hdXNiX2lwX2N0eCAqKmlwX2N0eCwNCisJCSAg
ICAgIHN0cnVjdCBuZXQgKm5ldF9ucywNCisJCSAgICAgIGNoYXIgaXBfYWRkcltJTkVUNl9BRERS
U1RSTEVOXSwNCisJCSAgICAgIHVpbnQxNl90IHBvcnQsDQorCQkgICAgICB2b2lkICpjdHgsDQor
CQkgICAgICB2b2lkICgqY3R4X2NhbGxiYWNrKSh2b2lkICpjdHgsDQorCQkJCQkgICBlbnVtIG1h
dXNiX2NoYW5uZWwgY2hhbm5lbCwNCisJCQkJCSAgIGVudW0gbWF1c2JfbGlua19hY3Rpb24gYWN0
LA0KKwkJCQkJICAgaW50IHN0YXR1cywgdm9pZCAqZGF0YSksDQorCQkgICAgICBlbnVtIG1hdXNi
X2NoYW5uZWwgY2hhbm5lbCk7DQoraW50IG1hdXNiX2lwX2Rpc2Nvbm5lY3Qoc3RydWN0IG1hdXNi
X2lwX2N0eCAqaXBfY3R4KTsNCitpbnQgbWF1c2JfaXBfc2VuZChzdHJ1Y3QgbWF1c2JfaXBfY3R4
ICppcF9jdHgsDQorCQkgIHN0cnVjdCBtYXVzYl9rdmVjX2RhdGFfd3JhcHBlciAqd3JhcHBlcik7
DQorDQordm9pZCBtYXVzYl9kZXN0cm95X2lwX2N0eChzdHJ1Y3QgbWF1c2JfaXBfY3R4ICppcF9j
dHgpOw0KK3ZvaWQgbWF1c2JfaXBfY29ubmVjdF9hc3luYyhzdHJ1Y3QgbWF1c2JfaXBfY3R4ICpp
cF9jdHgpOw0KKw0KKyNlbmRpZiAvKiBfX01BVVNCX0xJTktfTUFVU0JfSVBfTElOS19IX18gKi8N
CmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL3V0aWxzL21h
dXNiX2RhdGFfaXRlcmF0b3IuaCBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUv
dXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXgg
MDAwMDAwMDAwMDAwLi5hZTY3OTI3MmMwOGMNCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMv
c3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvdXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oDQpA
QCAtMCwwICsxLDU1IEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8N
CisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsgKFVLKSBMdGQu
DQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlv
bnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNlZSB0aGUgZmls
ZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUgZm9yDQorICog
bW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9VVElMU19NQVVTQl9EQVRBX0lU
RVJBVE9SX0hfXw0KKyNkZWZpbmUgX19NQVVTQl9VVElMU19NQVVTQl9EQVRBX0lURVJBVE9SX0hf
Xw0KKw0KKyNpbmNsdWRlIDxsaW51eC9saXN0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L3NjYXR0ZXJs
aXN0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L3Vpby5oPg0KKw0KK3N0cnVjdCBtYXVzYl9kYXRhX2l0
ZXIgew0KKw0KKwl1aW50MzJfdCBsZW5ndGg7DQorDQorCXZvaWQJICpidWZmZXI7DQorCXVpbnQz
Ml90IGJ1ZmZlcl9sZW47DQorCXVpbnQzMl90IG9mZnNldDsNCisNCisJc3RydWN0IHNjYXR0ZXJs
aXN0CSpzZzsNCisJc3RydWN0IHNnX21hcHBpbmdfaXRlcglzZ19pdGVyOw0KKwlib29sCQlzZ19z
dGFydGVkOw0KKwl1aW50MzJfdAludW1fc2dzOw0KKwl1bnNpZ25lZCBpbnQJZmxhZ3M7DQorfTsN
CisNCitzdHJ1Y3QgbWF1c2JfcGF5bG9hZF9jaHVuayB7DQorCXN0cnVjdCBsaXN0X2hlYWQgbGlz
dF9lbnRyeTsNCisJc3RydWN0IGt2ZWMJIGt2ZWM7DQorfTsNCisNCitpbnQgbWF1c2JfZGF0YV9p
dGVyYXRvcl9yZWFkKHN0cnVjdCBtYXVzYl9kYXRhX2l0ZXIgKml0ZXJhdG9yLA0KKwkJCSAgICAg
dWludDMyX3QgYnl0ZV9udW0sDQorCQkJICAgICBzdHJ1Y3QgbGlzdF9oZWFkICpkYXRhX2NodW5r
c19saXN0LA0KKwkJCSAgICAgdWludDMyX3QgKmRhdGFfY2h1bmtzX251bSk7DQorDQordWludDMy
X3QgbWF1c2JfZGF0YV9pdGVyYXRvcl9sZW5ndGgoc3RydWN0IG1hdXNiX2RhdGFfaXRlciAqaXRl
cmF0b3IpOw0KK3VpbnQzMl90IG1hdXNiX2RhdGFfaXRlcmF0b3Jfd3JpdGUoc3RydWN0IG1hdXNi
X2RhdGFfaXRlciAqaXRlcmF0b3IsDQorCQkJCSAgIHZvaWQgKmJ1ZmZlciwgdWludDMyX3QgbGVu
Z3RoKTsNCisNCit2b2lkIG1hdXNiX2luaXRfZGF0YV9pdGVyYXRvcihzdHJ1Y3QgbWF1c2JfZGF0
YV9pdGVyICppdGVyYXRvciwNCisJCQkgICAgICB2b2lkICpidWZmZXIsIHVpbnQzMl90IGJ1ZmZl
cl9sZW4sDQorCQkJICAgICAgc3RydWN0IHNjYXR0ZXJsaXN0ICpzZywgdWludDMyX3QgbnVtX3Nn
cywNCisJCQkgICAgICBib29sIGRpcmVjdGlvbik7DQordm9pZCBtYXVzYl9yZXNldF9kYXRhX2l0
ZXJhdG9yKHN0cnVjdCBtYXVzYl9kYXRhX2l0ZXIgKml0ZXJhdG9yKTsNCit2b2lkIG1hdXNiX3Vu
aW5pdF9kYXRhX2l0ZXJhdG9yKHN0cnVjdCBtYXVzYl9kYXRhX2l0ZXIgKml0ZXJhdG9yKTsNCit2
b2lkIG1hdXNiX2RhdGFfaXRlcmF0b3Jfc2VlayhzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVy
YXRvciwNCisJCQkgICAgICB1aW50MzJfdCBzZWVrX2RlbHRhKTsNCisNCisNCisjZW5kaWYgLyog
X19NQVVTQl9VVElMU19NQVVTQl9EQVRBX0lURVJBVE9SX0hfXyAqLw0KZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvdXRpbHMvbWF1c2JfbG9ncy5oIGIvZHJp
dmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS91dGlscy9tYXVzYl9sb2dzLmgNCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLmRlNjE3NTI4ZTAyOA0KLS0tIC9k
ZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS91dGlscy9t
YXVzYl9sb2dzLmgNCkBAIC0wLDAgKzEsMzUgQEANCisvKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmll
cjogR1BMLTIuMCAqLw0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBEaXNwbGF5
TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJt
cyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQorICogTGljZW5zZSB2
Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRoaXMgYXJj
aGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2lmbmRlZiBfX01BVVNCX1VUSUxT
X01BVVNCX0xPR1NfSF9fDQorI2RlZmluZSBfX01BVVNCX1VUSUxTX01BVVNCX0xPR1NfSF9fDQor
DQorI2lmZGVmIE1BVVNCX1dJVEhfTE9HUw0KKyNpbmNsdWRlIDxsaW51eC9zY2hlZC5oPg0KKyNk
ZWZpbmUgbWF1c2JfcHJfbG9ncyhsZXZlbF9zdHIsIGxldmVsLCBsb2csIC4uLilcDQorCXByXyMj
bGV2ZWxfc3RyKCJNQVVTQiAiI2xldmVsIiBbJXg6JXhdIFslc10gImxvZyJcbiIsXA0KKwljdXJy
ZW50LT5waWQsIGN1cnJlbnQtPnRnaWQsIF9fZnVuY19fLCAjI19fVkFfQVJHU19fKQ0KKyNlbHNl
DQorI2RlZmluZSBtYXVzYl9wcl9sb2dzKC4uLikNCisjZW5kaWYgLyogTUFVU0JfV0lUSF9MT0dT
ICovDQorDQorI2RlZmluZSBtYXVzYl9wcl9hbGVydCguLi4pIG1hdXNiX3ByX2xvZ3MoYWxlcnQs
IDEsICMjX19WQV9BUkdTX18pDQorDQorI2RlZmluZSBtYXVzYl9wcl9lcnIoLi4uKSBtYXVzYl9w
cl9sb2dzKGVyciwgMiwgIyNfX1ZBX0FSR1NfXykNCisNCisjZGVmaW5lIG1hdXNiX3ByX3dhcm4o
Li4uKSBtYXVzYl9wcl9sb2dzKHdhcm4sIDMsICMjX19WQV9BUkdTX18pDQorDQorI2RlZmluZSBt
YXVzYl9wcl9pbmZvKC4uLikgIG1hdXNiX3ByX2xvZ3MoaW5mbywgNCwgIyNfX1ZBX0FSR1NfXykN
CisNCisjaWYgZGVmaW5lZChNQVVTQl9MT0dfVkVSQk9TRSkNCisJI2RlZmluZSBtYXVzYl9wcl9k
ZWJ1ZyguLi4pIG1hdXNiX3ByX2xvZ3MoZGVidWcsIDUsICMjX19WQV9BUkdTX18pDQorI2Vsc2UN
CisJI2RlZmluZSBtYXVzYl9wcl9kZWJ1ZyguLi4pDQorI2VuZGlmIC8qIGRlZmluZWQoTUFVU0Jf
TE9HX1ZFUkJPU0UpICovDQorDQorI2VuZGlmIC8qIF9fTUFVU0JfVVRJTFNfTUFVU0JfTE9HU19I
X18gKi8NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL3V0
aWxzL21hdXNiX21tYXAuaCBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvdXRp
bHMvbWF1c2JfbW1hcC5oDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAw
Li40NWI4MWY2ZjRjNzANCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVz
Yl9ob3N0L2luY2x1ZGUvdXRpbHMvbWF1c2JfbW1hcC5oDQpAQCAtMCwwICsxLDIyIEBADQorLyog
U1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAo
YykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUg
aXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFs
IFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWlu
IGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0K
KyNpZm5kZWYgX19NQVVTQl9VVElMU19NQVVTQl9NTUFQX0hfXw0KKyNkZWZpbmUgX19NQVVTQl9V
VElMU19NQVVTQl9NTUFQX0hfXw0KKw0KK2V4dGVybiBzdHJ1Y3QgbXNzIG1zczsNCitleHRlcm4g
c3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyIG1hdXNiX3Jpbmc7DQorDQoraW50IG1hdXNiX2NyZWF0
ZV9kZXYodm9pZCk7DQorDQordm9pZCBtYXVzYl9jbGVhbnVwX2RldihpbnQgZGV2aWNlX2NyZWF0
ZWQpOw0KK3ZvaWQgbWF1c2Jfbm90aWZ5X2NvbXBsZXRlZF91c2VyX2V2ZW50cyhzdHJ1Y3QgbWF1
c2JfcmluZ19idWZmZXIgKnJpbmdfYnVmZmVyKTsNCit2b2lkIG1hdXNiX25vdGlmeV9yaW5nX2V2
ZW50cyhzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIgKnJpbmdfYnVmZmVyKTsNCit2b2lkIG1hdXNi
X3N0b3BfcmluZ19ldmVudHModm9pZCk7DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfVVRJTFNfTUFV
U0JfTU1BUF9IX18gKi8NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9p
bmNsdWRlL3V0aWxzL21hdXNiX3JpbmdfYnVmZmVyLmggYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2Jf
aG9zdC9pbmNsdWRlL3V0aWxzL21hdXNiX3JpbmdfYnVmZmVyLmgNCm5ldyBmaWxlIG1vZGUgMTAw
NjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLmM5MjMzNGI1NTA3Mg0KLS0tIC9kZXYvbnVsbA0KKysr
IGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3QvaW5jbHVkZS91dGlscy9tYXVzYl9yaW5nX2J1
ZmZlci5oDQpAQCAtMCwwICsxLDUzIEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQ
TC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsg
KFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5k
IGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNl
ZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUg
Zm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19fTUFVU0JfVVRJTFNfTUFV
U0JfUklOR19CVUZGRVJfSF9fDQorI2RlZmluZSBfX19NQVVTQl9VVElMU19NQVVTQl9SSU5HX0JV
RkZFUl9IX18NCisNCisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2suaD4NCisNCisjaW5jbHVkZSAi
Y29tbW9uL21hdXNiX2V2ZW50LmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX2xvZ3MuaCINCisN
CitzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIgew0KKwlhdG9taWNfdCBtYXVzYl9yaW5nX2V2ZW50
czsNCisJYXRvbWljX3QgbWF1c2JfY29tcGxldGVkX3VzZXJfZXZlbnRzOw0KKw0KKwlzdHJ1Y3Qg
bWF1c2JfZXZlbnQgKnRvX3VzZXJfYnVmZmVyOw0KKwlpbnQJCWhlYWQ7DQorCWludAkJdGFpbDsN
CisJc3BpbmxvY2tfdAlsb2NrOw0KKwl1aW50NjRfdAlpZDsNCisNCisJc3RydWN0IG1hdXNiX2V2
ZW50ICpmcm9tX3VzZXJfYnVmZmVyOw0KKwlpbnQgY3VycmVudF9mcm9tX3VzZXI7DQorDQorCXN0
cnVjdCBsaXN0X2hlYWQgbGlzdF9lbnRyeTsNCit9Ow0KKw0KK2ludCBtYXVzYl9yaW5nX2J1ZmZl
cl9pbml0KHN0cnVjdCBtYXVzYl9yaW5nX2J1ZmZlciAqcmluZyk7DQoraW50IG1hdXNiX3Jpbmdf
YnVmZmVyX3B1dChzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIgKnJpbmcsDQorCQkJICBzdHJ1Y3Qg
bWF1c2JfZXZlbnQgKmV2ZW50KTsNCitpbnQgbWF1c2JfcmluZ19idWZmZXJfbW92ZV90YWlsKHN0
cnVjdCBtYXVzYl9yaW5nX2J1ZmZlciAqcmluZywgdWludDMyX3QgY291bnQpOw0KKw0KK3N0YXRp
YyBpbmxpbmUgc3RydWN0IG1hdXNiX2V2ZW50ICptYXVzYl9yaW5nX2N1cnJlbnRfZnJvbV91c2Vy
KA0KKwkJCQkJCXN0cnVjdCBtYXVzYl9yaW5nX2J1ZmZlciAqcmluZykNCit7DQorCXJldHVybiBy
aW5nLT5mcm9tX3VzZXJfYnVmZmVyICsgcmluZy0+Y3VycmVudF9mcm9tX3VzZXI7DQorfQ0KKw0K
K3N0YXRpYyBpbmxpbmUgdm9pZCBtYXVzYl9yaW5nX25leHRfZnJvbV91c2VyKHN0cnVjdCBtYXVz
Yl9yaW5nX2J1ZmZlciAqcmluZykNCit7DQorCXJpbmctPmN1cnJlbnRfZnJvbV91c2VyID0gKHJp
bmctPmN1cnJlbnRfZnJvbV91c2VyICsgMSkgJg0KKwkJCQkgIChNQVVTQl9SSU5HX0JVRkZFUl9T
SVpFIC0gMSk7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfcmluZ19idWZmZXJfY2xlYW51cChzdHJ1Y3Qg
bWF1c2JfcmluZ19idWZmZXIgKnJpbmcpOw0KK3ZvaWQgbWF1c2JfcmluZ19idWZmZXJfZGVzdHJv
eShzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIgKnJpbmcpOw0KKw0KKyNlbmRpZiAvKiBfX19NQVVT
Ql9VVElMU19NQVVTQl9SSU5HX0JVRkZFUl9IX18gKi8NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0
YWdpbmcvbWF1c2JfaG9zdC9pbmNsdWRlL3V0aWxzL21hdXNiX3ZlcnNpb24uaCBiL2RyaXZlcnMv
c3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvdXRpbHMvbWF1c2JfdmVyc2lvbi5oDQpuZXcgZmls
ZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi42YWRmN2ZlYmU5MTYNCi0tLSAvZGV2
L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L2luY2x1ZGUvdXRpbHMvbWF1
c2JfdmVyc2lvbi5oDQpAQCAtMCwwICsxLDE3IEBADQorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZp
ZXI6IEdQTC0yLjAgKi8NCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxh
eUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVy
bXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2Ug
djIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFy
Y2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpZm5kZWYgX19NQVVTQl9VVElM
U19NQVVTQl9WRVJTSU9OX0hfXw0KKyNkZWZpbmUgX19NQVVTQl9VVElMU19NQVVTQl9WRVJTSU9O
X0hfXw0KKw0KKyNkZWZpbmUgTUFVU0JfU1RSSU5HSUZZMih4KSAjeA0KKyNkZWZpbmUgTUFVU0Jf
U1RSSU5HSUZZKHgpIE1BVVNCX1NUUklOR0lGWTIoeCkNCisNCisjZGVmaW5lIE1BVVNCX0RSSVZF
Ul9WRVJTSU9OIE1BVVNCX1NUUklOR0lGWSgxLjEuMC4wLjM4NTdkMDJhLXZsYWRhc3QtREVWRUwp
DQorDQorI2VuZGlmIC8qIF9fTUFVU0JfVVRJTFNfTUFVU0JfVkVSU0lPTl9IX18gKi8NCmRpZmYg
LS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaGNkL2h1Yi5jIGIvZHJpdmVy
cy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hjZC9odWIuYw0KbmV3IGZpbGUgbW9kZSAxMDA2NDQN
CmluZGV4IDAwMDAwMDAwMDAwMC4uMDE4ZDIwZDMzN2MxDQotLS0gL2Rldi9udWxsDQorKysgYi9k
cml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaGNkL2h1Yi5jDQpAQCAtMCwwICsxLDE4MDEg
QEANCisvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMA0KKy8qDQorICogQ29weXJp
Z2h0IChjKSAyMDE5IC0gMjAyMCBEaXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMg
ZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdl
bmVyYWwgUHVibGljDQorICogTGljZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhl
IG1haW4gZGlyZWN0b3J5IG9mIHRoaXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQor
ICovDQorI2luY2x1ZGUgImhjZC9odWIuaCINCisNCisjaW5jbHVkZSA8bGludXgvdmVyc2lvbi5o
Pg0KKw0KKyNpbmNsdWRlICJoY2QvdmhjZC5oIg0KKyNpbmNsdWRlICJocGFsL2hwYWwuaCINCisj
aW5jbHVkZSAiaHBhbC9tYXVzYl9ldmVudHMuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9n
cy5oIg0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2dldF9odWJfZGVzY3JpcHRvcihzdHJ1Y3QgdXNi
X2hjZCAqaGNkLCB1aW50MTZfdCB0eXBlUmVxLA0KKwkJCQkgICAgIHVpbnQxNl90IHdWYWx1ZSwg
dWludDE2X3Qgd0luZGV4LA0KKwkJCQkgICAgIGNoYXIgKmJ1ZmYsIHVpbnQxNl90IHdMZW5ndGgp
Ow0KK3N0YXRpYyB2b2lkIG1hdXNiX3NldF9wb3J0X2ZlYXR1cmUoc3RydWN0IHVzYl9oY2QgKmhj
ZCwgdWludDE2X3QgdHlwZVJlcSwNCisJCQkJICAgdWludDE2X3Qgd1ZhbHVlLCB1aW50MTZfdCB3
SW5kZXgsIGNoYXIgKmJ1ZmYsDQorCQkJCSAgIHVpbnQxNl90IHdMZW5ndGgpOw0KK3N0YXRpYyB2
b2lkIG1hdXNiX2dldF9wb3J0X3N0YXR1cyhzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1aW50MTZfdCB0
eXBlUmVxLA0KKwkJCQkgIHVpbnQxNl90IHdWYWx1ZSwgdWludDE2X3Qgd0luZGV4LCBjaGFyICpi
dWZmLA0KKwkJCQkgIHVpbnQxNl90IHdMZW5ndGgpOw0KK3N0YXRpYyB2b2lkIG1hdXNiX2NsZWFy
X3BvcnRfZmVhdHVyZShzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1aW50MTZfdCB0eXBlUmVxLA0KKwkJ
CQkgICAgIHVpbnQxNl90IHdWYWx1ZSwgdWludDE2X3Qgd0luZGV4LA0KKwkJCQkgICAgIGNoYXIg
KmJ1ZmYsIHVpbnQxNl90IHdMZW5ndGgpOw0KK3N0YXRpYyB2b2lkIG1hdXNiX2dldF9odWJfc3Rh
dHVzKHN0cnVjdCB1c2JfaGNkICpoY2QsIHVpbnQxNl90IHR5cGVSZXEsDQorCQkJCSB1aW50MTZf
dCB3VmFsdWUsIHVpbnQxNl90IHdJbmRleCwgY2hhciAqYnVmZiwNCisJCQkJIHVpbnQxNl90IHdM
ZW5ndGgpOw0KK3N0YXRpYyBpbnQgbWF1c2JfYWRkX2VuZHBvaW50KHN0cnVjdCB1c2JfaGNkICpo
Y2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYsDQorCQlzdHJ1Y3QgdXNiX2hvc3RfZW5kcG9pbnQg
KmVuZHBvaW50KTsNCitzdGF0aWMgaW50IG1hdXNiX2FkZHJlc3NfZGV2aWNlKHN0cnVjdCB1c2Jf
aGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpOw0KK3N0YXRpYyBpbnQgbWF1c2JfYWxs
b2NfZGV2KHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpOw0KK3N0
YXRpYyBpbnQgbWF1c2JfY2hlY2tfYmFuZHdpZHRoKHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVj
dCB1c2JfZGV2aWNlICpkZXYpOw0KK3N0YXRpYyBpbnQgbWF1c2JfZHJvcF9lbmRwb2ludChzdHJ1
Y3QgdXNiX2hjZCAqaGNkLCBzdHJ1Y3QgdXNiX2RldmljZSAqZGV2LA0KKwkJCXN0cnVjdCB1c2Jf
aG9zdF9lbmRwb2ludCAqZW5kcG9pbnQpOw0KK3N0YXRpYyBpbnQgbWF1c2JfZW5hYmxlX2Rldmlj
ZShzdHJ1Y3QgdXNiX2hjZCAqaGNkLCBzdHJ1Y3QgdXNiX2RldmljZSAqZGV2KTsNCitzdGF0aWMg
dm9pZCBtYXVzYl9lbmRwb2ludF9kaXNhYmxlKHN0cnVjdCB1c2JfaGNkICpoY2QsDQorCQkJc3Ry
dWN0IHVzYl9ob3N0X2VuZHBvaW50ICplbmRwb2ludCk7DQorc3RhdGljIHZvaWQgbWF1c2JfZW5k
cG9pbnRfcmVzZXQoc3RydWN0IHVzYl9oY2QgKmhjZCwNCisJCQkgIHN0cnVjdCB1c2JfaG9zdF9l
bmRwb2ludCAqZW5kcG9pbnQpOw0KK3N0YXRpYyB2b2lkIG1hdXNiX2ZyZWVfZGV2KHN0cnVjdCB1
c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpOw0KK3N0YXRpYyBpbnQgbWF1c2Jf
aGNkX2J1c19yZXN1bWUoc3RydWN0IHVzYl9oY2QgKmhjZCk7DQorc3RhdGljIGludCBtYXVzYl9o
Y2RfYnVzX3N1c3BlbmQoc3RydWN0IHVzYl9oY2QgKmhjZCk7DQorc3RhdGljIGludCBtYXVzYl9o
Y2RfZ2V0X2ZyYW1lX251bWJlcihzdHJ1Y3QgdXNiX2hjZCAqaGNkKTsNCitzdGF0aWMgaW50IG1h
dXNiX2hjZF9odWJfY29udHJvbChzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1aW50MTZfdCB0eXBlUmVx
LA0KKwkJCQl1aW50MTZfdCB3VmFsdWUsIHVpbnQxNl90IHdJbmRleCwgY2hhciAqYnVmZiwNCisJ
CQkJdWludDE2X3Qgd0xlbmd0aCk7DQorc3RhdGljIGludCBtYXVzYl9oY2RfaHViX3N0YXR1cyhz
dHJ1Y3QgdXNiX2hjZCAqaGNkLCBjaGFyICpidWZmKTsNCitzdGF0aWMgaW50IG1hdXNiX2hjZF9y
ZXNldChzdHJ1Y3QgdXNiX2hjZCAqaGNkKTsNCitzdGF0aWMgaW50IG1hdXNiX2hjZF9zdGFydChz
dHJ1Y3QgdXNiX2hjZCAqaGNkKTsNCitzdGF0aWMgdm9pZCBtYXVzYl9oY2Rfc3RvcChzdHJ1Y3Qg
dXNiX2hjZCAqaGNkKTsNCitzdGF0aWMgaW50IG1hdXNiX2hjZF91cmJfZGVxdWV1ZShzdHJ1Y3Qg
dXNiX2hjZCAqaGNkLCBzdHJ1Y3QgdXJiICp1cmIsDQorCQkJCWludCBzdGF0dXMpOw0KK3N0YXRp
YyBpbnQgbWF1c2JfaGNkX3VyYl9lbnF1ZXVlKHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1
cmIgKnVyYiwNCisJCQkJZ2ZwX3QgbWVtX2ZsYWdzKTsNCitzdGF0aWMgaW50IG1hdXNiX2h1Yl91
cGRhdGVfZGV2aWNlKHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYs
DQorCQkJCXN0cnVjdCB1c2JfdHQgKnR0LCBnZnBfdCBtZW1fZmxhZ3MpOw0KK3N0YXRpYyB2b2lk
IG1hdXNiX3Jlc2V0X2JhbmR3aWR0aChzdHJ1Y3QgdXNiX2hjZCAqaGNkLCBzdHJ1Y3QgdXNiX2Rl
dmljZSAqZGV2KTsNCitzdGF0aWMgaW50IG1hdXNiX3Jlc2V0X2RldmljZShzdHJ1Y3QgdXNiX2hj
ZCAqaGNkLCBzdHJ1Y3QgdXNiX2RldmljZSAqZGV2KTsNCitzdGF0aWMgaW50IG1hdXNiX3VwZGF0
ZV9kZXZpY2Uoc3RydWN0IHVzYl9oY2QgKmhjZCwgc3RydWN0IHVzYl9kZXZpY2UgKmRldik7DQor
DQorc3RhdGljIHZvaWQgbWF1c2JfcHJpbnRfdXJiKHN0cnVjdCB1cmIgKnJlcXVlc3QpDQorew0K
KwltYXVzYl9wcl9kZWJ1ZygiVVJCOiB1cmI9JXAsIGVwX2hhbmRsZT0lI3gsIHBhY2tldF9udW09
JWQsIHNldHVwX2RtYT0lbGxkLCBpc19zZXR1cF9wYWNrZXQ9JWQsIGlzX2VwPSVkLCBpc19zZz0l
ZCwgbnVtX3Nncz0lZCwgbnVtX21hcHBlZF9zZ3M9JWQsIHN0YXR1cz0lZCwgaXNfdHJhbnNmZXJf
YnVmZmVyPSVkLCB0cmFuc2Zlcl9idWZmZXJfbGVuZ3RoPSVkLCBpc190cmFuc2Zlcl9kbWE9JWQs
IHRyYW5zZmVyX2ZsYWdzPSVkLCBpc19oY3ByaXY9JWQiLA0KKwkJcmVxdWVzdCwNCisJCSgoc3Ry
dWN0IG1hdXNiX2VuZHBvaW50X2N0eCAqKXJlcXVlc3QtPmVwLT5oY3ByaXYpLT5lcF9oYW5kbGUs
DQorCQlyZXF1ZXN0LT5udW1iZXJfb2ZfcGFja2V0cywgcmVxdWVzdC0+c2V0dXBfZG1hLA0KKwkJ
cmVxdWVzdC0+c2V0dXBfcGFja2V0ICE9IDAsIHJlcXVlc3QtPmVwICE9IDAsIHJlcXVlc3QtPnNn
ICE9IDAsDQorCQlyZXF1ZXN0LT5udW1fc2dzLCByZXF1ZXN0LT5udW1fbWFwcGVkX3NncywgcmVx
dWVzdC0+c3RhdHVzLA0KKwkJcmVxdWVzdC0+dHJhbnNmZXJfYnVmZmVyICE9IDAsIHJlcXVlc3Qt
PnRyYW5zZmVyX2J1ZmZlcl9sZW5ndGgsDQorCQlyZXF1ZXN0LT50cmFuc2Zlcl9kbWEgIT0gMCwg
cmVxdWVzdC0+dHJhbnNmZXJfZmxhZ3MsDQorCQlyZXF1ZXN0LT5lcCA/IHJlcXVlc3QtPmVwLT5o
Y3ByaXYgIT0gMCA6IDApOw0KK30NCisNCitzdGF0aWMgY29uc3Qgc3RydWN0IGhjX2RyaXZlciBt
YXVzYl9oY19kcml2ZXIgPSB7DQorCS5kZXNjcmlwdGlvbiAgPSAgZHJpdmVyX25hbWUsDQorCS5w
cm9kdWN0X2Rlc2MgPSBkcml2ZXJfbmFtZSwNCisJLmZsYWdzCSAgICAgID0gSENEX1VTQjMgfCBI
Q0RfU0hBUkVELA0KKw0KKwkuaGNkX3ByaXZfc2l6ZSA9IHNpemVvZihzdHJ1Y3QgaHViX2N0eCks
DQorDQorCS5yZXNldCA9IG1hdXNiX2hjZF9yZXNldCwNCisJLnN0YXJ0ID0gbWF1c2JfaGNkX3N0
YXJ0LA0KKwkuc3RvcCAgPSBtYXVzYl9oY2Rfc3RvcCwNCisNCisJLnVyYl9lbnF1ZXVlID0gbWF1
c2JfaGNkX3VyYl9lbnF1ZXVlLA0KKwkudXJiX2RlcXVldWUgPSBtYXVzYl9oY2RfdXJiX2RlcXVl
dWUsDQorDQorCS5nZXRfZnJhbWVfbnVtYmVyID0gbWF1c2JfaGNkX2dldF9mcmFtZV9udW1iZXIs
DQorDQorCS5odWJfc3RhdHVzX2RhdGEgICA9IG1hdXNiX2hjZF9odWJfc3RhdHVzLA0KKwkuaHVi
X2NvbnRyb2wJICAgPSBtYXVzYl9oY2RfaHViX2NvbnRyb2wsDQorCS51cGRhdGVfaHViX2Rldmlj
ZSA9IG1hdXNiX2h1Yl91cGRhdGVfZGV2aWNlLA0KKwkuYnVzX3N1c3BlbmQJICAgPSBtYXVzYl9o
Y2RfYnVzX3N1c3BlbmQsDQorCS5idXNfcmVzdW1lCSAgID0gbWF1c2JfaGNkX2J1c19yZXN1bWUs
DQorDQorCS5hbGxvY19kZXYJPSBtYXVzYl9hbGxvY19kZXYsDQorCS5mcmVlX2Rldgk9IG1hdXNi
X2ZyZWVfZGV2LA0KKwkuZW5hYmxlX2RldmljZQk9IG1hdXNiX2VuYWJsZV9kZXZpY2UsDQorCS51
cGRhdGVfZGV2aWNlCT0gbWF1c2JfdXBkYXRlX2RldmljZSwNCisJLnJlc2V0X2RldmljZQk9IG1h
dXNiX3Jlc2V0X2RldmljZSwNCisNCisJLmFkZF9lbmRwb2ludAkgID0gbWF1c2JfYWRkX2VuZHBv
aW50LA0KKwkuZHJvcF9lbmRwb2ludAkgID0gbWF1c2JfZHJvcF9lbmRwb2ludCwNCisJLmNoZWNr
X2JhbmR3aWR0aCAgPSBtYXVzYl9jaGVja19iYW5kd2lkdGgsDQorCS5yZXNldF9iYW5kd2lkdGgg
ID0gbWF1c2JfcmVzZXRfYmFuZHdpZHRoLA0KKwkuYWRkcmVzc19kZXZpY2UgICA9IG1hdXNiX2Fk
ZHJlc3NfZGV2aWNlLA0KKwkuZW5kcG9pbnRfZGlzYWJsZSA9IG1hdXNiX2VuZHBvaW50X2Rpc2Fi
bGUsDQorCS5lbmRwb2ludF9yZXNldAkgID0gbWF1c2JfZW5kcG9pbnRfcmVzZXQsDQorDQorI2lm
ZGVmIElTT0NIX0NBTExCQUNLUw0KKwkuc2VjX2V2ZW50X3Jpbmdfc2V0dXAJCT0gbWF1c2Jfc2Vj
X2V2ZW50X3Jpbmdfc2V0dXAsDQorCS5zZWNfZXZlbnRfcmluZ19jbGVhbnVwCQk9IG1hdXNiX3Nl
Y19ldmVudF9yaW5nX2NsZWFudXAsDQorCS5nZXRfc2VjX2V2ZW50X3JpbmdfcGh5c19hZGRyCT0g
bWF1c2JfZ2V0X3NlY19ldmVudF9yaW5nX3BoeXNfYWRkciwNCisJLmdldF94ZmVyX3JpbmdfcGh5
c19hZGRyCT0gbWF1c2JfZ2V0X3hmZXJfcmluZ19waHlzX2FkZHIsDQorCS5nZXRfY29yZV9pZAkJ
CT0gbWF1c2JfZ2V0X2NvcmVfaWQNCisjZW5kaWYgLyogSVNPQ0hfQ0FMTEJBQ0tTICovDQorDQor
fTsNCisNCitzdGF0aWMgc3RydWN0IHsNCisJc3RydWN0IHVzYl9ib3NfZGVzY3JpcHRvciAgICBi
b3M7DQorCXN0cnVjdCB1c2Jfc3NfY2FwX2Rlc2NyaXB0b3Igc3NfY2FwOw0KK30gdXNiM19ib3Nf
ZGVzYyA9IHsNCisJLmJvcyA9IHsNCisJCS5iTGVuZ3RoCSA9IFVTQl9EVF9CT1NfU0laRSwNCisJ
CS5iRGVzY3JpcHRvclR5cGUgPSBVU0JfRFRfQk9TLA0KKwkJLndUb3RhbExlbmd0aAkgPSBjcHVf
dG9fbGUxNihzaXplb2YodXNiM19ib3NfZGVzYykpLA0KKwkJLmJOdW1EZXZpY2VDYXBzCSA9IDEN
CisJfSwNCisJLnNzX2NhcCA9IHsNCisJCS5iTGVuZ3RoCQk9IFVTQl9EVF9VU0JfU1NfQ0FQX1NJ
WkUsDQorCQkuYkRlc2NyaXB0b3JUeXBlCT0gVVNCX0RUX0RFVklDRV9DQVBBQklMSVRZLA0KKwkJ
LmJEZXZDYXBhYmlsaXR5VHlwZQk9IFVTQl9TU19DQVBfVFlQRSwNCisJCS53U3BlZWRTdXBwb3J0
ZWQJPSBjcHVfdG9fbGUxNihVU0JfNUdCUFNfT1BFUkFUSU9OKSwNCisJCS5iRnVuY3Rpb25hbGl0
eVN1cHBvcnQJPSBpbG9nMihVU0JfNUdCUFNfT1BFUkFUSU9OKQ0KKwl9DQorfTsNCisNCitzdGF0
aWMgaW50OF90IGdldF9yb290X2h1Yl9wb3J0X251bWJlcihzdHJ1Y3QgdXNiX2RldmljZSAqZGV2
KQ0KK3sNCisJc3RydWN0IHVzYl9kZXZpY2UgKmZpcnN0X2h1Yl9kZXZpY2UgPSBkZXY7DQorDQor
CWlmICghZGV2LT5wYXJlbnQpIHsNCisJCW1hdXNiX3ByX2luZm8oIlRyeWluZyB0byBnZXQgcm9v
dGh1YiBwb3J0IG51bWJlciIpOw0KKwkJcmV0dXJuIC0xOw0KKwl9DQorDQorCXdoaWxlIChmaXJz
dF9odWJfZGV2aWNlLT5wYXJlbnQtPnBhcmVudCkNCisJCWZpcnN0X2h1Yl9kZXZpY2UgPSBmaXJz
dF9odWJfZGV2aWNlLT5wYXJlbnQ7DQorDQorCXJldHVybiBmaXJzdF9odWJfZGV2aWNlLT5wb3J0
bnVtIC0gMTsNCit9DQorDQorc3RhdGljIGludCB1c2JfdG9fbWF1c2JfZGV2aWNlX3NwZWVkKHVp
bnQ4X3Qgc3BlZWQpDQorew0KKwlzd2l0Y2ggKHNwZWVkKSB7DQorCWNhc2UgVVNCX1NQRUVEX0xP
VzoNCisJCXJldHVybiBNQV9VU0JfU1BFRURfTE9XX1NQRUVEOw0KKwljYXNlIFVTQl9TUEVFRF9G
VUxMOg0KKwkJcmV0dXJuIE1BX1VTQl9TUEVFRF9GVUxMX1NQRUVEOw0KKwljYXNlIFVTQl9TUEVF
RF9XSVJFTEVTUzoNCisJY2FzZSBVU0JfU1BFRURfSElHSDoNCisJCXJldHVybiBNQV9VU0JfU1BF
RURfSElHSF9TUEVFRDsNCisJY2FzZSBVU0JfU1BFRURfU1VQRVI6DQorCQlyZXR1cm4gTUFfVVNC
X1NQRUVEX1NVUEVSX1NQRUVEOw0KKwljYXNlIFVTQl9TUEVFRF9TVVBFUl9QTFVTOg0KKwkJcmV0
dXJuIE1BX1VTQl9TUEVFRF9TVVBFUl9TUEVFRF9QTFVTOw0KKwlkZWZhdWx0Og0KKwkJcmV0dXJu
IC1FSU5WQUw7DQorCX0NCit9DQorDQorc3RhdGljIHN0cnVjdCBtYXVzYl91c2JfZGV2aWNlX2N0
eCAqbWF1c2JfZmluZF91c2JfZGV2aWNlKHN0cnVjdCBtYXVzYl9kZXYNCisJCQkJCQkJKm1kZXZz
LCB2b2lkICpkZXZfYWRkcikNCit7DQorCXN0cnVjdCByYl9ub2RlICpub2RlID0gbWRldnMtPnVz
Yl9kZXZpY2VzLnJiX25vZGU7DQorDQorCXdoaWxlIChub2RlKSB7DQorCQlzdHJ1Y3QgbWF1c2Jf
dXNiX2RldmljZV9jdHggKnVzYl9kZXZpY2UgPQ0KKwkJICAgIHJiX2VudHJ5KG5vZGUsIHN0cnVj
dCBtYXVzYl91c2JfZGV2aWNlX2N0eCwgcmJfbm9kZSk7DQorDQorCQlpZiAoZGV2X2FkZHIgPCB1
c2JfZGV2aWNlLT5kZXZfYWRkcikNCisJCQlub2RlID0gdXNiX2RldmljZS0+cmJfbm9kZS5yYl9s
ZWZ0Ow0KKwkJZWxzZSBpZiAoZGV2X2FkZHIgPiB1c2JfZGV2aWNlLT5kZXZfYWRkcikNCisJCQlu
b2RlID0gdXNiX2RldmljZS0+cmJfbm9kZS5yYl9yaWdodDsNCisJCWVsc2UNCisJCQlyZXR1cm4g
dXNiX2RldmljZTsNCisJfQ0KKwlyZXR1cm4gTlVMTDsNCit9DQorDQorc3RhdGljIGludCBtYXVz
Yl9pbnNlcnRfdXNiX2RldmljZShzdHJ1Y3QgbWF1c2JfZGV2ICptZGV2cywNCisJCQkgICAgc3Ry
dWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4ICp1c2JfZGV2aWNlKQ0KK3sNCisJc3RydWN0IHJiX25v
ZGUgKipuZXdfbm9kZSA9ICYobWRldnMtPnVzYl9kZXZpY2VzLnJiX25vZGUpLA0KKwkJICAgICAg
ICpwYXJlbnQgPSBOVUxMOw0KKwlzdHJ1Y3QgbWF1c2JfdXNiX2RldmljZV9jdHggKmN1cnJlbnRf
dXNiX2RldmljZSA9IE5VTEw7DQorDQorCXdoaWxlICgqbmV3X25vZGUpIHsNCisJCXBhcmVudCA9
ICpuZXdfbm9kZTsNCisJCWN1cnJlbnRfdXNiX2RldmljZSA9IHJiX2VudHJ5KCpuZXdfbm9kZSwN
CisJCQkJCSAgICAgIHN0cnVjdCBtYXVzYl91c2JfZGV2aWNlX2N0eCwNCisJCQkJCSAgICAgIHJi
X25vZGUpOw0KKw0KKwkJaWYgKHVzYl9kZXZpY2UtPmRldl9hZGRyIDwgY3VycmVudF91c2JfZGV2
aWNlLT5kZXZfYWRkcikNCisJCQluZXdfbm9kZSA9ICYoKCpuZXdfbm9kZSktPnJiX2xlZnQpOw0K
KwkJZWxzZSBpZiAodXNiX2RldmljZS0+ZGV2X2FkZHIgPiBjdXJyZW50X3VzYl9kZXZpY2UtPmRl
dl9hZGRyKQ0KKwkJCW5ld19ub2RlID0gJigoKm5ld19ub2RlKS0+cmJfcmlnaHQpOw0KKwkJZWxz
ZQ0KKwkJCXJldHVybiAtRUVYSVNUOw0KKwl9DQorCXJiX2xpbmtfbm9kZSgmdXNiX2RldmljZS0+
cmJfbm9kZSwgcGFyZW50LCBuZXdfbm9kZSk7DQorCXJiX2luc2VydF9jb2xvcigmdXNiX2Rldmlj
ZS0+cmJfbm9kZSwgJm1kZXZzLT51c2JfZGV2aWNlcyk7DQorCXJldHVybiAwOw0KK30NCisNCit2
b2lkIG1hdXNiX3BvcnRfaGFzX2NoYW5nZWQoY29uc3QgZW51bSBtYXVzYl9kZXZpY2VfdHlwZSBk
ZXZpY2VfdHlwZSwNCisJCQkgICAgY29uc3QgZW51bSBtYXVzYl9kZXZpY2Vfc3BlZWQgZGV2aWNl
X3NwZWVkLA0KKwkJCSAgICB2b2lkICptYV9kZXYpDQorew0KKwlzdHJ1Y3QgdXNiX2hjZCAqaGNk
Ow0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0gMDsNCisJc3RydWN0IG1hdXNiX2RldmljZSAqZGV2
ID0gbWFfZGV2Ow0KKwl1aW50MTZfdCBwb3J0X251bWJlciA9IGRldi0+cG9ydF9udW1iZXI7DQor
DQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCWlmIChkZXZp
Y2VfdHlwZSA9PSBVU0IyMEhVQiB8fCBkZXZpY2Vfc3BlZWQgPCBTVVBFUl9TUEVFRCkgew0KKwkJ
bWhjZC0+aGNkX2hzX2N0eC0+bWFfZGV2c1twb3J0X251bWJlcl0ucG9ydF9zdGF0dXMgfD0NCisJ
CSAgICBVU0JfUE9SVF9TVEFUX0NPTk5FQ1RJT04gfCAoMSA8PA0KKwkJCQkJCVVTQl9QT1JUX0ZF
QVRfQ19DT05ORUNUSU9OKTsNCisNCisJCWlmIChkZXZpY2Vfc3BlZWQgPT0gTE9XX1NQRUVEKSB7
DQorCQkJbWhjZC0+aGNkX2hzX2N0eC0+bWFfZGV2c1twb3J0X251bWJlcl0ucG9ydF9zdGF0dXMg
fD0NCisJCQkgICAgTUFVU0JfUE9SVF8yMF9TVEFUVVNfTE9XX1NQRUVEOw0KKwkJCW1oY2QtPmhj
ZF9oc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJdLmRldl9zcGVlZCA9DQorCQkJICAgIExPV19T
UEVFRDsNCisJCX0gZWxzZSBpZiAoZGV2aWNlX3NwZWVkID09IEhJR0hfU1BFRUQpIHsNCisJCQlt
aGNkLT5oY2RfaHNfY3R4LT5tYV9kZXZzW3BvcnRfbnVtYmVyXS5wb3J0X3N0YXR1cyB8PQ0KKwkJ
CSAgICBNQVVTQl9QT1JUXzIwX1NUQVRVU19ISUdIX1NQRUVEOw0KKwkJCW1oY2QtPmhjZF9oc19j
dHgtPm1hX2RldnNbcG9ydF9udW1iZXJdLmRldl9zcGVlZCA9DQorCQkJICAgIEhJR0hfU1BFRUQ7
DQorCQl9DQorDQorCQloY2QgPSBtaGNkLT5oY2RfaHNfY3R4LT5oY2Q7DQorCQltaGNkLT5oY2Rf
aHNfY3R4LT5tYV9kZXZzW3BvcnRfbnVtYmVyXS5tYV9kZXYgPSBtYV9kZXY7DQorCX0gZWxzZSB7
DQorCQltaGNkLT5oY2Rfc3NfY3R4LT5tYV9kZXZzW3BvcnRfbnVtYmVyXS5wb3J0X3N0YXR1cyB8
PQ0KKwkJICAgIFVTQl9QT1JUX1NUQVRfQ09OTkVDVElPTiB8ICgxIDw8DQorCQkJCQkJVVNCX1BP
UlRfRkVBVF9DX0NPTk5FQ1RJT04pOw0KKwkJbWhjZC0+aGNkX3NzX2N0eC0+bWFfZGV2c1twb3J0
X251bWJlcl0uZGV2X3NwZWVkID0gU1VQRVJfU1BFRUQ7DQorDQorCQloY2QgPSBtaGNkLT5oY2Rf
c3NfY3R4LT5oY2Q7DQorCQltaGNkLT5oY2Rfc3NfY3R4LT5tYV9kZXZzW3BvcnRfbnVtYmVyXS5t
YV9kZXYgPSBtYV9kZXY7DQorCX0NCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbWhjZC0+bG9j
aywgZmxhZ3MpOw0KKw0KKwl1c2JfaGNkX3BvbGxfcmhfc3RhdHVzKGhjZCk7DQorfQ0KKw0KK3Zv
aWQgbWF1c2JfaGNkX2Rpc2Nvbm5lY3QoY29uc3QgdWludDE2X3QgcG9ydF9udW1iZXIsDQorCQkJ
ICBjb25zdCBlbnVtIG1hdXNiX2RldmljZV90eXBlIGRldmljZV90eXBlLA0KKwkJCSAgY29uc3Qg
ZW51bSBtYXVzYl9kZXZpY2Vfc3BlZWQgZGV2aWNlX3NwZWVkKQ0KK3sNCisJc3RydWN0IHVzYl9o
Y2QgKmhjZDsNCisJdW5zaWduZWQgbG9uZyBmbGFnczsNCisNCisJaWYgKHBvcnRfbnVtYmVyIDwg
MCB8fCBwb3J0X251bWJlciA+PSBOVU1CRVJfT0ZfUE9SVFMpIHsNCisJCW1hdXNiX3ByX2Vycigi
cG9ydCBudW1iZXIgb3V0IG9mIHJhbmdlLCBwb3J0X251bWJlcj0leCIsDQorCQkJICAgICBwb3J0
X251bWJlcik7DQorCQlyZXR1cm47DQorCX0NCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1oY2Qt
PmxvY2ssIGZsYWdzKTsNCisNCisJaWYgKGRldmljZV90eXBlID09IFVTQjIwSFVCIHx8IGRldmlj
ZV9zcGVlZCA8IFNVUEVSX1NQRUVEKSB7DQorCQltaGNkLT5oY2RfaHNfY3R4LT5tYV9kZXZzW3Bv
cnRfbnVtYmVyXS5wb3J0X3N0YXR1cyAmPQ0KKwkJCX4oVVNCX1BPUlRfU1RBVF9DT05ORUNUSU9O
KTsNCisJCW1oY2QtPmhjZF9oc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJdLnBvcnRfc3RhdHVz
ICY9DQorCQkJfihVU0JfUE9SVF9TVEFUX0VOQUJMRSk7DQorCQltaGNkLT5oY2RfaHNfY3R4LT5t
YV9kZXZzW3BvcnRfbnVtYmVyXS5wb3J0X3N0YXR1cyB8PQ0KKwkJCSgxIDw8IFVTQl9QT1JUX0ZF
QVRfQ19DT05ORUNUSU9OKTsNCisJCWhjZCA9IG1oY2QtPmhjZF9oc19jdHgtPmhjZDsNCisJfSBl
bHNlIHsNCisJCW1oY2QtPmhjZF9zc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJdLnBvcnRfc3Rh
dHVzICY9DQorCQkJfihVU0JfUE9SVF9TVEFUX0NPTk5FQ1RJT04pOw0KKwkJbWhjZC0+aGNkX3Nz
X2N0eC0+bWFfZGV2c1twb3J0X251bWJlcl0ucG9ydF9zdGF0dXMgJj0NCisJCQl+KFVTQl9QT1JU
X1NUQVRfRU5BQkxFKTsNCisJCW1oY2QtPmhjZF9zc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJd
LnBvcnRfc3RhdHVzIHw9DQorCQkJKDEgPDwgVVNCX1BPUlRfRkVBVF9DX0NPTk5FQ1RJT04pOw0K
KwkJaGNkID0gbWhjZC0+aGNkX3NzX2N0eC0+aGNkOw0KKwl9DQorDQorCXNwaW5fdW5sb2NrX2ly
cXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJaWYgKCFoY2QpDQorCQlyZXR1cm47DQor
DQorCXVzYl9oY2RfcG9sbF9yaF9zdGF0dXMoaGNkKTsNCit9DQorDQorc3RhdGljIGludCBtYXVz
Yl9oY2RfZ2V0X2ZyYW1lX251bWJlcihzdHJ1Y3QgdXNiX2hjZCAqaGNkKQ0KK3sNCisJcmV0dXJu
IDA7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfaGNkX3Jlc2V0KHN0cnVjdCB1c2JfaGNkICpo
Y2QpDQorew0KKwlpZiAodXNiX2hjZF9pc19wcmltYXJ5X2hjZChoY2QpKSB7DQorCQloY2QtPnNw
ZWVkID0gSENEX1VTQjI7DQorCQloY2QtPnNlbGYucm9vdF9odWItPnNwZWVkID0gVVNCX1NQRUVE
X0hJR0g7DQorCX0gZWxzZSB7DQorCQloY2QtPnNwZWVkID0gSENEX1VTQjM7DQorCQloY2QtPnNl
bGYucm9vdF9odWItPnNwZWVkID0gVVNCX1NQRUVEX1NVUEVSOw0KKwl9DQorCWhjZC0+c2VsZi5u
b19zZ19jb25zdHJhaW50ID0gMTsNCisJaGNkLT5zZWxmLnNnX3RhYmxlc2l6ZSA9IH4wOw0KKw0K
KwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9oY2Rfc3RhcnQoc3RydWN0IHVz
Yl9oY2QgKmhjZCkNCit7DQorCW1hdXNiX3ByX2luZm8oIiIpOw0KKw0KKwloY2QtPnBvd2VyX2J1
ZGdldCA9IDA7DQorCWhjZC0+dXNlc19uZXdfcG9sbGluZyA9IDE7DQorCXJldHVybiAwOw0KK30N
CisNCitzdGF0aWMgdm9pZCBtYXVzYl9oY2Rfc3RvcChzdHJ1Y3QgdXNiX2hjZCAqaGNkKQ0KK3sN
CisJbWF1c2JfcHJfZGVidWcoIk5vdCBpbXBsZW1lbnRlZCIpOw0KK30NCisNCitzdGF0aWMgaW50
IG1hdXNiX2hjZF9odWJfc3RhdHVzKHN0cnVjdCB1c2JfaGNkICpoY2QsIGNoYXIgKmJ1ZmYpDQor
ew0KKwlpbnQgcmV0dmFsOw0KKwlpbnQgY2hhbmdlZDsNCisJaW50IGk7DQorCXN0cnVjdCBodWJf
Y3R4ICpodWI7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorDQorCWh1YiA9IChzdHJ1Y3QgaHVi
X2N0eCAqKWhjZC0+aGNkX3ByaXY7DQorDQorCXJldHZhbCAgPSBESVZfUk9VTkRfVVAoTlVNQkVS
X09GX1BPUlRTICsgMSwgOCk7DQorCWNoYW5nZWQgPSAwOw0KKw0KKwltZW1zZXQoYnVmZiwgMCwg
cmV0dmFsKTsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisN
CisJaWYgKCFIQ0RfSFdfQUNDRVNTSUJMRShoY2QpKSB7DQorCQltYXVzYl9wcl9pbmZvKCJoY2Qg
bm90IGFjY2Vzc2libGUsIGhjZCBzcGVlZD0lZCIsIGhjZC0+c3BlZWQpOw0KKwkJc3Bpbl91bmxv
Y2tfaXJxcmVzdG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwkJcmV0dXJuIDA7DQorCX0NCisN
CisJZm9yIChpID0gMDsgaSA8IE5VTUJFUl9PRl9QT1JUUzsgKytpKSB7DQorCQlpZiAoKGh1Yi0+
bWFfZGV2c1tpXS5wb3J0X3N0YXR1cyAmIFBPUlRfQ19NQVNLKSkgew0KKwkJCWJ1ZmZbKGkgKyAx
KSAvIDhdIHw9IDEgPDwgKGkgKyAxKSAlIDg7DQorCQkJY2hhbmdlZCA9IDE7DQorCQl9DQorCX0N
CisNCisJbWF1c2JfcHJfaW5mbygiVXNiICVkLjAgOiBjaGFuZ2VkPSVkLCByZXR2YWw9JWQiLA0K
KwkJCShoY2QtPnNwZWVkID09IEhDRF9VU0IyKSA/IDIgOiAzLCBjaGFuZ2VkLCByZXR2YWwpOw0K
Kw0KKw0KKwlpZiAoKGhjZC0+c3RhdGUgPT0gSENfU1RBVEVfU1VTUEVOREVEKSAmJiAoY2hhbmdl
ZCA9PSAxKSkgew0KKwkJbWF1c2JfcHJfaW5mbygiaGNkIHN0YXRlIGlzIHN1c3BlbmRlZCIpOw0K
KwkJdXNiX2hjZF9yZXN1bWVfcm9vdF9odWIoaGNkKTsNCisJfQ0KKw0KKwlzcGluX3VubG9ja19p
cnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCXJldHVybiBjaGFuZ2VkID8gcmV0
dmFsIDogMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9oY2RfYnVzX3Jlc3VtZShzdHJ1Y3Qg
dXNiX2hjZCAqaGNkKQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFnczsNCisNCisJbWF1c2JfcHJf
aW5mbygiIik7DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQor
CWlmICghSENEX0hXX0FDQ0VTU0lCTEUoaGNkKSkgew0KKwkJbWF1c2JfcHJfaW5mbygiaGNkIG5v
dCBhY2Nlc3NpYmxlLCBoY2Qgc3BlZWQ9JWQiLCBoY2QtPnNwZWVkKTsNCisJCXNwaW5fdW5sb2Nr
X2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJCXJldHVybiAtRVNIVVRET1dOOw0K
Kwl9DQorCWhjZC0+c3RhdGUgPSBIQ19TVEFURV9SVU5OSU5HOw0KKwlzcGluX3VubG9ja19pcnFy
ZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCXJldHVybiAwOw0KK30NCisNCitzdGF0
aWMgaW50IG1hdXNiX2hjZF9idXNfc3VzcGVuZChzdHJ1Y3QgdXNiX2hjZCAqaGNkKQ0KK3sNCisJ
dW5zaWduZWQgbG9uZyBmbGFnczsNCisNCisJbWF1c2JfcHJfaW5mbygiIik7DQorDQorCXNwaW5f
bG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCWhjZC0+c3RhdGUgPSBIQ19TVEFU
RV9TVVNQRU5ERUQ7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdz
KTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfaGNkX2h1Yl9jb250
cm9sKHN0cnVjdCB1c2JfaGNkICpoY2QsIHVpbnQxNl90IHR5cGVSZXEsDQorCQkJCXVpbnQxNl90
IHdWYWx1ZSwgdWludDE2X3Qgd0luZGV4LCBjaGFyICpidWZmLA0KKwkJCQl1aW50MTZfdCB3TGVu
Z3RoKQ0KK3sNCisJaW50IHJldHZhbDsNCisJc3RydWN0IG1hdXNiX2hjZCAqbWhjZDsNCisJc3Ry
dWN0IGh1Yl9jdHgJICpodWI7DQorCXVuc2lnbmVkIGxvbmcJIGZsYWdzOw0KKwlib29sIGludmFs
aWRfcmhwb3J0ID0gZmFsc2U7DQorDQorCWh1YiAgPSAoc3RydWN0IGh1Yl9jdHggKiloY2QtPmhj
ZF9wcml2Ow0KKwltaGNkID0gaHViLT5taGNkOw0KKw0KKwl3SW5kZXggPSAoKF9fdTgpICh3SW5k
ZXggJiAweDAwZmYpKTsNCisJcmV0dmFsID0gMDsNCisNCisJaWYgKHdJbmRleCA8IDEgfHwgd0lu
ZGV4ID4gTlVNQkVSX09GX1BPUlRTKQ0KKwkJaW52YWxpZF9yaHBvcnQgPSB0cnVlOw0KKw0KKwlt
YXVzYl9wcl9pbmZvKCJUeXBlUmVxPSVkIiwgdHlwZVJlcSk7DQorDQorCXNwaW5fbG9ja19pcnFz
YXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCWlmICghSENEX0hXX0FDQ0VTU0lCTEUoaGNk
KSkgew0KKwkJbWF1c2JfcHJfaW5mbygiaGNkIG5vdCBhY2Nlc3NpYmxlLCBoY2Qgc3BlZWQ9JWQi
LCBoY2QtPnNwZWVkKTsNCisJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZs
YWdzKTsNCisJCXJldHVybiAtRVRJTUVET1VUOw0KKwl9DQorDQorCXN3aXRjaCAodHlwZVJlcSkg
ew0KKwljYXNlIENsZWFySHViRmVhdHVyZToNCisJCWJyZWFrOw0KKwljYXNlIENsZWFyUG9ydEZl
YXR1cmU6DQorCQlpZiAoaW52YWxpZF9yaHBvcnQpDQorCQkJZ290byBpbnZhbGlkX3BvcnQ7DQor
DQorCQltYXVzYl9jbGVhcl9wb3J0X2ZlYXR1cmUoaGNkLCB0eXBlUmVxLCB3VmFsdWUsIHdJbmRl
eCwgYnVmZiwNCisJCQkJCSB3TGVuZ3RoKTsNCisJCWJyZWFrOw0KKwljYXNlIERldmljZVJlcXVl
c3QgfCBVU0JfUkVRX0dFVF9ERVNDUklQVE9SOg0KKwkJbWVtY3B5KGJ1ZmYsICZ1c2IzX2Jvc19k
ZXNjLCBzaXplb2YodXNiM19ib3NfZGVzYykpOw0KKwkJcmV0dmFsID0gc2l6ZW9mKHVzYjNfYm9z
X2Rlc2MpOw0KKwkJYnJlYWs7DQorCWNhc2UgR2V0SHViRGVzY3JpcHRvcjoNCisJCW1hdXNiX2dl
dF9odWJfZGVzY3JpcHRvcihoY2QsIHR5cGVSZXEsIHdWYWx1ZSwgd0luZGV4LCBidWZmLA0KKwkJ
CQkJIHdMZW5ndGgpOw0KKwkJYnJlYWs7DQorCWNhc2UgR2V0SHViU3RhdHVzOg0KKwkJbWF1c2Jf
Z2V0X2h1Yl9zdGF0dXMoaGNkLCB0eXBlUmVxLCB3VmFsdWUsIHdJbmRleCwgYnVmZiwNCisJCQkJ
ICAgICB3TGVuZ3RoKTsNCisJCWJyZWFrOw0KKwljYXNlIEdldFBvcnRTdGF0dXM6DQorCQlpZiAo
aW52YWxpZF9yaHBvcnQpDQorCQkJZ290byBpbnZhbGlkX3BvcnQ7DQorDQorCQltYXVzYl9nZXRf
cG9ydF9zdGF0dXMoaGNkLCB0eXBlUmVxLCB3VmFsdWUsIHdJbmRleCwgYnVmZiwNCisJCQkJICAg
ICAgd0xlbmd0aCk7DQorCQlicmVhazsNCisJY2FzZSBTZXRIdWJGZWF0dXJlOg0KKwkJcmV0dmFs
ID0gLUVQSVBFOw0KKwkJYnJlYWs7DQorCWNhc2UgU2V0UG9ydEZlYXR1cmU6DQorCQlpZiAoaW52
YWxpZF9yaHBvcnQpDQorCQkJZ290byBpbnZhbGlkX3BvcnQ7DQorDQorCQltYXVzYl9zZXRfcG9y
dF9mZWF0dXJlKGhjZCwgdHlwZVJlcSwgd1ZhbHVlLCB3SW5kZXgsIGJ1ZmYsDQorCQkJCSAgICAg
ICB3TGVuZ3RoKTsNCisJCWJyZWFrOw0KKwlkZWZhdWx0Og0KKwkJcmV0dmFsID0gLUVQSVBFOw0K
Kwl9DQorDQoraW52YWxpZF9wb3J0Og0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5s
b2NrLCBmbGFncyk7DQorCXJldHVybiByZXR2YWw7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2Jf
dmFsaWRhdGVfdXJiKHN0cnVjdCB1cmIgKnVyYikNCit7DQorCWlmICghdXJiLT5lcC0+aGNwcml2
KSB7DQorCQltYXVzYl9wcl9lcnIoInVyYi0+ZXAtPmhjcHJpdiBpcyBOVUxMIik7DQorCQlyZXR1
cm4gLUVJTlZBTDsNCisJfQ0KKw0KKwlpZiAoIXVyYi0+ZXAtPmVuYWJsZWQpIHsNCisJCW1hdXNi
X3ByX2VycigiRW5kcG9pbnQgbm90IGVuYWJsZWQiKTsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9
DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2hjZF91cmJfZW5xdWV1ZShz
dHJ1Y3QgdXNiX2hjZCAqaGNkLCBzdHJ1Y3QgdXJiICp1cmIsDQorCQkJCWdmcF90IG1lbV9mbGFn
cykNCit7DQorCXN0cnVjdCBtYXVzYl9lbmRwb2ludF9jdHggKmVuZHBvaW50X2N0eDsNCisJc3Ry
dWN0IG1hdXNiX2RldmljZQkgICptYV9kZXY7DQorCXN0cnVjdCBtYXVzYl91cmJfY3R4CSAgKnVy
Yl9jdHg7DQorCWludCBzdGF0dXMgPSAwOw0KKw0KKwlpZiAobWF1c2JfdmFsaWRhdGVfdXJiKHVy
YikgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkhwYWwgdXJiIGVucXVldWUgZmFpbGVkIik7DQor
CQlyZXR1cm4gLUVQUk9UTzsNCisJfQ0KKw0KKwllbmRwb2ludF9jdHggPSB1cmItPmVwLT5oY3By
aXY7DQorCW1hX2RldiA9IGVuZHBvaW50X2N0eC0+bWFfZGV2Ow0KKw0KKwlpZiAoYXRvbWljX3Jl
YWQoJm1hX2Rldi0+dW5yZXNwb25zaXZlX2NsaWVudCkpIHsNCisJCW1hdXNiX3ByX2VycigiQ2xp
ZW50IGlzIG5vdCByZXNwb25zaXZlIGFueW1vcmUgLSBmaW5pc2ggdXJiIGltbWVkaWF0ZWx5Iik7
DQorCQlyZXR1cm4gLUVIT1NURE9XTjsNCisJfQ0KKw0KKwl1cmItPmhjcHJpdiA9IGhjZDsNCisN
CisJbWF1c2JfcHJfZGVidWcoImVwX2hhbmRsZT0lI3gsIGRldl9oYW5kbGU9JSN4LCB1cmJfcmVq
ZWN0PSVkIiwNCisJCQllbmRwb2ludF9jdHgtPmVwX2hhbmRsZSwgZW5kcG9pbnRfY3R4LT5kZXZf
aGFuZGxlLA0KKwkJCWF0b21pY19yZWFkKCZ1cmItPnJlamVjdCkpOw0KKw0KKwlzdGF0dXMgPSBt
YXVzYl9pbnNlcnRfdXJiX2luX3RyZWUodXJiLCB0cnVlKTsNCisJaWYgKHN0YXR1cykgew0KKwkJ
bWF1c2JfcHJfZXJyKCJIcGFsIHVyYiBlbnF1ZXVlIGZhaWxlZCIpOw0KKwkJcmV0dXJuIHN0YXR1
czsNCisJfQ0KKw0KKwlhdG9taWNfaW5jKCZ1cmItPnVzZV9jb3VudCk7DQorDQorCW1hdXNiX3By
aW50X3VyYih1cmIpOw0KKw0KKwkvKg0KKwkgKiBNYXNraW5nIFVSQl9TSE9SVF9OT1RfT0sgZmxh
ZyBhcyBTQ1NJIGRyaXZlciBpcyBhZGRpbmcgaXQgd2hlcmUgaXQNCisJICogc2hvdWxkIG5vdCwg
c28gaXQgaXMgYnJlYWtpbmcgdGhlIFVTQiBkcml2ZSBvbiB0aGUgbGludXgNCisJICovDQorCXVy
Yi0+dHJhbnNmZXJfZmxhZ3MgJj0gflVSQl9TSE9SVF9OT1RfT0s7DQorDQorCXN0YXR1cyA9IG1h
dXNiX2RhdGFfcmVxX2VucXVldWVfZXZlbnQobWFfZGV2LCBlbmRwb2ludF9jdHgtPmVwX2hhbmRs
ZSwNCisJCQkJCSAgICAgIHVyYik7DQorDQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQl1cmJfY3R4
ID0gbWF1c2JfdW5saW5rX2FuZF9kZWxldGVfdXJiX2Zyb21fdHJlZSh1cmIsIHN0YXR1cyk7DQor
CQlhdG9taWNfZGVjKCZ1cmItPnVzZV9jb3VudCk7DQorCQlpZiAodXJiX2N0eCkgew0KKwkJCW1h
dXNiX3VuaW5pdF9kYXRhX2l0ZXJhdG9yKCZ1cmJfY3R4LT5pdGVyYXRvcik7DQorCQkJa2ZyZWUo
dXJiX2N0eCk7DQorCQl9DQorCX0NCisNCisJcmV0dXJuIHN0YXR1czsNCit9DQorDQorc3RhdGlj
IGludCBtYXVzYl9oY2RfdXJiX2RlcXVldWUoc3RydWN0IHVzYl9oY2QgKmhjZCwgc3RydWN0IHVy
YiAqdXJiLA0KKwkJCQlpbnQgc3RhdHVzKQ0KK3sNCisJc3RydWN0IG1hdXNiX2VuZHBvaW50X2N0
eCAqZW5kcG9pbnRfY3R4Ow0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlCSAgKm1hX2RldjsNCisJc3Ry
dWN0IG1hdXNiX3VyYl9jdHgJICAqdXJiX2N0eDsNCisNCisJbWF1c2JfcHJfaW5mbygiVXJiPSVw
IiwgdXJiKTsNCisNCisJdXJiX2N0eCA9IG1hdXNiX3VubGlua19hbmRfZGVsZXRlX3VyYl9mcm9t
X3RyZWUodXJiLCBzdGF0dXMpOw0KKwlpZiAoIXVyYl9jdHgpIHsNCisJCW1hdXNiX3ByX3dhcm4o
IlVyYj0lcCBpcyBub3QgaW4gdHJlZSIsIHVyYik7DQorCQlyZXR1cm4gMDsNCisJfQ0KKw0KKwll
bmRwb2ludF9jdHggPSB1cmItPmVwLT5oY3ByaXY7DQorCW1hX2RldgkgICAgID0gZW5kcG9pbnRf
Y3R4LT5tYV9kZXY7DQorDQorCXF1ZXVlX3dvcmsobWFfZGV2LT53b3JrcSwgJnVyYl9jdHgtPndv
cmspOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQordm9pZCBtYXVzYl9oY2RfdXJiX2NvbXBsZXRl
KHN0cnVjdCB1cmIgKnVyYiwgdWludDMyX3QgYWN0dWFsX2xlbmd0aCwgaW50IHN0YXR1cykNCit7
DQorCXN0cnVjdCBtYXVzYl9lbmRwb2ludF9jdHggKmVuZHBvaW50X2N0eDsNCisJc3RydWN0IG1h
dXNiX3VyYl9jdHggKnVyYl9jdHggPQ0KKwkJbWF1c2JfdW5saW5rX2FuZF9kZWxldGVfdXJiX2Zy
b21fdHJlZSh1cmIsIHN0YXR1cyk7DQorDQorCWlmICh1cmJfY3R4KSB7DQorDQorCQltYXVzYl91
bmluaXRfZGF0YV9pdGVyYXRvcigmdXJiX2N0eC0+aXRlcmF0b3IpOw0KKwkJa2ZyZWUodXJiX2N0
eCk7DQorDQorCQllbmRwb2ludF9jdHgJICAgPSB1cmItPmVwLT5oY3ByaXY7DQorCQl1cmItPnN0
YXR1cwkgICA9IHN0YXR1czsNCisJCXVyYi0+YWN0dWFsX2xlbmd0aCA9IGFjdHVhbF9sZW5ndGg7
DQorDQorCQlpZiAoZW5kcG9pbnRfY3R4KQ0KKwkJCW1hdXNiX3ByX2RlYnVnKCJlcF9oYW5kbGU9
JSN4OyB1cmItPnN0YXR1cz0lZDsgdXJiLT5hY3RfbGVuPSVkLCBkZXZfaGFuZGxlPSUjeCIsDQor
CQkJCQllbmRwb2ludF9jdHgtPmVwX2hhbmRsZSwgdXJiLT5zdGF0dXMsDQorCQkJCQl1cmItPmFj
dHVhbF9sZW5ndGgsDQorCQkJCQllbmRwb2ludF9jdHgtPmRldl9oYW5kbGUpOw0KKw0KKwkJYXRv
bWljX2RlYygmdXJiLT51c2VfY291bnQpOw0KKwkJdXNiX2hjZF9naXZlYmFja191cmIodXJiLT5o
Y3ByaXYsIHVyYiwgdXJiLT5zdGF0dXMpOw0KKwkJcmV0dXJuOw0KKwl9DQorfQ0KKw0KK2ludCBt
YXVzYl9wcm9iZShzdHJ1Y3QgZGV2aWNlICpkZXYpDQorew0KKwlzdHJ1Y3QgbWF1c2JfaGNkICpt
YXVzYl9oY2Q7DQorCXN0cnVjdCB1c2JfaGNkCSAqaGNkX3NzOw0KKwlzdHJ1Y3QgdXNiX2hjZAkg
KmhjZF9oczsNCisJaW50IHJldDsNCisNCisJbWF1c2JfaGNkID0gZGV2X2dldF9kcnZkYXRhKGRl
dik7DQorCXNwaW5fbG9ja19pbml0KCZtYXVzYl9oY2QtPmxvY2spOw0KKw0KKwloY2RfaHMgPSB1
c2JfY3JlYXRlX2hjZCgmbWF1c2JfaGNfZHJpdmVyLCBkZXYsIGRldl9uYW1lKGRldikpOw0KKwlp
ZiAoIWhjZF9ocykgew0KKwkJbWF1c2JfcHJfZXJyKCJ1c2JfY3JlYXRlX2hjZCBmYWlsZWQiKTsN
CisJCXJldHVybiAtRU5PTUVNOw0KKwl9DQorCWhjZF9ocy0+aGFzX3R0ID0gMTsNCisJbWF1c2Jf
aGNkLT5oY2RfaHNfY3R4CSAgICA9IChzdHJ1Y3QgaHViX2N0eCAqKWhjZF9ocy0+aGNkX3ByaXY7
DQorCW1hdXNiX2hjZC0+aGNkX2hzX2N0eC0+bWhjZCA9IG1hdXNiX2hjZDsNCisJbWF1c2JfaGNk
LT5oY2RfaHNfY3R4LT5oY2QgID0gaGNkX2hzOw0KKwltZW1zZXQobWF1c2JfaGNkLT5oY2RfaHNf
Y3R4LT5tYV9kZXZzLCAwLA0KKwkgICAgICAgc2l6ZW9mKHN0cnVjdCBtYXVzYl9kZXYpICogTlVN
QkVSX09GX1BPUlRTKTsNCisNCisJcmV0ID0gdXNiX2FkZF9oY2QoaGNkX2hzLCAwLCAwKTsNCisJ
aWYgKHJldCkgew0KKwkJbWF1c2JfcHJfZXJyKCJ1c2JfYWRkX2hjZCBmYWlsZWQiKTsNCisJCWdv
dG8gcHV0X2hjZF9oczsNCisJfQ0KKw0KKwloY2Rfc3MgPSB1c2JfY3JlYXRlX3NoYXJlZF9oY2Qo
Jm1hdXNiX2hjX2RyaXZlciwgZGV2LCBkZXZfbmFtZShkZXYpLA0KKwkJCQkgICAgICAgaGNkX2hz
KTsNCisJaWYgKCFoY2Rfc3MpIHsNCisJCW1hdXNiX3ByX2VycigidXNiX2NyZWF0ZV9zaGFyZWRf
aGNkIGZhaWxlZCIpOw0KKwkJcmV0ID0gLUVOT01FTTsNCisJCWdvdG8gcmVtb3ZlX2hjZF9oczsN
CisJfQ0KKwltYXVzYl9oY2QtPmhjZF9zc19jdHgJICAgID0gKHN0cnVjdCBodWJfY3R4ICopaGNk
X3NzLT5oY2RfcHJpdjsNCisJbWF1c2JfaGNkLT5oY2Rfc3NfY3R4LT5taGNkID0gbWF1c2JfaGNk
Ow0KKwltYXVzYl9oY2QtPmhjZF9zc19jdHgtPmhjZCAgPSBoY2Rfc3M7DQorDQorCW1lbXNldCht
YXVzYl9oY2QtPmhjZF9zc19jdHgtPm1hX2RldnMsIDAsDQorCSAgICAgICBzaXplb2Yoc3RydWN0
IG1hdXNiX2RldikgKiBOVU1CRVJfT0ZfUE9SVFMpOw0KKw0KKwlyZXQgPSB1c2JfYWRkX2hjZCho
Y2Rfc3MsIDAsIDApOw0KKwlpZiAocmV0KSB7DQorCQltYXVzYl9wcl9lcnIoInVzYl9hZGRfaGNk
IGZhaWxlZCIpOw0KKwkJZ290byBwdXRfaGNkX3NzOw0KKwl9DQorDQorCXJldHVybiByZXQ7DQor
DQorcHV0X2hjZF9zczoNCisJdXNiX3B1dF9oY2QoaGNkX3NzKTsNCityZW1vdmVfaGNkX2hzOg0K
Kwl1c2JfcmVtb3ZlX2hjZChoY2RfaHMpOw0KK3B1dF9oY2RfaHM6DQorCXVzYl9wdXRfaGNkKGhj
ZF9ocyk7DQorCW1hdXNiX2hjZC0+aGNkX2hzX2N0eCA9IE5VTEw7DQorCW1hdXNiX2hjZC0+aGNk
X3NzX2N0eCA9IE5VTEw7DQorCXJldHVybiByZXQ7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNi
X2dldF9odWJfZGVzY3JpcHRvcihzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1aW50MTZfdCB0eXBlUmVx
LA0KKwkJCQkgICAgIHVpbnQxNl90IHdWYWx1ZSwgdWludDE2X3Qgd0luZGV4LA0KKwkJCQkgICAg
IGNoYXIgKmJ1ZmYsIHVpbnQxNl90IHdMZW5ndGgpDQorew0KKwlpbnQgd2lkdGg7DQorCXN0cnVj
dCB1c2JfaHViX2Rlc2NyaXB0b3IgKmRlc2MgPSAoc3RydWN0IHVzYl9odWJfZGVzY3JpcHRvciAq
KWJ1ZmY7DQorDQorCW1lbXNldChkZXNjLCAwLCBzaXplb2Yoc3RydWN0IHVzYl9odWJfZGVzY3Jp
cHRvcikpOw0KKw0KKwlpZiAoaGNkLT5zcGVlZCA9PSBIQ0RfVVNCMykgew0KKwkJZGVzYy0+YkRl
c2NyaXB0b3JUeXBlCSAgID0gVVNCX0RUX1NTX0hVQjsNCisJCWRlc2MtPmJEZXNjTGVuZ3RoCSAg
ID0gMTI7DQorCQlkZXNjLT53SHViQ2hhcmFjdGVyaXN0aWNzICA9DQorCQkgICAgY3B1X3RvX2xl
MTYoSFVCX0NIQVJfSU5EVl9QT1JUX0xQU00gfCBIVUJfQ0hBUl9DT01NT05fT0NQTSk7DQorCQlk
ZXNjLT5iTmJyUG9ydHMJCSAgID0gTlVNQkVSX09GX1BPUlRTOw0KKwkJZGVzYy0+dS5zcy5iSHVi
SGRyRGVjTGF0ICAgPSAweDA0Ow0KKwkJZGVzYy0+dS5zcy5EZXZpY2VSZW1vdmFibGUgPSAweGZm
ZmY7DQorCX0gZWxzZSB7DQorCQlkZXNjLT5iRGVzY3JpcHRvclR5cGUJICA9IFVTQl9EVF9IVUI7
DQorCQlkZXNjLT53SHViQ2hhcmFjdGVyaXN0aWNzID0NCisJCSAgICBjcHVfdG9fbGUxNihIVUJf
Q0hBUl9JTkRWX1BPUlRfTFBTTSB8IEhVQl9DSEFSX0NPTU1PTl9PQ1BNKTsNCisJCWRlc2MtPmJO
YnJQb3J0cwkJICA9IE5VTUJFUl9PRl9QT1JUUzsNCisJCXdpZHRoCQkJICA9IGRlc2MtPmJOYnJQ
b3J0cyAvIDggKyAxOw0KKwkJZGVzYy0+YkRlc2NMZW5ndGgJICA9IFVTQl9EVF9IVUJfTk9OVkFS
X1NJWkUgKyAyICogd2lkdGg7DQorDQorCQltZW1zZXQoJmRlc2MtPnUuaHMuRGV2aWNlUmVtb3Zh
YmxlWzBdLCAwLCB3aWR0aCk7DQorCQltZW1zZXQoJmRlc2MtPnUuaHMuRGV2aWNlUmVtb3ZhYmxl
W3dpZHRoXSwgMHhmZiwgd2lkdGgpOw0KKwl9DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX3Nl
dF9wb3J0X2ZlYXR1cmUoc3RydWN0IHVzYl9oY2QgKmhjZCwgdWludDE2X3QgdHlwZVJlcSwNCisJ
CQkJICAgdWludDE2X3Qgd1ZhbHVlLCB1aW50MTZfdCB3SW5kZXgsIGNoYXIgKmJ1ZmYsDQorCQkJ
CSAgIHVpbnQxNl90IHdMZW5ndGgpDQorew0KKwlzdHJ1Y3QgaHViX2N0eCAqaHViID0gKHN0cnVj
dCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisNCisJd0luZGV4ID0gKChfX3U4KSAod0luZGV4
ICYgMHgwMGZmKSk7DQorDQorCXN3aXRjaCAod1ZhbHVlKSB7DQorCWNhc2UgVVNCX1BPUlRfRkVB
VF9MSU5LX1NUQVRFOg0KKwkJbWF1c2JfcHJfaW5mbygiVVNCX1BPUlRfRkVBVF9MSU5LX1NUQVRF
Iik7DQorCQlpZiAoaGNkLT5zcGVlZCA9PSBIQ0RfVVNCMykgew0KKwkJCWlmICgoaHViLT5tYV9k
ZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVzICYNCisJCQkgICAgIFVTQl9TU19QT1JUX1NUQVRf
UE9XRVIpICE9IDApIHsNCisJCQkJaHViLT5tYV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVz
IHw9DQorCQkJCSAgICAoMSA8PCB3VmFsdWUpOw0KKwkJCX0NCisJCX0gZWxzZSB7DQorCQkJaWYg
KChodWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0dXMgJg0KKwkJCSAgICAgVVNCX1BP
UlRfU1RBVF9QT1dFUikgIT0gMCkgew0KKwkJCQlodWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9y
dF9zdGF0dXMgfD0NCisJCQkJICAgICgxIDw8IHdWYWx1ZSk7DQorCQkJfQ0KKwkJfQ0KKwkJYnJl
YWs7DQorCWNhc2UgVVNCX1BPUlRfRkVBVF9VMV9USU1FT1VUOg0KKwljYXNlIFVTQl9QT1JUX0ZF
QVRfVTJfVElNRU9VVDoNCisJCWJyZWFrOw0KKwljYXNlIFVTQl9QT1JUX0ZFQVRfU1VTUEVORDoN
CisJCWJyZWFrOw0KKwljYXNlIFVTQl9QT1JUX0ZFQVRfUE9XRVI6DQorCQltYXVzYl9wcl9pbmZv
KCJVU0JfUE9SVF9GRUFUX1BPV0VSIik7DQorDQorCQlpZiAoaGNkLT5zcGVlZCA9PSBIQ0RfVVNC
Mykgew0KKwkJCWh1Yi0+bWFfZGV2c1t3SW5kZXggLSAxXS5wb3J0X3N0YXR1cyB8PQ0KKwkJCSAg
ICBVU0JfU1NfUE9SVF9TVEFUX1BPV0VSOw0KKwkJfSBlbHNlIHsNCisJCQlodWItPm1hX2RldnNb
d0luZGV4IC0gMV0ucG9ydF9zdGF0dXMgfD0NCisJCQkgICAgVVNCX1BPUlRfU1RBVF9QT1dFUjsN
CisJCX0NCisJCWJyZWFrOw0KKwljYXNlIFVTQl9QT1JUX0ZFQVRfQkhfUE9SVF9SRVNFVDoNCisJ
CW1hdXNiX3ByX2luZm8oIlVTQl9QT1JUX0ZFQVRfQkhfUE9SVF9SRVNFVCIpOw0KKwkJLyogZmFs
bCB0aHJvdWdoICovDQorCWNhc2UgVVNCX1BPUlRfRkVBVF9SRVNFVDoNCisJCW1hdXNiX3ByX2lu
Zm8oIlVTQl9QT1JUX0ZFQVRfUkVTRVQgaGNkLT5zcGVlZD0lZCIsIGhjZC0+c3BlZWQpOw0KKw0K
KwkJaWYgKGhjZC0+c3BlZWQgPT0gSENEX1VTQjMpIHsNCisJCQlodWItPm1hX2RldnNbd0luZGV4
IC0gMV0ucG9ydF9zdGF0dXMgPSAwOw0KKwkJCWh1Yi0+bWFfZGV2c1t3SW5kZXggLSAxXS5wb3J0
X3N0YXR1cyA9DQorCQkJICAgIChVU0JfU1NfUE9SVF9TVEFUX1BPV0VSIHwNCisJCQkgICAgIFVT
Ql9QT1JUX1NUQVRfQ09OTkVDVElPTiB8IFVTQl9QT1JUX1NUQVRfUkVTRVQpOw0KKwkJfSBlbHNl
IGlmIChodWItPm1hX2RldnNbd0luZGV4IC0NCisJCQkJCTFdLnBvcnRfc3RhdHVzICYgVVNCX1BP
UlRfU1RBVF9FTkFCTEUpIHsNCisJCQlodWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0
dXMgJj0NCisJCQkgICAgfihVU0JfUE9SVF9TVEFUX0VOQUJMRSB8DQorCQkJICAgICAgVVNCX1BP
UlRfU1RBVF9MT1dfU1BFRUQgfA0KKwkJCSAgICAgIFVTQl9QT1JUX1NUQVRfSElHSF9TUEVFRCk7
DQorCQl9DQorCQkvKiBmYWxsIHRocm91Z2ggKi8NCisJZGVmYXVsdDoNCisJCW1hdXNiX3ByX2lu
Zm8oIkRlZmF1bHQgd1ZhbHVlPSVkIiwgd1ZhbHVlKTsNCisNCisJCWlmIChoY2QtPnNwZWVkID09
IEhDRF9VU0IzKSB7DQorCQkJaWYgKChodWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0
dXMgJg0KKwkJCSAgICAgVVNCX1NTX1BPUlRfU1RBVF9QT1dFUikgIT0gMCkgew0KKwkJCQlodWIt
Pm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0dXMgfD0NCisJCQkJICAgICgxIDw8IHdWYWx1
ZSk7DQorCQkJfQ0KKwkJfSBlbHNlIHsNCisJCQlpZiAoKGh1Yi0+bWFfZGV2c1t3SW5kZXggLSAx
XS5wb3J0X3N0YXR1cyAmDQorCQkJICAgICBVU0JfUE9SVF9TVEFUX1BPV0VSKSAhPSAwKSB7DQor
CQkJCWh1Yi0+bWFfZGV2c1t3SW5kZXggLSAxXS5wb3J0X3N0YXR1cyB8PQ0KKwkJCQkgICAgKDEg
PDwgd1ZhbHVlKTsNCisJCQl9DQorCQl9DQorCX0NCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2Jf
Z2V0X3BvcnRfc3RhdHVzKHN0cnVjdCB1c2JfaGNkICpoY2QsIHVpbnQxNl90IHR5cGVSZXEsDQor
CQkJCSAgdWludDE2X3Qgd1ZhbHVlLCB1aW50MTZfdCB3SW5kZXgsIGNoYXIgKmJ1ZmYsDQorCQkJ
CSAgdWludDE2X3Qgd0xlbmd0aCkNCit7DQorCXVpbnQ4X3QgZGV2X3NwZWVkICAgPSAwOw0KKwlz
dHJ1Y3QgaHViX2N0eCAqaHViID0gKHN0cnVjdCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisN
CisJd0luZGV4ID0gKChfX3U4KSAod0luZGV4ICYgMHgwMGZmKSk7DQorDQorCWlmICgoaHViLT5t
YV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVzICYNCisJCQkJKDEgPDwgVVNCX1BPUlRfRkVB
VF9SRVNFVCkpICE9IDApIHsNCisJCW1hdXNiX3ByX2luZm8oIkZpbmlzaGVkIHJlc2V0IGhjZC0+
c3BlZWQ9JWQiLCBoY2QtPnNwZWVkKTsNCisNCisJCWRldl9zcGVlZCA9IGh1Yi0+bWFfZGV2c1t3
SW5kZXggLSAxXS5kZXZfc3BlZWQ7DQorCQlzd2l0Y2ggKGRldl9zcGVlZCkgew0KKwkJY2FzZSBM
T1dfU1BFRUQ6DQorCQkJaHViLT5tYV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVzIHw9DQor
CQkJICAgIFVTQl9QT1JUX1NUQVRfTE9XX1NQRUVEOw0KKwkJCWJyZWFrOw0KKwkJY2FzZSBISUdI
X1NQRUVEOg0KKwkJCWh1Yi0+bWFfZGV2c1t3SW5kZXggLSAxXS5wb3J0X3N0YXR1cyB8PQ0KKwkJ
CSAgICBVU0JfUE9SVF9TVEFUX0hJR0hfU1BFRUQ7DQorCQkJYnJlYWs7DQorCQl9DQorDQorCQlo
dWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0dXMgfD0NCisJCSAgICAoMSA8PCBVU0Jf
UE9SVF9GRUFUX0NfUkVTRVQpIHwgVVNCX1BPUlRfU1RBVF9FTkFCTEU7DQorCQlodWItPm1hX2Rl
dnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0dXMgJj0NCisJCSAgICB+KDEgPDwgVVNCX1BPUlRfRkVB
VF9SRVNFVCk7DQorDQorCX0NCisNCisJKChfX2xlMTYgKikgYnVmZilbMF0gPQ0KKwkgICAgY3B1
X3RvX2xlMTYoaHViLT5tYV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVzKTsNCisJKChfX2xl
MTYgKikgYnVmZilbMV0gPQ0KKwkgICAgY3B1X3RvX2xlMTYoaHViLT5tYV9kZXZzW3dJbmRleCAt
IDFdLnBvcnRfc3RhdHVzID4+IDE2KTsNCisNCisJbWF1c2JfcHJfaW5mbygicG9ydF9zdGF0dXM9
JWQiLCBodWItPm1hX2RldnNbd0luZGV4IC0gMV0ucG9ydF9zdGF0dXMpOw0KK30NCisNCitzdGF0
aWMgdm9pZCBtYXVzYl9jbGVhcl9wb3J0X2ZlYXR1cmUoc3RydWN0IHVzYl9oY2QgKmhjZCwgdWlu
dDE2X3QgdHlwZVJlcSwNCisJCQkJICAgICB1aW50MTZfdCB3VmFsdWUsIHVpbnQxNl90IHdJbmRl
eCwNCisJCQkJICAgICBjaGFyICpidWZmLCB1aW50MTZfdCB3TGVuZ3RoKQ0KK3sNCisJc3RydWN0
IGh1Yl9jdHggKmh1YiA9IChzdHJ1Y3QgaHViX2N0eCAqKWhjZC0+aGNkX3ByaXY7DQorDQorCXdJ
bmRleCA9ICgoX191OCkgKHdJbmRleCAmIDB4MDBmZikpOw0KKw0KKwlzd2l0Y2ggKHdWYWx1ZSkg
ew0KKwljYXNlIFVTQl9QT1JUX0ZFQVRfU1VTUEVORDoNCisJCWJyZWFrOw0KKwljYXNlIFVTQl9Q
T1JUX0ZFQVRfUE9XRVI6DQorCQltYXVzYl9wcl9pbmZvKCJVU0JfUE9SVF9GRUFUX1BPV0VSIik7
DQorDQorCQlpZiAoaGNkLT5zcGVlZCA9PSBIQ0RfVVNCMykgew0KKwkJCWh1Yi0+bWFfZGV2c1t3
SW5kZXggLSAxXS5wb3J0X3N0YXR1cyAmPQ0KKwkJCSAgICB+VVNCX1NTX1BPUlRfU1RBVF9QT1dF
UjsNCisJCX0gZWxzZSB7DQorCQkJaHViLT5tYV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVz
ICY9DQorCQkJICAgIH5VU0JfUE9SVF9TVEFUX1BPV0VSOw0KKwkJfQ0KKwkJYnJlYWs7DQorCWNh
c2UgVVNCX1BPUlRfRkVBVF9SRVNFVDoNCisNCisJY2FzZSBVU0JfUE9SVF9GRUFUX0NfUkVTRVQ6
DQorDQorCWRlZmF1bHQ6DQorCQltYXVzYl9wcl9pbmZvKCJEZWZhdWx0IHdWYWx1ZTogJWQiLCB3
VmFsdWUpOw0KKw0KKwkJaHViLT5tYV9kZXZzW3dJbmRleCAtIDFdLnBvcnRfc3RhdHVzICY9IH4o
MSA8PCB3VmFsdWUpOw0KKwl9DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2dldF9odWJfc3Rh
dHVzKHN0cnVjdCB1c2JfaGNkICpoY2QsIHVpbnQxNl90IHR5cGVSZXEsDQorCQkJCSB1aW50MTZf
dCB3VmFsdWUsIHVpbnQxNl90IHdJbmRleCwgY2hhciAqYnVmZiwNCisJCQkJIHVpbnQxNl90IHdM
ZW5ndGgpDQorew0KKwltYXVzYl9wcl9pbmZvKCIiKTsNCisJKih1aW50MzJfdCAqKSBidWZmID0g
Y3B1X3RvX2xlMzIoMCk7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfYWxsb2NfZGV2KHN0cnVj
dCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpDQorew0KKwltYXVzYl9wcl9p
bmZvKCJVc2IgZGV2aWNlPSVwIiwgZGV2KTsNCisNCisJcmV0dXJuIDE7DQorfQ0KKw0KK3N0YXRp
YyB2b2lkIG1hdXNiX2ZyZWVfZGV2KHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2
aWNlICpkZXYpDQorew0KKwlpbnQ4X3QgIHBvcnRfbnVtYmVyID0gZ2V0X3Jvb3RfaHViX3BvcnRf
bnVtYmVyKGRldik7DQorCWludDMyX3QgZGV2X2hhbmRsZTsNCisJaW50CXN0YXR1cyA9IDA7DQor
CXVuc2lnbmVkIGxvbmcJIGZsYWdzOw0KKwlzdHJ1Y3QgaHViX2N0eCAgICpodWIgID0gKHN0cnVj
dCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisJc3RydWN0IG1hdXNiX2RldgkgICAgKm1kZXYg
PSBOVUxMOw0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlCSAgICAqbWFfZGV2Ow0KKwlzdHJ1Y3QgbWF1
c2JfdXNiX2RldmljZV9jdHggKnVzYl9kZXZpY2VfY3R4Ow0KKwlzdHJ1Y3QgbWF1c2JfZW5kcG9p
bnRfY3R4ICAgKmVuZHBvaW50X2N0eCA9IGRldi0+ZXAwLmhjcHJpdjsNCisNCisJaWYgKHBvcnRf
bnVtYmVyIDwgMCB8fCBwb3J0X251bWJlciA+PSBOVU1CRVJfT0ZfUE9SVFMpIHsNCisJCW1hdXNi
X3ByX2luZm8oInBvcnRfbnVtYmVyIG91dCBvZiByYW5nZSwgcG9ydF9udW1iZXI9JXgiLA0KKwkJ
CSAgICAgIHBvcnRfbnVtYmVyKTsNCisJCXJldHVybjsNCisJfQ0KKw0KKwltZGV2ICA9ICZodWIt
Pm1hX2RldnNbcG9ydF9udW1iZXJdOw0KKw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmbWhjZC0+bG9j
aywgZmxhZ3MpOw0KKwltYV9kZXYgPSBodWItPm1hX2RldnNbcG9ydF9udW1iZXJdLm1hX2RldjsN
CisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlpZiAo
IW1hX2Rldikgew0KKwkJbWF1c2JfcHJfZXJyKCJNQVVTQiBkZXZpY2Ugbm90IGZvdW5kIG9uIHBv
cnRfbnVtYmVyPSVkIiwNCisJCQkgICAgIHBvcnRfbnVtYmVyKTsNCisJCXJldHVybjsNCisJfQ0K
Kw0KKwl1c2JfZGV2aWNlX2N0eCA9IG1hdXNiX2ZpbmRfdXNiX2RldmljZShtZGV2LCBkZXYpOw0K
KwlpZiAoIXVzYl9kZXZpY2VfY3R4KSB7DQorCQltYXVzYl9wcl93YXJuKCJkZXZpY2VfY3R4IGlz
IG5vdCBmb3VuZCIpOw0KKwkJcmV0dXJuOw0KKwl9DQorDQorCWRldl9oYW5kbGUgPSB1c2JfZGV2
aWNlX2N0eC0+ZGV2X2hhbmRsZTsNCisNCisJaWYgKGF0b21pY19yZWFkKCZtYV9kZXYtPnVucmVz
cG9uc2l2ZV9jbGllbnQpKSB7DQorCQltYXVzYl9wcl9lcnIoIkNsaWVudCBpcyBub3QgcmVzcG9u
c2l2ZSBhbnltb3JlIC0gZnJlZSB1c2JkZXZpY2UgaW1tZWRpYXRlbHkiKTsNCisJCWRldi0+ZXAw
LmhjcHJpdiA9IE5VTEw7DQorCQlrZnJlZShlbmRwb2ludF9jdHgpOw0KKwkJZ290byBsX2ZyZWVf
ZGV2Ow0KKwl9DQorDQorCWlmIChlbmRwb2ludF9jdHgpIHsNCisJCXN0YXR1cyA9IG1hdXNiX2Vw
aW5hY3RpdmF0ZV9ldmVudF90b191c2VyKG1hX2RldiwgZGV2X2hhbmRsZSwNCisJCQkJCQllbmRw
b2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQorCQltYXVzYl9wcl9pbmZvKCJlcGluYWN0aXZhdGUg
cmVxdWVzdCBlcF9oYW5kbGU9JSN4LCBkZXZfaGFuZGxlPSUjeCwgc3RhdHVzPSVkIiwNCisJCQkg
ICAgICAgZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUsIGRldl9oYW5kbGUsIHN0YXR1cyk7DQorDQor
CQlzdGF0dXMgPSBtYXVzYl9lcGRlbGV0ZV9ldmVudF90b191c2VyKG1hX2RldiwgZGV2X2hhbmRs
ZSwNCisJCQkJCQkgICAgICBlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQorCQlpZiAoc3Rh
dHVzIDwgMCkNCisJCQltYXVzYl9wcl93YXJuKCJlcF9oYW5kbGVfZGVsIHJlcXVlc3QgZmFpbGVk
IGZvciBlcDA6IGVwX2hhbmRsZT0lI3gsIGRldl9oYW5kbGU9JSN4IiwNCisJCQkJCWVuZHBvaW50
X2N0eC0+ZXBfaGFuZGxlLCBkZXZfaGFuZGxlKTsNCisJCWRldi0+ZXAwLmhjcHJpdiA9IE5VTEw7
DQorCQlrZnJlZShlbmRwb2ludF9jdHgpOw0KKw0KKwl9IGVsc2Ugew0KKwkJbWF1c2JfcHJfd2Fy
bigiZW5kcG9pbnRfY3R4IGlzIE5VTEw6IGRldl9oYW5kbGU9JSN4IiwNCisJCQlkZXZfaGFuZGxl
KTsNCisJfQ0KKw0KKwlpZiAoZGV2X2hhbmRsZSAhPSBERVZfSEFORExFX05PVF9BU1NJR05FRCkg
ew0KKwkJc3RhdHVzID0gbWF1c2JfdXNiZGV2ZGlzY29ubmVjdF9ldmVudF90b191c2VyKG1hX2Rl
diwNCisJCQkJCQkJICAgICAgZGV2X2hhbmRsZSk7DQorDQorCQlpZiAoc3RhdHVzIDwgMCkNCisJ
CQltYXVzYl9wcl93YXJuKCJ1c2JfZGV2X2Rpc2Nvbm5lY3QgcmVxIGZhaWxlZCBmb3IgZGV2X2hh
bmRsZT0lI3giLA0KKwkJCQkgICAgICBkZXZfaGFuZGxlKTsNCisJfQ0KKw0KK2xfZnJlZV9kZXY6
DQorCWlmIChhdG9taWNfc3ViX2FuZF90ZXN0KDEsICZtYV9kZXYtPm51bV9vZl91c2JfZGV2aWNl
cykpIHsNCisJCW1hdXNiX3ByX2luZm8oIkFsbCB1c2IgZGV2aWNlcyBkZXN0cm95ZWQgLSBwcm9j
ZWVkIHdpdGggZGlzY29ubmVjdGluZyIpOw0KKwkJcXVldWVfd29yayhtYV9kZXYtPndvcmtxLCAm
bWFfZGV2LT5zb2NrZXRfZGlzY29ubmVjdF93b3JrKTsNCisJfQ0KKw0KKwlyYl9lcmFzZSgmdXNi
X2RldmljZV9jdHgtPnJiX25vZGUsICZtZGV2LT51c2JfZGV2aWNlcyk7DQorCW1hdXNiX3ByX2lu
Zm8oIlVTQiBkZXZpY2UgZGVsZXRlZCBkZXZpY2U9JXAiLCB1c2JfZGV2aWNlX2N0eC0+ZGV2X2Fk
ZHIpOw0KKwlrZnJlZSh1c2JfZGV2aWNlX2N0eCk7DQorDQorCW1hdXNiX3ByX2luZm8oImtyZWZf
cHV0Iik7DQorCWlmIChrcmVmX3B1dCgmbWFfZGV2LT5yZWZjb3VudCwgbWF1c2JfcmVsZWFzZV9t
YV9kZXZfYXN5bmMpKQ0KKwkJbWF1c2JfY2xlYXJfaGNkX21hZGV2KHBvcnRfbnVtYmVyKTsNCit9
DQorDQorc3RhdGljIGludCBtYXVzYl9kZXZpY2VfYXNzaWduX2FkZHJlc3Moc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2LA0KKwkJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4ICp1c2JfZGV2aWNl
X2N0eCkNCit7DQorCWludCBzdGF0dXMgPSAwOw0KKw0KKwlzdGF0dXMgPSBtYXVzYl9zZXR1c2Jk
ZXZhZGRyZXNzX2V2ZW50X3RvX3VzZXIoZGV2LA0KKwkJCQl1c2JfZGV2aWNlX2N0eC0+ZGV2X2hh
bmRsZSwgUkVTUE9OU0VfVElNRU9VVCk7DQorDQorCW1hdXNiX3ByX2luZm8oImRldl9oYW5kbGU9
JSN4LCBzdGF0dXM9JWQiLCB1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZSwNCisJCQkJCQkgICBz
dGF0dXMpOw0KKwl1c2JfZGV2aWNlX2N0eC0+YWRkcmVzc2VkID0gKHN0YXR1cyA9PSAwKTsNCisN
CisJcmV0dXJuIHN0YXR1czsNCit9DQorDQorc3RhdGljIHN0cnVjdCBtYXVzYl91c2JfZGV2aWNl
X2N0eCAqbWF1c2JfYWxsb2NfZGV2aWNlX2N0eChzdHJ1Y3QgaHViX2N0eCAqaHViLA0KKwkJCQkJ
CXN0cnVjdCB1c2JfZGV2aWNlICpkZXYsDQorCQkJCQkJc3RydWN0IG1hdXNiX2RldmljZSAqbWFf
ZGV2LA0KKwkJCQkJCXVpbnQxNl90IHBvcnRfbnVtYmVyLA0KKwkJCQkJCWludCAqc3RhdHVzKQ0K
K3sNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4ICp1c2JfZGV2aWNlX2N0eCA9IE5VTEw7
DQorDQorCW1hdXNiX3ByX2luZm8oIiIpOw0KKw0KKwl1c2JfZGV2aWNlX2N0eCA9IGt6YWxsb2Mo
c2l6ZW9mKCp1c2JfZGV2aWNlX2N0eCksIEdGUF9BVE9NSUMpOw0KKwlpZiAodW5saWtlbHkoIXVz
Yl9kZXZpY2VfY3R4KSkgew0KKwkJbWF1c2JfcHJfZXJyKCJBbGxvY2F0aW9uIGZhaWxlZCIpOw0K
KwkJKnN0YXR1cyA9IC1FTk9NRU07DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKw0KKwl1c2JfZGV2
aWNlX2N0eC0+ZGV2X2FkZHIgICA9IGRldjsNCisJdXNiX2RldmljZV9jdHgtPmRldl9oYW5kbGUg
PSBERVZfSEFORExFX05PVF9BU1NJR05FRDsNCisJdXNiX2RldmljZV9jdHgtPmFkZHJlc3NlZCAg
PSBmYWxzZTsNCisNCisJaWYgKG1hdXNiX2luc2VydF91c2JfZGV2aWNlKCZodWItPm1hX2RldnNb
cG9ydF9udW1iZXJdLA0KKwkJCQkgICAgdXNiX2RldmljZV9jdHgpKSB7DQorCQltYXVzYl9wcl93
YXJuKCJkZXZpY2VfY3R4IGFscmVhZHkgZXhpc3RzIik7DQorCQlrZnJlZSh1c2JfZGV2aWNlX2N0
eCk7DQorCQkqc3RhdHVzID0gLUVFWElTVDsNCisJCXJldHVybiBOVUxMOw0KKwl9DQorDQorCWty
ZWZfZ2V0KCZtYV9kZXYtPnJlZmNvdW50KTsNCisJbWF1c2JfcHJfaW5mbygiTmV3IFVTQiBkZXZp
Y2UgYWRkZWQgZGV2aWNlPSVwIiwNCisJCSAgICAgIHVzYl9kZXZpY2VfY3R4LT5kZXZfYWRkcik7
DQorCWF0b21pY19pbmMoJm1hX2Rldi0+bnVtX29mX3VzYl9kZXZpY2VzKTsNCisNCisJcmV0dXJu
IHVzYl9kZXZpY2VfY3R4Ow0KK30NCisNCisvKg0KKyAqIEZvciB1c2IgMi4wIGxvZ2l0ZWNoIGNh
bWVyYSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIG9uY2UgZHVyaW5nDQorICogZW51bWVyYXRpb24g
b2YgZGV2aWNlIGFuZCBsYXRlciBhZnRlciBtYXVzYl9yZXNldF9kZXZpY2UuDQorICovDQorc3Rh
dGljIGludCBtYXVzYl9hZGRyZXNzX2RldmljZShzdHJ1Y3QgdXNiX2hjZCAqaGNkLCBzdHJ1Y3Qg
dXNiX2RldmljZSAqZGV2KQ0KK3sNCisJaW50OF90CXBvcnRfbnVtYmVyID0gMDsNCisJaW50CXN0
YXR1cwkgICAgPSAwOw0KKwl1bnNpZ25lZCBsb25nCWZsYWdzOw0KKwlzdHJ1Y3QgaHViX2N0eAkq
aHViID0gKHN0cnVjdCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisJc3RydWN0IG1hdXNiX2Rl
dmljZQkgICAgKm1hX2RldjsNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4ICp1c2JfZGV2
aWNlX2N0eDsNCisJc3RydWN0IG1hdXNiX2VuZHBvaW50X2N0eCAgICplbmRwb2ludF9jdHg7DQor
DQorCXBvcnRfbnVtYmVyID0gZ2V0X3Jvb3RfaHViX3BvcnRfbnVtYmVyKGRldik7DQorDQorCWlm
IChwb3J0X251bWJlciA8IDAgfHwgcG9ydF9udW1iZXIgPj0gTlVNQkVSX09GX1BPUlRTKSB7DQor
CQltYXVzYl9wcl9pbmZvKCJwb3J0X251bWJlciBvdXQgb2YgcmFuZ2UsIHBvcnRfbnVtYmVyPSV4
IiwNCisJCQkgICAgICBwb3J0X251bWJlcik7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJfQ0KKw0K
KwlzcGluX2xvY2tfaXJxc2F2ZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwltYV9kZXYgPSBodWIt
Pm1hX2RldnNbcG9ydF9udW1iZXJdLm1hX2RldjsNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgm
bWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlpZiAoIW1hX2Rldikgew0KKwkJbWF1c2JfcHJfZXJy
KCJNQVVTQiBkZXZpY2Ugbm90IGZvdW5kIG9uIHBvcnRfbnVtYmVyPSVkIiwNCisJCQkgICAgIHBv
cnRfbnVtYmVyKTsNCisJCXJldHVybiAtRU5PREVWOw0KKwl9DQorDQorCXVzYl9kZXZpY2VfY3R4
ID0NCisJICAgIG1hdXNiX2ZpbmRfdXNiX2RldmljZSgmaHViLT5tYV9kZXZzW3BvcnRfbnVtYmVy
XSwgZGV2KTsNCisNCisJaWYgKCF1c2JfZGV2aWNlX2N0eCkgew0KKwkJdXNiX2RldmljZV9jdHgg
PSBtYXVzYl9hbGxvY19kZXZpY2VfY3R4KGh1YiwgZGV2LCBtYV9kZXYsDQorCQkJCQkJCXBvcnRf
bnVtYmVyLCAmc3RhdHVzKTsNCisNCisJCWlmICghdXNiX2RldmljZV9jdHgpDQorCQkJcmV0dXJu
IHN0YXR1czsNCisJfQ0KKw0KKwltYXVzYl9wcl9pbmZvKCJkZXZfaGFuZGxlPSUjeCwgZGV2X3Nw
ZWVkPSUjeCIsDQorCQl1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZSwgZGV2LT5zcGVlZCk7DQor
DQorCWlmIChkZXYtPnNwZWVkID49IFVTQl9TUEVFRF9TVVBFUikNCisJCW1hdXNiX3ByX2luZm8o
IlVTQiAzLjAiKTsNCisJZWxzZQ0KKwkJbWF1c2JfcHJfaW5mbygiVVNCIDIuMCIpOw0KKw0KKw0K
KwlpZiAodXNiX2RldmljZV9jdHgtPmRldl9oYW5kbGUgPT0gREVWX0hBTkRMRV9OT1RfQVNTSUdO
RUQpIHsNCisJCXN0YXR1cyA9IG1hdXNiX2VuYWJsZV9kZXZpY2UoaGNkLCBkZXYpOw0KKwkJaWYg
KHN0YXR1cyA8IDApDQorCQkJcmV0dXJuIHN0YXR1czsNCisJfQ0KKw0KKwlpZiAoIXVzYl9kZXZp
Y2VfY3R4LT5hZGRyZXNzZWQpIHsNCisJCXN0YXR1cyA9IG1hdXNiX2RldmljZV9hc3NpZ25fYWRk
cmVzcyhtYV9kZXYsIHVzYl9kZXZpY2VfY3R4KTsNCisJCWlmIChzdGF0dXMgPCAwKQ0KKwkJCXJl
dHVybiBzdGF0dXM7DQorCX0NCisNCisJZW5kcG9pbnRfY3R4ID0gZGV2LT5lcDAuaGNwcml2Ow0K
KwlpZiAoIWVuZHBvaW50X2N0eCkgew0KKwkJbWF1c2JfcHJfZXJyKCJlbmRwb2ludF9jdHggaXMg
TlVMTDogZGV2X2hhbmRsZT0lI3giLA0KKwkJCSAgICAgdXNiX2RldmljZV9jdHgtPmRldl9oYW5k
bGUpOw0KKwkJcmV0dXJuIC1FSU5WQUw7DQorCX0NCisNCisJLyoNCisJICogRml4IHRvIHN1cHBv
cnQgdXNiIDIuMCBsb2dpdGVjaCBjYW1lcmEuIElmIGVuZG9pbnQgaGFuZGxlIG9mIHVzYiAyLjAN
CisJICogZGV2aWNlIGlzIGFscmVhZHkgbW9kaWZpZWQsIGRvIG5vdCBtb2RpZnkgaXQgYWdhaW4u
DQorCSAqLw0KKwlpZiAoZGV2LT5zcGVlZCA8IFVTQl9TUEVFRF9TVVBFUiAmJiBlbmRwb2ludF9j
dHgtPmVwX2hhbmRsZSAhPSAwKQ0KKwkJcmV0dXJuIDA7DQorDQorCXN0YXR1cyA9IG1hdXNiX21v
ZGlmeWVwMF9ldmVudF90b191c2VyKG1hX2RldiwNCisJCQkJCSAgICAgICB1c2JfZGV2aWNlX2N0
eC0+ZGV2X2hhbmRsZSwNCisJCQkJCSAgICAgICAmZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUsDQor
CQkJCQkgICAgICAgZGV2LT5lcDAuZGVzYy53TWF4UGFja2V0U2l6ZSk7DQorDQorCW1hdXNiX3By
X2luZm8oIm1vZGlmeSBlcDAgcmVzcG9uc2UsIGVwX2hhbmRsZT0lI3gsIGRldl9oYW5kbGU9JSN4
LCBzdGF0dXM9JWQiLA0KKwkJICAgICAgIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlLCBlbmRwb2lu
dF9jdHgtPmRldl9oYW5kbGUsDQorCQkgICAgICAgc3RhdHVzKTsNCisNCisJcmV0dXJuIHN0YXR1
czsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9hZGRfZW5kcG9pbnQoc3RydWN0IHVzYl9oY2Qg
KmhjZCwgc3RydWN0IHVzYl9kZXZpY2UgKmRldiwNCisJCQlzdHJ1Y3QgdXNiX2hvc3RfZW5kcG9p
bnQgKmVuZHBvaW50KQ0KK3sNCisJaW50ICAgIHN0YXR1cwkgICA9IDA7DQorCWludDhfdCBwb3J0
X251bWJlciA9IDA7DQorCXN0cnVjdCBtYV91c2JfZXBoYW5kbGVyZXFfZGVzY19zcyAgZGVzY3Jp
cHRvcl9zczsNCisJc3RydWN0IG1hX3VzYl9lcGhhbmRsZXJlcV9kZXNjX3N0ZCBkZXNjcmlwdG9y
Ow0KKwlzdHJ1Y3QgaHViX2N0eAkJICAgICpodWIgPSAoc3RydWN0IGh1Yl9jdHggKiloY2QtPmhj
ZF9wcml2Ow0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlCSAgICAqbWFfZGV2Ow0KKwlzdHJ1Y3QgbWF1
c2JfdXNiX2RldmljZV9jdHggKnVzYl9kZXZpY2VfY3R4Ow0KKwlzdHJ1Y3QgbWF1c2JfZW5kcG9p
bnRfY3R4ICAgKmVuZHBvaW50X2N0eDsNCisJdW5zaWduZWQgbG9uZyBmbGFnczsNCisNCisJcG9y
dF9udW1iZXIgPSBnZXRfcm9vdF9odWJfcG9ydF9udW1iZXIoZGV2KTsNCisNCisJaWYgKHBvcnRf
bnVtYmVyIDwgMCB8fCBwb3J0X251bWJlciA+PSBOVU1CRVJfT0ZfUE9SVFMpIHsNCisJCW1hdXNi
X3ByX2luZm8oInBvcnRfbnVtYmVyIG91dCBvZiByYW5nZSwgcG9ydF9udW1iZXI9JXgiLA0KKwkJ
CSAgICAgIHBvcnRfbnVtYmVyKTsNCisJCXJldHVybiAwOw0KKwl9DQorDQorCXNwaW5fbG9ja19p
cnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCW1hX2RldiA9IGh1Yi0+bWFfZGV2c1twb3J0
X251bWJlcl0ubWFfZGV2Ow0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBm
bGFncyk7DQorDQorCWlmICghbWFfZGV2KSB7DQorCQltYXVzYl9wcl9lcnIoIk1BVVNCIGRldmlj
ZSBub3QgZm91bmQgb24gcG9ydF9udW1iZXI9JWQiLA0KKwkJCSAgICAgcG9ydF9udW1iZXIpOw0K
KwkJcmV0dXJuIC1FTk9ERVY7DQorCX0NCisNCisJdXNiX2RldmljZV9jdHggPQ0KKwkJbWF1c2Jf
ZmluZF91c2JfZGV2aWNlKCZodWItPm1hX2RldnNbcG9ydF9udW1iZXJdLCBkZXYpOw0KKw0KKwlp
ZiAoIXVzYl9kZXZpY2VfY3R4KSB7DQorCQltYXVzYl9wcl93YXJuKCJEZXZpY2Ugbm90IGZvdW5k
Iik7DQorCQlyZXR1cm4gLUVOT0RFVjsNCisJfQ0KKw0KKwllbmRwb2ludF9jdHggPSBremFsbG9j
KHNpemVvZigqZW5kcG9pbnRfY3R4KSwgR0ZQX0FUT01JQyk7DQorCWlmICh1bmxpa2VseSghZW5k
cG9pbnRfY3R4KSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIkZhaWxlZCB0byBhbGxvYyBlbmRwb2lu
dF9jdHgiKTsNCisJCXJldHVybiAtRU5PTUVNOw0KKwl9DQorDQorCWVuZHBvaW50X2N0eC0+ZGV2
X2hhbmRsZQk9IHVzYl9kZXZpY2VfY3R4LT5kZXZfaGFuZGxlOw0KKwllbmRwb2ludF9jdHgtPnVz
Yl9kZXZpY2VfY3R4CT0gdXNiX2RldmljZV9jdHg7DQorCWVuZHBvaW50X2N0eC0+bWFfZGV2CQk9
IG1hX2RldjsNCisJZW5kcG9pbnQtPmhjcHJpdgkJPSBlbmRwb2ludF9jdHg7DQorDQorCWlmIChk
ZXYtPnNwZWVkID49IFVTQl9TUEVFRF9TVVBFUikgew0KKwkJbWF1c2JfaW5pdF9zdXBlcnNwZWVk
X2VwX2Rlc2NyaXB0b3IoJmRlc2NyaXB0b3Jfc3MsDQorCQkJCQkJICAgICZlbmRwb2ludC0+ZGVz
YywNCisJCQkJCQkgICAgJmVuZHBvaW50LT5zc19lcF9jb21wKTsNCisJCXN0YXR1cyA9IG1hdXNi
X2VwaGFuZGxlX2V2ZW50X3RvX3VzZXIobWFfZGV2LA0KKwkJCQkJdXNiX2RldmljZV9jdHgtPmRl
dl9oYW5kbGUsDQorCQkJCQlzaXplb2YoZGVzY3JpcHRvcl9zcyksDQorCQkJCQkmZGVzY3JpcHRv
cl9zcywNCisJCQkJCSZlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQorCX0gZWxzZSB7DQor
CQltYXVzYl9pbml0X3N0YW5kYXJkX2VwX2Rlc2NyaXB0b3IoJmRlc2NyaXB0b3IsICZlbmRwb2lu
dC0+ZGVzYyk7DQorCQlzdGF0dXMgPSBtYXVzYl9lcGhhbmRsZV9ldmVudF90b191c2VyKG1hX2Rl
diwNCisJCQkJCXVzYl9kZXZpY2VfY3R4LT5kZXZfaGFuZGxlLA0KKwkJCQkJc2l6ZW9mKGRlc2Ny
aXB0b3IpLA0KKwkJCQkJJmRlc2NyaXB0b3IsDQorCQkJCQkmZW5kcG9pbnRfY3R4LT5lcF9oYW5k
bGUpOw0KKwl9DQorDQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoImVwX2hh
bmRsZV9yZXF1ZXN0IGZhaWxlZCBkZXZfaGFuZGxlPSUjeCIsDQorCQkJICAgICB1c2JfZGV2aWNl
X2N0eC0+ZGV2X2hhbmRsZSk7DQorCQllbmRwb2ludC0+aGNwcml2ID0gTlVMTDsNCisJCWtmcmVl
KGVuZHBvaW50X2N0eCk7DQorCQlyZXR1cm4gc3RhdHVzOw0KKwl9DQorDQorCW1hdXNiX3ByX2lu
Zm8oIkVuZHBvaW50IGFkZGVkIGVwX2hhbmRsZT0lI3gsIGRldl9oYW5kbGU9JSN4IiwNCisJCSAg
ICAgIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlLCBlbmRwb2ludF9jdHgtPmRldl9oYW5kbGUpOw0K
Kw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9kcm9wX2VuZHBvaW50KHN0
cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYsDQorCQkJc3RydWN0IHVz
Yl9ob3N0X2VuZHBvaW50ICplbmRwb2ludCkNCit7DQorCWludDhfdAlwb3J0X251bWJlciA9IDA7
DQorCWludAlzdGF0dXMJICAgID0gMCwNCisJCXJldHJpZXMJICAgID0gMDsNCisJc3RydWN0IGh1
Yl9jdHgJCSAgICAqaHViID0gKHN0cnVjdCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisJc3Ry
dWN0IG1hdXNiX2RldmljZQkgICAgKm1hX2RldjsNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2Vf
Y3R4ICp1c2JfZGV2aWNlX2N0eDsNCisJc3RydWN0IG1hdXNiX2VuZHBvaW50X2N0eCAgICplbmRw
b2ludF9jdHggPSBlbmRwb2ludC0+aGNwcml2Ow0KKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKw0K
Kwlwb3J0X251bWJlciA9IGdldF9yb290X2h1Yl9wb3J0X251bWJlcihkZXYpOw0KKw0KKwlpZiAo
cG9ydF9udW1iZXIgPCAwIHx8IHBvcnRfbnVtYmVyID49IE5VTUJFUl9PRl9QT1JUUykgew0KKwkJ
bWF1c2JfcHJfaW5mbygicG9ydF9udW1iZXIgb3V0IG9mIHJhbmdlLCBwb3J0X251bWJlcj0leCIs
DQorCQkJICAgICAgcG9ydF9udW1iZXIpOw0KKwkJcmV0dXJuIC1FSU5WQUw7DQorCX0NCisNCisJ
c3Bpbl9sb2NrX2lycXNhdmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJbWFfZGV2ID0gaHViLT5t
YV9kZXZzW3BvcnRfbnVtYmVyXS5tYV9kZXY7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1o
Y2QtPmxvY2ssIGZsYWdzKTsNCisNCisJaWYgKCFtYV9kZXYpIHsNCisJCW1hdXNiX3ByX2Vycigi
TUFVU0IgZGV2aWNlIG5vdCBmb3VuZCBvbiBwb3J0X251bWJlcj0lZCIsDQorCQkJICAgICBwb3J0
X251bWJlcik7DQorCQlyZXR1cm4gLUVOT0RFVjsNCisJfQ0KKw0KKwl1c2JfZGV2aWNlX2N0eCA9
DQorCSAgICBtYXVzYl9maW5kX3VzYl9kZXZpY2UoJmh1Yi0+bWFfZGV2c1twb3J0X251bWJlcl0s
IGRldik7DQorDQorCWlmICghZW5kcG9pbnRfY3R4KSB7DQorCQltYXVzYl9wcl9lcnIoIkVuZHBv
aW50IGNvbnRleHQgZG9lc24ndCBleGlzdCIpOw0KKwkJcmV0dXJuIDA7DQorCX0NCisJaWYgKCF1
c2JfZGV2aWNlX2N0eCkgew0KKwkJbWF1c2JfcHJfZXJyKCJVc2IgZGV2aWNlIGNvbnRleHQgZG9l
c24ndCBleGlzdCIpOw0KKwkJcmV0dXJuIDA7DQorCX0NCisNCisJbWF1c2JfcHJfaW5mbygiU3Rh
cnQgZHJvcHBpbmcgZXBfaGFuZGxlPSUjeCwgZGV2X2hhbmRsZT0lI3giLA0KKwkJICAgICAgZW5k
cG9pbnRfY3R4LT5lcF9oYW5kbGUsIGVuZHBvaW50X2N0eC0+ZGV2X2hhbmRsZSk7DQorDQorCWlm
IChhdG9taWNfcmVhZCgmbWFfZGV2LT51bnJlc3BvbnNpdmVfY2xpZW50KSkgew0KKwkJbWF1c2Jf
cHJfZXJyKCJDbGllbnQgaXMgbm90IHJlc3BvbnNpdmUgYW55bW9yZSAtIGRyb3AgZW5kcG9pbnQg
aW1tZWRpYXRlbHkiKTsNCisJCWVuZHBvaW50LT5oY3ByaXYgPSBOVUxMOw0KKwkJa2ZyZWUoZW5k
cG9pbnRfY3R4KTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJc3RhdHVzID0gbWF1c2Jf
ZXBpbmFjdGl2YXRlX2V2ZW50X3RvX3VzZXIobWFfZGV2LA0KKwkJCQkJCSAgdXNiX2RldmljZV9j
dHgtPmRldl9oYW5kbGUsDQorCQkJCQkJICBlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQor
CW1hdXNiX3ByX2luZm8oImVwaW5hY3RpdmF0ZSByZXF1ZXN0IGVwX2hhbmRsZT0lI3gsIGRldl9o
YW5kbGU9JSN4LCBzdGF0dXM9JWQiLA0KKwkJICAgICAgIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxl
LCBlbmRwb2ludF9jdHgtPmRldl9oYW5kbGUsDQorCQkgICAgICAgc3RhdHVzKTsNCisNCisJd2hp
bGUgKHRydWUpIHsNCisJCXN0YXR1cyA9IG1hdXNiX2VwZGVsZXRlX2V2ZW50X3RvX3VzZXIobWFf
ZGV2LA0KKwkJCQkJCXVzYl9kZXZpY2VfY3R4LT5kZXZfaGFuZGxlLA0KKwkJCQkJCWVuZHBvaW50
X2N0eC0+ZXBfaGFuZGxlKTsNCisNCisJCW1hdXNiX3ByX2luZm8oImVwX2hhbmRsZV9kZWxldGVf
cmVxdWVzdCwgZXBfaGFuZGxlPSUjeCwgZGV2X2hhbmRsZT0lI3gsIHN0YXR1cz0lZCIsDQorCQkJ
ICAgICAgZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUsIGVuZHBvaW50X2N0eC0+ZGV2X2hhbmRsZSwN
CisJCQkgICAgICBzdGF0dXMpOw0KKwkJLyogc2xlZXAgZm9yIDEwIG1zIHRvIGdpdmUgZGV2aWNl
IHNvbWUgdGltZSAqLw0KKwkJaWYgKHN0YXR1cyA9PSAtRUJVU1kpIHsNCisJCQlpZiAoKytyZXRy
aWVzIDwgTUFVU0JfQlVTWV9SRVRSSUVTX0NPVU5UKQ0KKwkJCQl1c2xlZXBfcmFuZ2UoTUFVU0Jf
QlVTWV9USU1FT1VUX01JTiwNCisJCQkJCU1BVVNCX0JVU1lfVElNRU9VVF9NQVgpOw0KKwkJCWVs
c2UNCisJCQkJcmV0dXJuIHN0YXR1czsNCisJCX0gZWxzZSB7DQorCQkJYnJlYWs7DQorCQl9DQor
CX0NCisNCisJbWF1c2JfcHJfaW5mbygiRW5kcG9pbnQgZHJvcHBlZCBlcF9oYW5kbGU9JSN4LCBk
ZXZfaGFuZGxlPSUjeCIsDQorCQkgICAgICBlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSwgZW5kcG9p
bnRfY3R4LT5kZXZfaGFuZGxlKTsNCisNCisJZW5kcG9pbnQtPmhjcHJpdiA9IE5VTEw7DQorCWtm
cmVlKGVuZHBvaW50X2N0eCk7DQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK3N0YXRpYyBpbnQg
bWF1c2JfZGV2aWNlX2Fzc2lnbl9kZXZfaGFuZGxlKHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVj
dCB1c2JfZGV2aWNlDQorCQkJCSpkZXYsDQorCQkJCXN0cnVjdCBodWJfY3R4ICpodWIsDQorCQkJ
CXN0cnVjdCBtYXVzYl9kZXZpY2UgKm1hX2RldiwNCisJCQkJc3RydWN0IG1hdXNiX3VzYl9kZXZp
Y2VfY3R4ICp1c2JfZGV2aWNlX2N0eCkNCit7DQorCWludDhfdCBwb3J0X251bWJlciA9IGdldF9y
b290X2h1Yl9wb3J0X251bWJlcihkZXYpOw0KKwlpbnQgc3RhdHVzCSAgID0gMDsNCisJaW50IGRl
dl9zcGVlZAkgICA9IDA7DQorCXVpbnQxNl90IGh1Yl9kZXZfaGFuZGxlCQkgICAgPSAwOw0KKwl1
aW50MTZfdCBwYXJlbnRfaHNfaHViX2Rldl9oYW5kbGUgICA9IDA7DQorCXVpbnQxNl90IHBhcmVu
dF9oc19odWJfcG9ydAkgICAgPSAwOw0KKwlzdHJ1Y3QgdXNiX2RldmljZSAqZmlyc3RfaHViX2Rl
dmljZSA9IGRldjsNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2VfY3R4CSAgICpodWJfZGV2aWNl
X2N0eDsNCisJc3RydWN0IG1hdXNiX2VuZHBvaW50X2N0eAkgICAqZW5kcG9pbnRfY3R4Ow0KKwlz
dHJ1Y3QgbWFfdXNiX2VwaGFuZGxlcmVxX2Rlc2Nfc3RkIGRlc2NyaXB0b3I7DQorDQorCWlmIChw
b3J0X251bWJlciA8IDAgfHwgcG9ydF9udW1iZXIgPj0gTlVNQkVSX09GX1BPUlRTKSB7DQorCQlt
YXVzYl9wcl9pbmZvKCJwb3J0X251bWJlciBvdXQgb2YgcmFuZ2UsIHBvcnRfbnVtYmVyPSV4IiwN
CisJCQkgICAgICBwb3J0X251bWJlcik7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJfQ0KKw0KKwl3
aGlsZSAoZmlyc3RfaHViX2RldmljZS0+cGFyZW50LT5wYXJlbnQpDQorCQlmaXJzdF9odWJfZGV2
aWNlID0gZmlyc3RfaHViX2RldmljZS0+cGFyZW50Ow0KKw0KKwlodWJfZGV2aWNlX2N0eCA9IG1h
dXNiX2ZpbmRfdXNiX2RldmljZSgmaHViLT5tYV9kZXZzW3BvcnRfbnVtYmVyXSwNCisJCQkJCSAg
ICAgICBmaXJzdF9odWJfZGV2aWNlKTsNCisNCisJaWYgKGh1Yl9kZXZpY2VfY3R4KQ0KKwkJaHVi
X2Rldl9oYW5kbGUgPSBodWJfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZTsNCisNCisJaWYgKChkZXYt
PnNwZWVkID09IFVTQl9TUEVFRF9MT1cgfHwgZGV2LT5zcGVlZCA9PSBVU0JfU1BFRURfRlVMTCkN
CisJICAgICYmIGZpcnN0X2h1Yl9kZXZpY2UtPnNwZWVkID09IFVTQl9TUEVFRF9ISUdIKSB7DQor
CQlwYXJlbnRfaHNfaHViX2Rldl9oYW5kbGUgPQ0KKwkJCW1hdXNiX2ZpbmRfdXNiX2RldmljZSgm
aHViLT5tYV9kZXZzW3BvcnRfbnVtYmVyXSwNCisJCQkJCSAgICAgIGRldi0+cGFyZW50KS0+ZGV2
X2hhbmRsZTsNCisJCXBhcmVudF9oc19odWJfcG9ydCA9IGRldi0+cGFyZW50LT5wb3J0bnVtOw0K
Kwl9DQorDQorCWRldl9zcGVlZCA9IHVzYl90b19tYXVzYl9kZXZpY2Vfc3BlZWQoZGV2LT5zcGVl
ZCk7DQorCW1hdXNiX3ByX2luZm8oInN0YXJ0Li4uIG1hdXNiX2RldnNwZWVkPSVkLCByb3V0ZT0l
I3gsIHBvcnRfbnVtYmVyPSVkIiwNCisJCSAgICAgIGRldl9zcGVlZCwgZGV2LT5yb3V0ZSwgcG9y
dF9udW1iZXIpOw0KKw0KKwlpZiAodW5saWtlbHkoZGV2X3NwZWVkID09IC1FSU5WQUwpKSB7DQor
CQltYXVzYl9wcl9lcnIoImJhZCBkZXZfc3BlZWQiKTsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9
DQorDQorCXN0YXR1cyA9IG1hdXNiX3VzYmRldmhhbmRsZV9ldmVudF90b191c2VyKG1hX2Rldiwg
KHVpbnQ4X3QpIGRldl9zcGVlZCwNCisJCQkJCQkgIGRldi0+cm91dGUsIGh1Yl9kZXZfaGFuZGxl
LA0KKwkJCQkJCSAgcGFyZW50X2hzX2h1Yl9kZXZfaGFuZGxlLA0KKwkJCQkJCSAgcGFyZW50X2hz
X2h1Yl9wb3J0LCAwLA0KKwkJCQkJCSAgbWFfZGV2LT5sc2UsDQorCQkJCQkJICAmdXNiX2Rldmlj
ZV9jdHgtPmRldl9oYW5kbGUpOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJtYXVzYl91c2JkZXZoYW5k
bGVfZXZlbnQgc3RhdHVzPSVkIiwgc3RhdHVzKTsNCisNCisJaWYgKHN0YXR1cyA8IDApDQorCQly
ZXR1cm4gc3RhdHVzOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJHZXQgcmVmIGRldl9oYW5kbGU9JSN4
IiwgdXNiX2RldmljZV9jdHgtPmRldl9oYW5kbGUpOw0KKw0KKwllbmRwb2ludF9jdHggPSBremFs
bG9jKHNpemVvZigqZW5kcG9pbnRfY3R4KSwgR0ZQX0FUT01JQyk7DQorCWlmICh1bmxpa2VseSgh
ZW5kcG9pbnRfY3R4KSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIkZhaWxlZCB0byBhbGxvY2F0ZSBl
bmRwb2ludF9jdHgiKTsNCisJCXJldHVybiAtRU5PTUVNOw0KKwl9DQorDQorCWVuZHBvaW50X2N0
eC0+ZGV2X2hhbmRsZSAgICAgPSB1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZTsNCisJZW5kcG9p
bnRfY3R4LT5tYV9kZXYJICAgICA9IG1hX2RldjsNCisJZW5kcG9pbnRfY3R4LT51c2JfZGV2aWNl
X2N0eCA9IHVzYl9kZXZpY2VfY3R4Ow0KKwlkZXYtPmVwMC5oY3ByaXYJCSAgICAgPSBlbmRwb2lu
dF9jdHg7DQorDQorCW1hdXNiX2luaXRfc3RhbmRhcmRfZXBfZGVzY3JpcHRvcigmZGVzY3JpcHRv
ciwgJmRldi0+ZXAwLmRlc2MpOw0KKw0KKwlzdGF0dXMgPSBtYXVzYl9lcGhhbmRsZV9ldmVudF90
b191c2VyKG1hX2RldiwNCisJCQkJCSAgICAgIHVzYl9kZXZpY2VfY3R4LT5kZXZfaGFuZGxlLA0K
KwkJCQkJICAgICAgc2l6ZW9mKGRlc2NyaXB0b3IpLA0KKwkJCQkJICAgICAgJmRlc2NyaXB0b3Is
DQorCQkJCQkgICAgICAmZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUpOw0KKw0KKwltYXVzYl9wcl9p
bmZvKCJtYXVzYl9lcGhhbmRsZV9ldmVudCBlcF9oYW5kbGU9JSN4LCBkZXZfaGFuZGxlPSUjeCwg
c3RhdHVzPSVkIiwNCisJCSAgICAgIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlLCBlbmRwb2ludF9j
dHgtPmRldl9oYW5kbGUsDQorCQkgICAgICBzdGF0dXMpOw0KKw0KKwlpZiAoc3RhdHVzIDwgMCkg
ew0KKwkJZGV2LT5lcDAuaGNwcml2ID0gTlVMTDsNCisJCWtmcmVlKGVuZHBvaW50X2N0eCk7DQor
CQlyZXR1cm4gc3RhdHVzOw0KKwl9DQorDQorCXJldHVybiAwOw0KK30NCisNCisvKg0KKyAqIEZv
ciB1c2IgMi4wIGxvZ2l0ZWNoIGNhbWVyYSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIG9uY2UgZHVy
aW5nIGVudW1lcmF0aW9uDQorICogb2YgZGV2aWNlIGFuZCBsYXRlciBhZnRlciBtYXVzYl9yZXNl
dF9kZXZpY2UuIEluIGxhdHRlciBjYXNlIGl0IGlzDQorICogcmVxdWlyZWQgdG8gYWRkcmVzcyB0
aGUgZGV2aWNlIGFnYWluIGluIG9yZGVyIGZvciBlcDAgdG8gd29yayBwcm9wZXJseS4NCisgKi8N
CitzdGF0aWMgaW50IG1hdXNiX2VuYWJsZV9kZXZpY2Uoc3RydWN0IHVzYl9oY2QgKmhjZCwgc3Ry
dWN0IHVzYl9kZXZpY2UgKmRldikNCit7DQorCWludDhfdCBwb3J0X251bWJlcjsNCisJc3RydWN0
IGh1Yl9jdHgJCSAgICAqaHViID0gKHN0cnVjdCBodWJfY3R4ICopaGNkLT5oY2RfcHJpdjsNCisJ
c3RydWN0IG1hdXNiX2RldmljZQkgICAgKm1hX2RldjsNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZp
Y2VfY3R4ICp1c2JfZGV2aWNlX2N0eDsNCisJdW5zaWduZWQgbG9uZyBmbGFnczsNCisJaW50IHN0
YXR1cyA9IDA7DQorDQorCXBvcnRfbnVtYmVyID0gZ2V0X3Jvb3RfaHViX3BvcnRfbnVtYmVyKGRl
dik7DQorDQorCWlmIChwb3J0X251bWJlciA8IDAgfHwgcG9ydF9udW1iZXIgPj0gTlVNQkVSX09G
X1BPUlRTKSB7DQorCQltYXVzYl9wcl9pbmZvKCJwb3J0X251bWJlciBvdXQgb2YgcmFuZ2UsIHBv
cnRfbnVtYmVyPSV4IiwNCisJCQkgICAgICBwb3J0X251bWJlcik7DQorCQlyZXR1cm4gLUVJTlZB
TDsNCisJfQ0KKw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwlt
YV9kZXYgPSBodWItPm1hX2RldnNbcG9ydF9udW1iZXJdLm1hX2RldjsNCisJc3Bpbl91bmxvY2tf
aXJxcmVzdG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlpZiAoIW1hX2Rldikgew0KKwkJ
bWF1c2JfcHJfZXJyKCJNQVVTQiBkZXZpY2Ugbm90IGZvdW5kIG9uIHBvcnRfbnVtYmVyPSVkIiwN
CisJCQkgICAgIHBvcnRfbnVtYmVyKTsNCisJCXJldHVybiAtRU5PREVWOw0KKwl9DQorDQorCXVz
Yl9kZXZpY2VfY3R4ID0NCisJICAgIG1hdXNiX2ZpbmRfdXNiX2RldmljZSgmaHViLT5tYV9kZXZz
W3BvcnRfbnVtYmVyXSwgZGV2KTsNCisNCisJaWYgKCF1c2JfZGV2aWNlX2N0eCkgew0KKwkJdXNi
X2RldmljZV9jdHggPSBtYXVzYl9hbGxvY19kZXZpY2VfY3R4KGh1YiwgZGV2LCBtYV9kZXYsDQor
CQkJCQkJCXBvcnRfbnVtYmVyLCAmc3RhdHVzKTsNCisNCisJCWlmICghdXNiX2RldmljZV9jdHgp
DQorCQkJcmV0dXJuIHN0YXR1czsNCisJfQ0KKw0KKwltYXVzYl9wcl9pbmZvKCJEZXZpY2UgYXNz
aWduZWQgYW5kIGFkZHJlc3NlZCB1c2JfZGV2aWNlX2N0eD0lcCIsDQorCQkgICAgICB1c2JfZGV2
aWNlX2N0eCk7DQorDQorCWlmICh1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZSA9PSBERVZfSEFO
RExFX05PVF9BU1NJR05FRCkNCisJCXJldHVybiBtYXVzYl9kZXZpY2VfYXNzaWduX2Rldl9oYW5k
bGUoaGNkLCBkZXYsIGh1YiwgbWFfZGV2LA0KKwkJCQkJCSAgICAgIHVzYl9kZXZpY2VfY3R4KTsN
CisNCisJLyoNCisJICogRml4IGZvciB1c2IgMi4wIGxvZ2l0ZWNoIGNhbWVyYQ0KKwkgKi8NCisJ
aWYgKCF1c2JfZGV2aWNlX2N0eC0+YWRkcmVzc2VkKQ0KKwkJcmV0dXJuIG1hdXNiX2RldmljZV9h
c3NpZ25fYWRkcmVzcyhtYV9kZXYsIHVzYl9kZXZpY2VfY3R4KTsNCisNCisJbWF1c2JfcHJfaW5m
bygiRGV2aWNlIGFzc2lnbmVkIGFuZCBhZGRyZXNzZWQgZGV2X2hhbmRsZT0lI3giLA0KKwkJICAg
ICAgdXNiX2RldmljZV9jdHgtPmRldl9oYW5kbGUpOw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3Rh
dGljIGludCBtYXVzYl9pc19odWJfZGV2aWNlKHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpDQorew0K
KwlyZXR1cm4gZGV2LT5kZXNjcmlwdG9yLmJEZXZpY2VDbGFzcyA9PSAweDA5Ow0KK30NCisNCitz
dGF0aWMgaW50IG1hdXNiX3VwZGF0ZV9kZXZpY2Uoc3RydWN0IHVzYl9oY2QgKmhjZCwgc3RydWN0
IHVzYl9kZXZpY2UgKmRldikNCit7DQorCWludDhfdAlwb3J0X251bWJlciA9IDA7DQorCWludAlz
dGF0dXMJICAgID0gMDsNCisJc3RydWN0IGh1Yl9jdHgJCSAgICAqaHViID0gKHN0cnVjdCBodWJf
Y3R4ICopaGNkLT5oY2RfcHJpdjsNCisJc3RydWN0IG1hdXNiX2RldmljZQkgICAgKm1hX2RldiA9
IE5VTEw7DQorCXN0cnVjdCBtYXVzYl91c2JfZGV2aWNlX2N0eCAqdXNiX2RldmljZV9jdHggPSBO
VUxMOw0KKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKw0KKwlpZiAobWF1c2JfaXNfaHViX2Rldmlj
ZShkZXYpKSB7DQorCQltYXVzYl9wcl93YXJuKCJEZXZpY2UgaXMgaHViIik7DQorCQlyZXR1cm4g
MDsNCisJfQ0KKw0KKwlwb3J0X251bWJlciA9IGdldF9yb290X2h1Yl9wb3J0X251bWJlcihkZXYp
Ow0KKw0KKwlpZiAocG9ydF9udW1iZXIgPCAwIHx8IHBvcnRfbnVtYmVyID49IE5VTUJFUl9PRl9Q
T1JUUykgew0KKwkJbWF1c2JfcHJfaW5mbygicG9ydF9udW1iZXIgb3V0IG9mIHJhbmdlLCBwb3J0
X251bWJlcj0leCIsDQorCQkJICAgICAgcG9ydF9udW1iZXIpOw0KKwkJcmV0dXJuIC1FSU5WQUw7
DQorCX0NCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJbWFf
ZGV2ID0gaHViLT5tYV9kZXZzW3BvcnRfbnVtYmVyXS5tYV9kZXY7DQorCXNwaW5fdW5sb2NrX2ly
cXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisNCisJaWYgKCFtYV9kZXYpIHsNCisJCW1h
dXNiX3ByX2VycigiTUFVU0IgZGV2aWNlIG5vdCBmb3VuZCBvbiBwb3J0X251bWJlcj0lZCIsDQor
CQkJICAgICBwb3J0X251bWJlcik7DQorCQlyZXR1cm4gLUVOT0RFVjsNCisJfQ0KKw0KKwl1c2Jf
ZGV2aWNlX2N0eCA9DQorCSAgICBtYXVzYl9maW5kX3VzYl9kZXZpY2UoJmh1Yi0+bWFfZGV2c1tw
b3J0X251bWJlcl0sIGRldik7DQorCWlmICghdXNiX2RldmljZV9jdHgpIHsNCisJCW1hdXNiX3By
X3dhcm4oIkRldmljZSBub3QgZm91bmQiKTsNCisJCXJldHVybiAtRU5PREVWOw0KKwl9DQorDQor
CXN0YXR1cyA9IG1hdXNiX3VwZGF0ZWRldl9ldmVudF90b191c2VyKG1hX2RldiwNCisJCQkJCSAg
ICAgICB1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZSwNCisJCQkJCSAgICAgICAwLCAwLCAwLCAw
LCAwLCAwLA0KKwkJCQkJICAgICAgICZkZXYtPmRlc2NyaXB0b3IpOw0KKw0KKwltYXVzYl9wcl9p
bmZvKCJGaW5pc2hlZCBkZXZfaGFuZGxlPSUjeCwgc3RhdHVzPSVkIiwNCisJCQl1c2JfZGV2aWNl
X2N0eC0+ZGV2X2hhbmRsZSwgc3RhdHVzKTsNCisNCisJcmV0dXJuIHN0YXR1czsNCit9DQorDQor
c3RhdGljIGludCBtYXVzYl9odWJfdXBkYXRlX2RldmljZShzdHJ1Y3QgdXNiX2hjZCAqaGNkLCBz
dHJ1Y3QgdXNiX2RldmljZSAqZGV2LA0KKwkJCQlzdHJ1Y3QgdXNiX3R0ICp0dCwgZ2ZwX3QgbWVt
X2ZsYWdzKQ0KK3sNCisJaW50OF90CXBvcnRfbnVtYmVyID0gMDsNCisJaW50CXN0YXR1cwkgICAg
PSAwOw0KKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKwl1aW50MTZfdCBtYXhfZXhpdF9sYXRlbmN5
ID0gMDsNCisJdWludDhfdCAgbnVtYmVyX29mX3BvcnRzID0gZGV2LT5tYXhjaGlsZDsNCisJdWlu
dDhfdCAgbXR0ID0gMDsNCisJdWludDhfdCAgdHR0ID0gMDsNCisJdWludDhfdCAgaW50ZWdyYXRl
ZF9odWJfbGF0ZW5jeSA9IDA7DQorCXN0cnVjdCBodWJfY3R4CQkgICAgKmh1YiA9IChzdHJ1Y3Qg
aHViX2N0eCAqKWhjZC0+aGNkX3ByaXY7DQorCXN0cnVjdCBtYXVzYl9kZXZpY2UJICAgICptYV9k
ZXY7DQorCXN0cnVjdCBtYXVzYl91c2JfZGV2aWNlX2N0eCAqdXNiX2RldmljZV9jdHg7DQorDQor
CWlmIChkZXYtPnNwZWVkID09IFVTQl9TUEVFRF9ISUdIKSB7DQorCQltdHQgPSB0dC0+bXVsdGkg
PT0gMCA/IDEgOiAwOw0KKwkJdHR0ID0gdHQtPnRoaW5rX3RpbWU7DQorCX0NCisJcG9ydF9udW1i
ZXIgPSBnZXRfcm9vdF9odWJfcG9ydF9udW1iZXIoZGV2KTsNCisNCisJaWYgKHBvcnRfbnVtYmVy
IDwgMCB8fCBwb3J0X251bWJlciA+PSBOVU1CRVJfT0ZfUE9SVFMpIHsNCisJCW1hdXNiX3ByX2lu
Zm8oInBvcnRfbnVtYmVyIG91dCBvZiByYW5nZSwgcG9ydF9udW1iZXI9JXgiLA0KKwkJCSAgICAg
IHBvcnRfbnVtYmVyKTsNCisJCXJldHVybiAwOw0KKwl9DQorDQorCXNwaW5fbG9ja19pcnFzYXZl
KCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCW1hX2RldiA9IGh1Yi0+bWFfZGV2c1twb3J0X251bWJl
cl0ubWFfZGV2Ow0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7
DQorDQorCWlmICghbWFfZGV2KSB7DQorCQltYXVzYl9wcl9lcnIoIk1BVVNCIGRldmljZSBub3Qg
Zm91bmQgb24gcG9ydF9udW1iZXI9JWQiLA0KKwkJCSAgICAgcG9ydF9udW1iZXIpOw0KKwkJcmV0
dXJuIC1FTk9ERVY7DQorCX0NCisNCisJdXNiX2RldmljZV9jdHggPSBtYXVzYl9maW5kX3VzYl9k
ZXZpY2UoJmh1Yi0+bWFfZGV2c1twb3J0X251bWJlcl0sDQorCQkJCQkgICAgICAgZGV2KTsNCisN
CisJaWYgKCF1c2JfZGV2aWNlX2N0eCkgew0KKwkJbWF1c2JfcHJfZXJyKCJVU0IgZGV2aWNlIG5v
dCBmb3VuZCIpOw0KKwkJcmV0dXJuIC1FTk9ERVY7DQorCX0NCisNCisJaWYgKGRldi0+dXNiM19s
cG1fdTFfZW5hYmxlZCkNCisJCW1heF9leGl0X2xhdGVuY3kgPSBkZXYtPnUxX3BhcmFtcy5tZWw7
DQorCWVsc2UgaWYgKGRldi0+dXNiM19scG1fdTJfZW5hYmxlZCkNCisJCW1heF9leGl0X2xhdGVu
Y3kgPSBkZXYtPnUyX3BhcmFtcy5tZWw7DQorDQorCXN0YXR1cyA9IG1hdXNiX3VwZGF0ZWRldl9l
dmVudF90b191c2VyKG1hX2RldiwNCisJCQkJCSAgICAgICB1c2JfZGV2aWNlX2N0eC0+ZGV2X2hh
bmRsZSwNCisJCQkJCSAgICAgICBtYXhfZXhpdF9sYXRlbmN5LCAxLA0KKwkJCQkJICAgICAgIG51
bWJlcl9vZl9wb3J0cywgbXR0LCB0dHQsDQorCQkJCQkgICAgICAgaW50ZWdyYXRlZF9odWJfbGF0
ZW5jeSwNCisJCQkJCSAgICAgICAmZGV2LT5kZXNjcmlwdG9yKTsNCisNCisJbWF1c2JfcHJfaW5m
bygiRmluaXNoZWQgZGV2X2hhbmRsZT0lI3gsIHN0YXR1cz0lZCIsDQorCQkJdXNiX2RldmljZV9j
dHgtPmRldl9oYW5kbGUsIHN0YXR1cyk7DQorDQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK3N0
YXRpYyBpbnQgbWF1c2JfY2hlY2tfYmFuZHdpZHRoKHN0cnVjdCB1c2JfaGNkICpoY2QsIHN0cnVj
dCB1c2JfZGV2aWNlICpkZXYpDQorew0KKwltYXVzYl9wcl9kZWJ1ZygiTm90IGltcGxlbWVudGVk
Iik7DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9yZXNldF9iYW5kd2lk
dGgoc3RydWN0IHVzYl9oY2QgKmhjZCwgc3RydWN0IHVzYl9kZXZpY2UgKmRldikNCit7DQorCW1h
dXNiX3ByX2RlYnVnKCJOb3QgaW1wbGVtZW50ZWQiKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1
c2JfZW5kcG9pbnRfZGlzYWJsZShzdHJ1Y3QgdXNiX2hjZCAqaGNkLA0KKwkJCQlzdHJ1Y3QgdXNi
X2hvc3RfZW5kcG9pbnQgKmVuZHBvaW50KQ0KK3sNCisJbWF1c2JfcHJfZGVidWcoIk5vdCBpbXBs
ZW1lbnRlZCIpOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9lbmRwb2ludF9yZXNldChzdHJ1
Y3QgdXNiX2hjZCAqaGNkLA0KKwkJCQlzdHJ1Y3QgdXNiX2hvc3RfZW5kcG9pbnQgKmVuZHBvaW50
KQ0KK3sNCisJaW50IHN0YXR1cyA9IDA7DQorCWludCBpc19jb250cm9sLA0KKwkgICAgZXBudW0s
DQorCSAgICBpc19vdXQ7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorCXVpbnQxNl90IGRldl9o
YW5kbGU7DQorCXVpbnQ4X3QJIHRzcDsNCisJaW50OF90CSBwb3J0X251bWJlcjsNCisJc3RydWN0
IGh1Yl9jdHgJCSAgICAqaHViOw0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlCSAgICAqbWFfZGV2Ow0K
KwlzdHJ1Y3QgbWF1c2JfdXNiX2RldmljZV9jdHggKnVzYl9kZXZpY2VfY3R4Ow0KKwlzdHJ1Y3Qg
dXNiX2RldmljZQkgICAgKmRldjsNCisJc3RydWN0IG1hdXNiX2VuZHBvaW50X2N0eCAgICplbmRw
b2ludF9jdHg7DQorCXN0cnVjdCBtYV91c2JfZXBoYW5kbGVyZXFfZGVzY19zcyAgZGVzY3JpcHRv
cl9zczsNCisJc3RydWN0IG1hX3VzYl9lcGhhbmRsZXJlcV9kZXNjX3N0ZCBkZXNjcmlwdG9yOw0K
Kw0KKwllbmRwb2ludF9jdHggPSBlbmRwb2ludC0+aGNwcml2Ow0KKwlpZiAoIWVuZHBvaW50X2N0
eCkgew0KKwkJbWF1c2JfcHJfZXJyKCJlcC0+aGNwcml2IGlzIE5VTEwiKTsNCisJCXJldHVybjsN
CisJfQ0KKw0KKwl1c2JfZGV2aWNlX2N0eAk9IGVuZHBvaW50X2N0eC0+dXNiX2RldmljZV9jdHg7
DQorCWRldl9oYW5kbGUJPSB1c2JfZGV2aWNlX2N0eC0+ZGV2X2hhbmRsZTsNCisJZGV2CQk9IHVz
Yl9kZXZpY2VfY3R4LT5kZXZfYWRkcjsNCisNCisJcG9ydF9udW1iZXIgPSBnZXRfcm9vdF9odWJf
cG9ydF9udW1iZXIoZGV2KTsNCisNCisJaWYgKHBvcnRfbnVtYmVyIDwgMCB8fCBwb3J0X251bWJl
ciA+PSBOVU1CRVJfT0ZfUE9SVFMpIHsNCisJCW1hdXNiX3ByX2luZm8oInBvcnRfbnVtYmVyIG91
dCBvZiByYW5nZSwgcG9ydF9udW1iZXI9JXgiLA0KKwkJCSAgICAgIHBvcnRfbnVtYmVyKTsNCisJ
CXJldHVybjsNCisJfQ0KKwlodWIgPSAoc3RydWN0IGh1Yl9jdHggKiloY2QtPmhjZF9wcml2Ow0K
Kw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwltYV9kZXYgPSBo
dWItPm1hX2RldnNbcG9ydF9udW1iZXJdLm1hX2RldjsNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9y
ZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlpZiAoIW1hX2Rldikgew0KKwkJbWF1c2JfcHJf
ZXJyKCJNQVVTQiBkZXZpY2Ugbm90IGZvdW5kIG9uIHBvcnRfbnVtYmVyPSVkIiwNCisJCQkgICAg
IHBvcnRfbnVtYmVyKTsNCisJCXJldHVybjsNCisJfQ0KKw0KKwlpc19jb250cm9sID0gdXNiX2Vu
ZHBvaW50X3hmZXJfY29udHJvbCgmZW5kcG9pbnQtPmRlc2MpOw0KKwllcG51bSA9IHVzYl9lbmRw
b2ludF9udW0oJmVuZHBvaW50LT5kZXNjKTsNCisJaXNfb3V0ID0gdXNiX2VuZHBvaW50X2Rpcl9v
dXQoJmVuZHBvaW50LT5kZXNjKTsNCisJdHNwID0gaXNfb3V0ID8gZGV2LT50b2dnbGVbMV0gOiBk
ZXYtPnRvZ2dsZVswXTsNCisNCisJc3RhdHVzID0gbWF1c2JfZXByZXNldF9ldmVudF90b191c2Vy
KG1hX2RldiwgZGV2X2hhbmRsZSwNCisJCQkJCSAgICAgZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUs
IHRzcCk7DQorDQorCW1hdXNiX3ByX2luZm8oImVwX3Jlc2V0IHN0YXR1cz0lZCwgZXBfaGFuZGxl
PSUjeCwgZGV2X2hhbmRsZT0lI3giLA0KKwkJICAgICAgc3RhdHVzLCBlbmRwb2ludF9jdHgtPmVw
X2hhbmRsZSwgZGV2X2hhbmRsZSk7DQorDQorCWlmIChzdGF0dXMgPCAwKQ0KKwkJcmV0dXJuOw0K
Kw0KKwlpZiAoc3RhdHVzICE9IEVVQ0xFQU4pIHsNCisJCWlmICghdHNwKSB7DQorCQkJdXNiX3Nl
dHRvZ2dsZShkZXYsIGVwbnVtLCBpc19vdXQsIDApOw0KKwkJCWlmIChpc19jb250cm9sKQ0KKwkJ
CQl1c2Jfc2V0dG9nZ2xlKGRldiwgZXBudW0sICFpc19vdXQsIDApOw0KKwkJfQ0KKw0KKwkJc3Rh
dHVzID0gbWF1c2JfZXBhY3RpdmF0ZV9ldmVudF90b191c2VyKG1hX2RldiwgZGV2X2hhbmRsZSwN
CisJCQkJCQllbmRwb2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQorCQltYXVzYl9wcl9lcnIoImVw
X2FjdGl2YXRlIGZhaWxlZCwgc3RhdHVzPSVkLCBlcF9oYW5kbGU9JSN4LCBkZXZfaGFuZGxlPSUj
eCIsDQorCQkJICAgICBzdGF0dXMsIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlLCBkZXZfaGFuZGxl
KTsNCisNCisJCXJldHVybjsNCisJfQ0KKw0KKwlpZiAodHNwKQ0KKwkJcmV0dXJuOw0KKw0KKwlz
dGF0dXMgPSBtYXVzYl9lcGluYWN0aXZhdGVfZXZlbnRfdG9fdXNlcihtYV9kZXYsIGRldl9oYW5k
bGUsDQorCQkJCQkJICBlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSk7DQorDQorCW1hdXNiX3ByX2lu
Zm8oImVwX2luYWN0aXZhdGUgc3RhdHVzPSVkLCBlcF9oYW5kbGU9JSN4LCBkZXZfaGFuZGxlPSUj
eCIsDQorCQkgICAgICBzdGF0dXMsIGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlLCBkZXZfaGFuZGxl
KTsNCisNCisJaWYgKHN0YXR1cyA8IDApDQorCQlyZXR1cm47DQorDQorCXN0YXR1cyA9IG1hdXNi
X2VwZGVsZXRlX2V2ZW50X3RvX3VzZXIobWFfZGV2LCBkZXZfaGFuZGxlLA0KKwkJCQkJICAgICAg
ZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUpOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJlcF9oYW5kbGVf
ZGVsZXRlIHN0YXR1cz0lZCwgZXBfaGFuZGxlPSUjeCwgZGV2X2hhbmRsZT0lI3giLA0KKwkJICAg
ICAgc3RhdHVzLCBlbmRwb2ludF9jdHgtPmVwX2hhbmRsZSwgZGV2X2hhbmRsZSk7DQorDQorCWlm
IChzdGF0dXMgPCAwKQ0KKwkJcmV0dXJuOw0KKw0KKwlpZiAoZGV2LT5zcGVlZCA+PSBVU0JfU1BF
RURfU1VQRVIpIHsNCisJCW1hdXNiX2luaXRfc3VwZXJzcGVlZF9lcF9kZXNjcmlwdG9yKCZkZXNj
cmlwdG9yX3NzLA0KKwkJCQkJCSAgICAmZW5kcG9pbnQtPmRlc2MsDQorCQkJCQkJICAgICZlbmRw
b2ludC0+c3NfZXBfY29tcCk7DQorCQlzdGF0dXMgPSBtYXVzYl9lcGhhbmRsZV9ldmVudF90b191
c2VyKG1hX2RldiwgZGV2X2hhbmRsZSwNCisJCQkJCQkgICAgICBzaXplb2YoZGVzY3JpcHRvcl9z
cyksDQorCQkJCQkJICAgICAgJmRlc2NyaXB0b3Jfc3MsDQorCQkJCQkJICAgICAgJmVuZHBvaW50
X2N0eC0+ZXBfaGFuZGxlKTsNCisJfSBlbHNlIHsNCisJCW1hdXNiX2luaXRfc3RhbmRhcmRfZXBf
ZGVzY3JpcHRvcigmZGVzY3JpcHRvciwgJmVuZHBvaW50LT5kZXNjKTsNCisJCXN0YXR1cyA9IG1h
dXNiX2VwaGFuZGxlX2V2ZW50X3RvX3VzZXIobWFfZGV2LCBkZXZfaGFuZGxlLA0KKwkJCQkJCSAg
ICAgIHNpemVvZihkZXNjcmlwdG9yKSwNCisJCQkJCQkgICAgICAmZGVzY3JpcHRvciwNCisJCQkJ
CQkgICAgICAmZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUpOw0KKwl9DQorDQorCW1hdXNiX3ByX2lu
Zm8oImVwX2hhbmRsZSByZXF1ZXN0IHN0YXR1cz0lZCwgZXBfaGFuZGxlPSUjeCwgZGV2X2hhbmRs
ZT0lI3giLA0KKwkJCXN0YXR1cywgZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUsIGRldl9oYW5kbGUp
Ow0KK30NCisNCisvKg0KKyAqIEZvciB1c2IgMi4wIGxvZ2l0ZWNoIGNhbWVyYSBjYWxsZWQgbXVs
dGlwbGUgdGltZXMsDQorICogZm9sbG93ZWQgYnkgZWl0aGVyIG1hdXNiX2VuYWJsZV9kZXZpY2Ug
b3IgbWF1c2JfYWRkcmVzc19kZXZpY2UuDQorICogUmVzZXRzIGRldmljZSB0byBub24tYWRkcmVz
c2VkIHN0YXRlLg0KKyAqLw0KK3N0YXRpYyBpbnQgbWF1c2JfcmVzZXRfZGV2aWNlKHN0cnVjdCB1
c2JfaGNkICpoY2QsIHN0cnVjdCB1c2JfZGV2aWNlICpkZXYpDQorew0KKwlpbnQ4X3QJIHBvcnRf
bnVtYmVyID0gMDsNCisJdWludDE2X3QgZGV2X2hhbmRsZTsNCisJaW50IHN0YXR1cyA9IDA7DQor
CXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorCXN0cnVjdCBodWJfY3R4CQkgICAgKmh1YjsNCisJc3Ry
dWN0IG1hdXNiX2RldmljZQkgICAgKm1hX2RldjsNCisJc3RydWN0IG1hdXNiX3VzYl9kZXZpY2Vf
Y3R4ICp1c2JfZGV2aWNlX2N0eDsNCisNCisJaHViID0gKHN0cnVjdCBodWJfY3R4ICopaGNkLT5o
Y2RfcHJpdjsNCisJcG9ydF9udW1iZXIgPSBnZXRfcm9vdF9odWJfcG9ydF9udW1iZXIoZGV2KTsN
CisNCisJaWYgKHBvcnRfbnVtYmVyIDwgMCB8fCBwb3J0X251bWJlciA+PSBOVU1CRVJfT0ZfUE9S
VFMpIHsNCisJCW1hdXNiX3ByX2luZm8oInBvcnRfbnVtYmVyIG91dCBvZiByYW5nZSwgcG9ydF9u
dW1iZXI9JXgiLA0KKwkJCSAgICAgIHBvcnRfbnVtYmVyKTsNCisJCXJldHVybiAtRUlOVkFMOw0K
Kwl9DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCW1hX2Rl
diA9IGh1Yi0+bWFfZGV2c1twb3J0X251bWJlcl0ubWFfZGV2Ow0KKwlzcGluX3VubG9ja19pcnFy
ZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCWlmICghbWFfZGV2KSB7DQorCQltYXVz
Yl9wcl9lcnIoIk1BVVNCIGRldmljZSBub3QgZm91bmQgb24gcG9ydF9udW1iZXI9JWQiLA0KKwkJ
CSAgICAgcG9ydF9udW1iZXIpOw0KKwkJcmV0dXJuIC1FTk9ERVY7DQorCX0NCisNCisJdXNiX2Rl
dmljZV9jdHggPQ0KKwkgICAgbWF1c2JfZmluZF91c2JfZGV2aWNlKCZodWItPm1hX2RldnNbcG9y
dF9udW1iZXJdLCBkZXYpOw0KKw0KKwlpZiAoIXVzYl9kZXZpY2VfY3R4IHx8DQorCQl1c2JfZGV2
aWNlX2N0eC0+ZGV2X2hhbmRsZSA9PSBERVZfSEFORExFX05PVF9BU1NJR05FRCkNCisJCXJldHVy
biAwOw0KKw0KKwlkZXZfaGFuZGxlID0gdXNiX2RldmljZV9jdHgtPmRldl9oYW5kbGU7DQorDQor
CXN0YXR1cyA9IG1hdXNiX3VzYmRldnJlc2V0X2V2ZW50X3RvX3VzZXIobWFfZGV2LCBkZXZfaGFu
ZGxlKTsNCisNCisJbWF1c2JfcHJfaW5mbygidXNiX2Rldl9yZXNldCBkZXZfaGFuZGxlPSUjeCwg
c3RhdHVzPSVkIiwNCisJCSAgICAgIGRldl9oYW5kbGUsIHN0YXR1cyk7DQorDQorCWlmIChzdGF0
dXMgPT0gMCkNCisJCXVzYl9kZXZpY2VfY3R4LT5hZGRyZXNzZWQgPSBmYWxzZTsNCisNCisJcmV0
dXJuIHN0YXR1czsNCit9DQorDQorI2lmZGVmIElTT0NIX0NBTExCQUNLUw0KK2ludCBtYXVzYl9z
ZWNfZXZlbnRfcmluZ19zZXR1cChzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1bnNpZ25lZCBpbnQgaW50
cl9udW0pDQorew0KKwltYXVzYl9wcl9kZWJ1ZygiIik7DQorCXJldHVybiAwOw0KK30NCisNCitp
bnQgbWF1c2Jfc2VjX2V2ZW50X3JpbmdfY2xlYW51cChzdHJ1Y3QgdXNiX2hjZCAqaGNkLCB1bnNp
Z25lZCBpbnQgaW50cl9udW0pDQorew0KKwltYXVzYl9wcl9kZWJ1ZygiIik7DQorCXJldHVybiAw
Ow0KK30NCisNCitwaHlzX2FkZHJfdCBtYXVzYl9nZXRfc2VjX2V2ZW50X3JpbmdfcGh5c19hZGRy
KHN0cnVjdCB1c2JfaGNkICpoY2QsDQorCQkJCQkgICAgICAgdW5zaWduZWQgaW50IGludHJfbnVt
LA0KKwkJCQkJICAgICAgIGRtYV9hZGRyX3QgKmRtYSkNCit7DQorCW1hdXNiX3ByX2RlYnVnKCIi
KTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3BoeXNfYWRkcl90IG1hdXNiX2dldF94ZmVyX3Jpbmdf
cGh5c19hZGRyKHN0cnVjdCB1c2JfaGNkICpoY2QsDQorCQkJCQkgIHN0cnVjdCB1c2JfZGV2aWNl
ICp1ZGV2LA0KKwkJCQkJICBzdHJ1Y3QgdXNiX2hvc3RfZW5kcG9pbnQgKmVwLA0KKwkJCQkJICBk
bWFfYWRkcl90ICpkbWEpDQorew0KKwltYXVzYl9wcl9kZWJ1ZygiIik7DQorCXJldHVybiAwOw0K
K30NCisNCitpbnQgbWF1c2JfZ2V0X2NvcmVfaWQoc3RydWN0IHVzYl9oY2QgKmhjZCkNCit7DQor
CW1hdXNiX3ByX2RlYnVnKCIiKTsNCisJcmV0dXJuIDA7DQorfQ0KKyNlbmRpZiAvKiBJU09DSF9D
QUxMQkFDS1MgKi8NCisNCit2b2lkIG1hdXNiX2NsZWFyX2hjZF9tYWRldih1aW50MTZfdCBwb3J0
X251bWJlcikNCit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3MgPSAwOw0KKw0KKwlpZiAocG9ydF9u
dW1iZXIgPj0gTlVNQkVSX09GX1BPUlRTKSB7DQorCQltYXVzYl9wcl9lcnIoInBvcnRfbnVtYmVy
IG91dCBvZiByYW5nZSwgcG9ydF9udW1iZXI9JXgiLA0KKwkJCSAgICAgcG9ydF9udW1iZXIpOw0K
KwkJcmV0dXJuOw0KKwl9DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFn
cyk7DQorDQorCW1lbXNldCgmbWhjZC0+aGNkX2hzX2N0eC0+bWFfZGV2c1twb3J0X251bWJlcl0s
IDAsDQorCSAgICAgICBzaXplb2Yoc3RydWN0IG1hdXNiX2RldikpOw0KKwltZW1zZXQoJm1oY2Qt
PmhjZF9zc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJdLCAwLA0KKwkgICAgICAgc2l6ZW9mKHN0
cnVjdCBtYXVzYl9kZXYpKTsNCisNCisJbWhjZC0+Y29ubmVjdGVkX3BvcnRzICY9IH4oMSA8PCBw
b3J0X251bWJlcik7DQorDQorCW1oY2QtPmhjZF9oc19jdHgtPm1hX2RldnNbcG9ydF9udW1iZXJd
LnBvcnRfc3RhdHVzID0NCisJCQkJCQkJVVNCX1BPUlRfU1RBVF9QT1dFUjsNCisJbWhjZC0+aGNk
X3NzX2N0eC0+bWFfZGV2c1twb3J0X251bWJlcl0ucG9ydF9zdGF0dXMgPQ0KKwkJCQkJCQlVU0Jf
U1NfUE9SVF9TVEFUX1BPV0VSOw0KKw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5s
b2NrLCBmbGFncyk7DQorfQ0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0
L3NyYy9oY2QvbW9kdWxlX2luaXQuYyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy9o
Y2QvbW9kdWxlX2luaXQuYw0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAw
MC4uN2FjMjRjNDA5MTU2DQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1
c2JfaG9zdC9zcmMvaGNkL21vZHVsZV9pbml0LmMNCkBAIC0wLDAgKzEsMjM5IEBADQorLy8gU1BE
WC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAx
OSAtIDIwMjAgRGlzcGxheUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3Vi
amVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1Ymxp
Yw0KKyAqIExpY2Vuc2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVj
dG9yeSBvZiB0aGlzIGFyY2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNs
dWRlIDxsaW51eC9pbi5oPg0KKyNpbmNsdWRlIDxsaW51eC9pbmV0Lmg+DQorI2luY2x1ZGUgPGxp
bnV4L2luaXQuaD4NCisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+DQorI2luY2x1ZGUgPGxpbnV4
L2tvYmplY3QuaD4NCisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorI2luY2x1ZGUgPGxpbnV4
L21vZHVsZXBhcmFtLmg+DQorI2luY2x1ZGUgPGxpbnV4L25ldC5oPg0KKw0KKyNpbmNsdWRlICJj
b21tb24vbWF1c2JfYWRkcmVzcy5oIg0KKyNpbmNsdWRlICJoY2QvdmhjZC5oIg0KKyNpbmNsdWRl
ICJocGFsL2hwYWwuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9ncy5oIg0KKyNpbmNsdWRl
ICJ1dGlscy9tYXVzYl9tbWFwLmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX3ZlcnNpb24uaCIN
CisNCitNT0RVTEVfTElDRU5TRSgiR1BMIik7DQorTU9EVUxFX0FVVEhPUigiRGlzcGxheUxpbmsg
KFVLKSBMdGQuIik7DQorTU9EVUxFX1ZFUlNJT04oTUFVU0JfRFJJVkVSX1ZFUlNJT04pOw0KKw0K
K3N0YXRpYyBzdHJ1Y3QgbWF1c2JfZGV2aWNlX2FkZHJlc3MJZGV2aWNlX2FkZHJlc3M7DQorc3Rh
dGljIGludAkJCQltYXVzYl9kZXZpY2VfZGlzY29ubmVjdF9wYXJhbTsNCitzdGF0aWMgdWludDY0
X3QJCQkJbWF1c2JfZXZlbnRfY291bnRfcGFyYW07DQorc3RhdGljIHVpbnQxNl90CQkJCW1hZGV2
X2FkZHI7DQorc3RhdGljIHVpbnQ4X3QJCQkJbWF1c2JfY2xpZW50X2Nvbm5lY3RfcGFyYW07DQor
c3RhdGljIHVpbnQ4X3QJCQkJbWF1c2JfY2xpZW50X2Rpc2Nvbm5lY3RfcGFyYW07DQorDQorc3Rh
dGljIGludCBtYXVzYl9jbGllbnRfY29ubmVjdChjb25zdCBjaGFyICp2YWx1ZSwNCisJCQkJY29u
c3Qgc3RydWN0IGtlcm5lbF9wYXJhbSAqa3ApDQorew0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0g
MDsNCisNCisJbWF1c2JfcHJfaW5mbygiVmVyc2lvbj0lcyIsIE1BVVNCX0RSSVZFUl9WRVJTSU9O
KTsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1zcy5sb2NrLCBmbGFncyk7DQorCWlmIChtc3Mu
Y2xpZW50X2Nvbm5lY3RlZCkgew0KKwkJbWF1c2JfcHJfZXJyKCJNQS1VU0IgY2xpZW50IGlzIGFs
cmVhZHkgY29ubmVjdGVkIik7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtc3MubG9jaywg
ZmxhZ3MpOw0KKwkJcmV0dXJuIC1FRVhJU1Q7DQorCX0NCisJLyogU2F2ZSBoZWFydGJlYXQgY2xp
ZW50IGluZm9ybWF0aW9uICovDQorCW1zcy5jbGllbnRfY29ubmVjdGVkID0gdHJ1ZTsNCisJbXNz
Lm1pc3NlZF9oZWFydGJlYXRzID0gMDsNCisJcmVpbml0X2NvbXBsZXRpb24oJm1zcy5jbGllbnRf
c3RvcHBlZCk7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1zcy5sb2NrLCBmbGFncyk7DQor
CS8qIFN0YXJ0IGhlYXJiZWF0IHRpbWVyICovDQorCW1vZF90aW1lcigmbXNzLmhlYXJ0YmVhdF90
aW1lciwNCisJCQlqaWZmaWVzICsgbXNlY3NfdG9famlmZmllcyhNQVVTQl9IRUFSVEJFQVRfVElN
RU9VVF9NUykpOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9jbGll
bnRfZGlzY29ubmVjdChjb25zdCBjaGFyICp2YWx1ZSwNCisJCQkJICAgY29uc3Qgc3RydWN0IGtl
cm5lbF9wYXJhbSAqa3ApDQorew0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0gMDsNCisNCisJbWF1
c2JfcHJfaW5mbygiVmVyc2lvbj0lcyIsIE1BVVNCX0RSSVZFUl9WRVJTSU9OKTsNCisNCisJc3Bp
bl9sb2NrX2lycXNhdmUoJm1zcy5sb2NrLCBmbGFncyk7DQorCWlmICghbXNzLmNsaWVudF9jb25u
ZWN0ZWQpIHsNCisJCW1hdXNiX3ByX2VycigiTUEtVVNCIGNsaWVudCBpcyBub3QgY29ubmVjdGVk
Iik7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwkJcmV0
dXJuIC1FTk9ERVY7DQorCX0NCisNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ss
IGZsYWdzKTsNCisNCisJLyogU3RvcCBoZWFydGJlYXQgdGltZXIgKi8NCisJZGVsX3RpbWVyX3N5
bmMoJm1zcy5oZWFydGJlYXRfdGltZXIpOw0KKw0KKwkvKiBDbGVhciBoZWFydGJlYXQgY2xpZW50
IGluZm9ybWF0aW9uICovDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0K
Kwltc3MuY2xpZW50X2Nvbm5lY3RlZCA9IGZhbHNlOw0KKwltc3MubWlzc2VkX2hlYXJ0YmVhdHMg
PSAwOw0KKwljb21wbGV0ZSgmbXNzLmNsaWVudF9zdG9wcGVkKTsNCisJc3Bpbl91bmxvY2tfaXJx
cmVzdG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRp
YyBpbnQgbWF1c2JfZGV2aWNlX2Nvbm5lY3QoY29uc3QgY2hhciAqdmFsdWUsDQorCQkJCWNvbnN0
IHN0cnVjdCBrZXJuZWxfcGFyYW0gKmtwKQ0KK3sNCisJaW50IHN0YXR1cyA9IDA7DQorDQorCW1h
dXNiX3ByX2luZm8oIlZlcnNpb249JXMiLCBNQVVTQl9EUklWRVJfVkVSU0lPTik7DQorDQorCWlm
IChzdHJsZW4odmFsdWUpIDw9IElORVRfQUREUlNUUkxFTikgew0KKwkJc3RyY3B5KGRldmljZV9h
ZGRyZXNzLklwLkFkZHJlc3MuaXA0LCB2YWx1ZSk7DQorCQkvKiBBZGQgbGlzdCBvZiBhbHJlYWR5
IGNvbm5lY3RlZCBkZXZpY2VzICovDQorCX0gZWxzZSBpZiAoc3RybGVuKHZhbHVlKSA8PSBJTkVU
Nl9BRERSU1RSTEVOKSB7DQorCQkvKiBMb2dpYyBmb3IgaXA2ICovDQorCX0gZWxzZSB7DQorCQlt
YXVzYl9wcl9lcnIoIkludmFsaWQgSVAgZm9ybWF0Iik7DQorCQlyZXR1cm4gMDsNCisJfQ0KKwlz
dGF0dXMgPSBtYXVzYl9pbml0aWF0ZV9kZXZfY29ubmVjdGlvbihkZXZpY2VfYWRkcmVzcywgbWFk
ZXZfYWRkcik7DQorCW1lbXNldCgmZGV2aWNlX2FkZHJlc3MsIDAsIHNpemVvZihkZXZpY2VfYWRk
cmVzcykpOw0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2Rl
dmljZV9kaXNjb25uZWN0KGNvbnN0IGNoYXIgKnZhbHVlLA0KKwkJCQkgIGNvbnN0IHN0cnVjdCBr
ZXJuZWxfcGFyYW0gKmtwKQ0KK3sNCisJdWludDhfdCBkZXZpY2VfYWRkcmVzcyA9IDA7DQorCWlu
dCBzdGF0dXMgPSAwOw0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0gMDsNCisJc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2ID0gTlVMTDsNCisNCisJbWF1c2JfcHJfaW5mbygiVmVyc2lvbj0lcyIsIE1B
VVNCX0RSSVZFUl9WRVJTSU9OKTsNCisNCisJc3RhdHVzID0ga3N0cnRvdTgodmFsdWUsIDAsICZk
ZXZpY2VfYWRkcmVzcyk7DQorCWlmIChzdGF0dXMgPCAwKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQor
DQorCXNwaW5fbG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKw0KKwlkZXYgPSBtYXVz
Yl9nZXRfZGV2X2Zyb21fYWRkcl91bnNhZmUoZGV2aWNlX2FkZHJlc3MpOw0KKwlpZiAoZGV2KQ0K
KwkJcXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2LT5oY2RfZGlzY29ubmVjdF93b3JrKTsNCisN
CisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisNCisJcmV0dXJu
IDA7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfZXZlbnRfcGFyYW0oY29uc3QgY2hhciAqdmFs
dWUsDQorCQkJICAgICBjb25zdCBzdHJ1Y3Qga2VybmVsX3BhcmFtICprcCkNCit7DQorCXVpbnQ2
NF90IG1hdXNiX2FkZHJfYW5kX2V2ZW50X2NvdW50ID0gMDsNCisJaW50IHN0YXR1cyA9IGtzdHJ0
b3U2NCh2YWx1ZSwgMCwgJm1hdXNiX2FkZHJfYW5kX2V2ZW50X2NvdW50KTsNCisJdWludDMyX3Qg
bWF1c2JfYWRkcmVzczsNCisJdWludDMyX3QgbWF1c2JfZXZlbnRfY291bnQ7DQorDQorCWlmIChz
dGF0dXMgPCAwKQ0KKwkJcmV0dXJuIC1FSU5WQUw7DQorDQorCW1hdXNiX2FkZHJlc3MgPSAobWF1
c2JfYWRkcl9hbmRfZXZlbnRfY291bnQgPj4gOCAqIHNpemVvZih1aW50MzJfdCkpOw0KKwltYXVz
Yl9ldmVudF9jb3VudCA9ICh1aW50MzJfdCkgbWF1c2JfYWRkcl9hbmRfZXZlbnRfY291bnQ7DQor
CW1hdXNiX3ByX2RlYnVnKCJ2YWx1ZT0lcywgbWF1c2JfZXZlbnRfY291bnQ9JSN4IiwNCisJCSAg
ICAgICB2YWx1ZSwgbWF1c2JfZXZlbnRfY291bnQpOw0KKw0KKwltYXVzYl9lbnF1ZXVlX2V2ZW50
X2Zyb21fdXNlcihtYXVzYl9hZGRyZXNzLCBtYXVzYl9ldmVudF9jb3VudCk7DQorCXJldHVybiAw
Ow0KK30NCisNCitzdGF0aWMgY29uc3Qgc3RydWN0IGtlcm5lbF9wYXJhbV9vcHMgbWF1c2JfZGV2
aWNlX2Nvbm5lY3Rfb3BzID0gew0KKwkuc2V0ID0gbWF1c2JfZGV2aWNlX2Nvbm5lY3QNCit9Ow0K
Kw0KK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga2VybmVsX3BhcmFtX29wcyBtYXVzYl9kZXZpY2VfZGlz
Y29ubmVjdF9vcHMgPSB7DQorCS5zZXQgPSBtYXVzYl9kZXZpY2VfZGlzY29ubmVjdA0KK307DQor
DQorc3RhdGljIGNvbnN0IHN0cnVjdCBrZXJuZWxfcGFyYW1fb3BzIG1hdXNiX2NsaWVudF9jb25u
ZWN0X29wcyA9IHsNCisJLnNldCA9IG1hdXNiX2NsaWVudF9jb25uZWN0DQorfTsNCisNCitzdGF0
aWMgY29uc3Qgc3RydWN0IGtlcm5lbF9wYXJhbV9vcHMgbWF1c2JfY2xpZW50X2Rpc2Nvbm5lY3Rf
b3BzID0gew0KKwkuc2V0ID0gbWF1c2JfY2xpZW50X2Rpc2Nvbm5lY3QNCit9Ow0KKw0KK3N0YXRp
YyBjb25zdCBzdHJ1Y3Qga2VybmVsX3BhcmFtX29wcyBtYXVzYl9ldmVudF9vcHMgPSB7DQorCS5z
ZXQgPSBtYXVzYl9ldmVudF9wYXJhbQ0KK307DQorDQorbW9kdWxlX3BhcmFtX25hbWVkKG1nbXQs
IGRldmljZV9hZGRyZXNzLklwLlBvcnQubWFuYWdlbWVudCwgdXNob3J0LCAwNjY0KTsNCitNT0RV
TEVfUEFSTV9ERVNDKG1nbXQsICJNQS1VU0IgbWFuYWdlbWVudCBwb3J0Iik7DQorbW9kdWxlX3Bh
cmFtX25hbWVkKGN0cmwsIGRldmljZV9hZGRyZXNzLklwLlBvcnQuY29udHJvbCwgdXNob3J0LCAw
NjY0KTsNCitNT0RVTEVfUEFSTV9ERVNDKGN0cmwsICJNQS1VU0IgY29udHJvbCBwb3J0Iik7DQor
bW9kdWxlX3BhcmFtX25hbWVkKGJ1bGssIGRldmljZV9hZGRyZXNzLklwLlBvcnQuYnVsaywgdXNo
b3J0LCAwNjY0KTsNCitNT0RVTEVfUEFSTV9ERVNDKGJ1bGssICJNQS1VU0IgYnVsayBwb3J0Iik7
DQorbW9kdWxlX3BhcmFtX25hbWVkKGlzb2NoLCBkZXZpY2VfYWRkcmVzcy5JcC5Qb3J0Lmlzb2No
cm9ub3VzLCB1c2hvcnQsIDA2NjQpOw0KK01PRFVMRV9QQVJNX0RFU0MoaXNvY2gsICJNQS1VU0Ig
aXNvY2hyb25vdXMgcG9ydCIpOw0KK21vZHVsZV9wYXJhbV9uYW1lZChtYWRldl9hZGRyLCBtYWRl
dl9hZGRyLCB1c2hvcnQsIDA2NjQpOw0KK01PRFVMRV9QQVJNX0RFU0MobWFkZXZfYWRkciwgIk1B
LVVTQiBkZXZpY2UgYWRkcmVzcyIpOw0KKw0KK21vZHVsZV9wYXJhbV9jYihjbGllbnRfY29ubmVj
dCwgJm1hdXNiX2NsaWVudF9jb25uZWN0X29wcywNCisJCSZtYXVzYl9jbGllbnRfY29ubmVjdF9w
YXJhbSwgMDY2NCk7DQorbW9kdWxlX3BhcmFtX2NiKGNsaWVudF9kaXNjb25uZWN0LCAmbWF1c2Jf
Y2xpZW50X2Rpc2Nvbm5lY3Rfb3BzLA0KKwkJJm1hdXNiX2NsaWVudF9kaXNjb25uZWN0X3BhcmFt
LCAwNjY0KTsNCittb2R1bGVfcGFyYW1fY2IoaXAsICZtYXVzYl9kZXZpY2VfY29ubmVjdF9vcHMs
DQorCQlkZXZpY2VfYWRkcmVzcy5JcC5BZGRyZXNzLmlwNCwgMDY2NCk7DQorbW9kdWxlX3BhcmFt
X2NiKGRpc2Nvbm5lY3QsICZtYXVzYl9kZXZpY2VfZGlzY29ubmVjdF9vcHMsDQorCQkmbWF1c2Jf
ZGV2aWNlX2Rpc2Nvbm5lY3RfcGFyYW0sIDA2NjQpOw0KK21vZHVsZV9wYXJhbV9jYihtYXVzYl9l
dmVudCwgJm1hdXNiX2V2ZW50X29wcywgJm1hdXNiX2V2ZW50X2NvdW50X3BhcmFtLCAwNjY0KTsN
CisNCitzdGF0aWMgaW50IGhvc3RfbWF1c2JfaW5pdCh2b2lkKQ0KK3sNCisJaW50IHN0YXR1czsN
CisNCisJbWF1c2JfcHJfaW5mbygiTW9kdWxlIGxvYWQuIFZlcnNpb249JXMiLCBNQVVTQl9EUklW
RVJfVkVSU0lPTik7DQorCXN0YXR1cyA9IG1hdXNiX2luaXRfaGNkKCk7DQorCWlmIChzdGF0dXMg
PCAwKQ0KKwkJZ290byBjbGVhbnVwOw0KKw0KKwlzdGF0dXMgPSBtYXVzYl9yZWdpc3Rlcl9wb3dl
cl9zdGF0ZV9saXN0ZW5lcigpOw0KKwlpZiAoc3RhdHVzIDwgMCkNCisJCWdvdG8gY2xlYW51cF9o
Y2Q7DQorDQorCXN0YXR1cyA9IG1hdXNiX2NyZWF0ZV9kZXYoKTsNCisJaWYgKHN0YXR1cyA8IDAp
DQorCQlnb3RvIHVucmVnaXN0ZXJfcG93ZXJfc3RhdGVfbGlzdGVuZXI7DQorDQorCW1hdXNiX2lu
aXRpYWxpemVfbXNzKCk7DQorDQorCXJldHVybiAwOw0KKw0KK3VucmVnaXN0ZXJfcG93ZXJfc3Rh
dGVfbGlzdGVuZXI6DQorCW1hdXNiX3VucmVnaXN0ZXJfcG93ZXJfc3RhdGVfbGlzdGVuZXIoKTsN
CitjbGVhbnVwX2hjZDoNCisJbWF1c2JfZGVpbml0X2hjZCgpOw0KK2NsZWFudXA6DQorCW1hdXNi
X3ByX2FsZXJ0KCJGYWlsZWQgdG8gbG9hZCBNQVVTQiBtb2R1bGUhIik7DQorCXJldHVybiBzdGF0
dXM7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIGhvc3RfbWF1c2JfZXhpdCh2b2lkKQ0KK3sNCisJbWF1
c2JfcHJfaW5mbygiTW9kdWxlIHVubG9hZGluZyBzdGFydGVkLi4uIik7DQorCW1hdXNiX3VucmVn
aXN0ZXJfcG93ZXJfc3RhdGVfbGlzdGVuZXIoKTsNCisJbWF1c2JfZGVpbml0aWFsaXplX21zcygp
Ow0KKwltYXVzYl9kZWluaXRfaGNkKCk7DQorCW1hdXNiX2NsZWFudXBfZGV2KDEpOw0KKwltYXVz
Yl9wcl9pbmZvKCJNb2R1bGUgdW5sb2FkZWQuIFZlcnNpb249JXMiLCBNQVVTQl9EUklWRVJfVkVS
U0lPTik7DQorfQ0KKw0KK21vZHVsZV9pbml0KGhvc3RfbWF1c2JfaW5pdCk7DQorbW9kdWxlX2V4
aXQoaG9zdF9tYXVzYl9leGl0KTsNCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2Jf
aG9zdC9zcmMvaGNkL3ZoY2QuYyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy9oY2Qv
dmhjZC5jDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi5iYmYwN2Mw
OTVjYmYNCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3Ny
Yy9oY2QvdmhjZC5jDQpAQCAtMCwwICsxLDIxNiBAQA0KKy8vIFNQRFgtTGljZW5zZS1JZGVudGlm
aWVyOiBHUEwtMi4wDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlM
aW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1z
IGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYy
LiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNo
aXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaW5jbHVkZSAiaGNkL3ZoY2QuaCIN
CisNCisjaW5jbHVkZSA8bGludXgvaW5pdC5oPg0KKyNpbmNsdWRlIDxsaW51eC9rZXJuZWwuaD4N
CisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorDQorI2luY2x1ZGUgImhjZC9odWIuaCINCisj
aW5jbHVkZSAidXRpbHMvbWF1c2JfbG9ncy5oIg0KKw0KK3N0YXRpYyBpbnQgbWF1c2Jfb3Blbihz
dHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAqZmlsZSk7DQorc3RhdGljIGludCBtYXVz
Yl9yZWxlYXNlKHN0cnVjdCBpbm9kZSAqaW5vZGUsIHN0cnVjdCBmaWxlICpmaWxlKTsNCitzdGF0
aWMgc3NpemVfdCBtYXVzYl9yZWFkKHN0cnVjdCBmaWxlICpmaWxlLCBjaGFyIF9fdXNlciAqYnVm
ZmVyLCBzaXplX3QgbGVuZ3RoLA0KKwkJCWxvZmZfdCAqb2Zmc2V0KTsNCitzdGF0aWMgc3NpemVf
dCBtYXVzYl93cml0ZShzdHJ1Y3QgZmlsZSAqZmlsZSwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZmZl
ciwNCisJCQlzaXplX3QgbGVuZ3RoLCBsb2ZmX3QgKm9mZnNldCk7DQorc3RhdGljIGxvbmcgbWF1
c2JfaW9jdGwoc3RydWN0IGZpbGUgKmZpbGUsIHVuc2lnbmVkIGludCBpb2N0bF9mdW5jLA0KKwkJ
CXVuc2lnbmVkIGxvbmcgaW9jdGxfYnVmZmVyKTsNCitzdGF0aWMgaW50IG1hdXNiX2J1c19wcm9i
ZShzdHJ1Y3QgZGV2aWNlICpkZXYpOw0KK3N0YXRpYyBpbnQgbWF1c2JfYnVzX3JlbW92ZShzdHJ1
Y3QgZGV2aWNlICpkZXYpOw0KK3N0YXRpYyBpbnQgbWF1c2JfYnVzX21hdGNoKHN0cnVjdCBkZXZp
Y2UgKmRldiwgc3RydWN0IGRldmljZV9kcml2ZXIgKmRydik7DQorDQorc3RhdGljIGNvbnN0IHN0
cnVjdCBmaWxlX29wZXJhdGlvbnMgbWF1c2JfZm9wcyA9IHsNCisJLm9wZW4JCT0gbWF1c2Jfb3Bl
biwNCisJLnJlbGVhc2UJPSBtYXVzYl9yZWxlYXNlLA0KKwkucmVhZAkJPSBtYXVzYl9yZWFkLA0K
Kwkud3JpdGUJCT0gbWF1c2Jfd3JpdGUsDQorCS51bmxvY2tlZF9pb2N0bAk9IG1hdXNiX2lvY3Rs
DQorfTsNCisNCitzdGF0aWMgdW5zaWduZWQgaW50IG1ham9yOw0KK3N0YXRpYyB1bnNpZ25lZCBp
bnQgbWlub3IgPSAxOw0KK3N0YXRpYyBkZXZfdCBkZXZ0Ow0KK3N0YXRpYyBzdHJ1Y3QgZGV2aWNl
ICpkZXZpY2U7DQorDQorc3RydWN0IG1hdXNiX2hjZAkqbWhjZDsNCitzdGF0aWMgc3RydWN0IGNs
YXNzCSptYXVzYl9jbGFzczsNCitzdGF0aWMgc3RydWN0IGJ1c190eXBlCW1hdXNiX2J1c190eXBl
ID0gew0KKwkubmFtZQk9IERFVklDRV9OQU1FLA0KKwkubWF0Y2gJPSBtYXVzYl9idXNfbWF0Y2gs
DQorCS5wcm9iZQk9IG1hdXNiX2J1c19wcm9iZSwNCisJLnJlbW92ZQk9IG1hdXNiX2J1c19yZW1v
dmUsDQorfTsNCisNCitzdGF0aWMgc3RydWN0IGRldmljZV9kcml2ZXIgbWF1c2JfZHJpdmVyID0g
ew0KKwkubmFtZQk9IERFVklDRV9OQU1FLA0KKwkuYnVzCT0gJm1hdXNiX2J1c190eXBlLA0KKwku
b3duZXIJPSBUSElTX01PRFVMRSwNCit9Ow0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX3JlbW92ZSh2
b2lkKQ0KK3sNCisJc3RydWN0IHVzYl9oY2QgKmhjZCwgKnNoYXJlZF9oY2Q7DQorDQorCWhjZAkg
ICA9IG1oY2QtPmhjZF9oc19jdHgtPmhjZDsNCisJc2hhcmVkX2hjZCA9IG1oY2QtPmhjZF9zc19j
dHgtPmhjZDsNCisNCisJaWYgKHNoYXJlZF9oY2QpIHsNCisJCXVzYl9yZW1vdmVfaGNkKHNoYXJl
ZF9oY2QpOw0KKwkJdXNiX3B1dF9oY2Qoc2hhcmVkX2hjZCk7DQorCQltaGNkLT5oY2Rfc3NfY3R4
ID0gTlVMTDsNCisJfQ0KKw0KKwl1c2JfcmVtb3ZlX2hjZChoY2QpOw0KKwl1c2JfcHV0X2hjZCho
Y2QpOw0KKwltaGNkLT5oY2RfaHNfY3R4ID0gTlVMTDsNCit9DQorDQorc3RhdGljIGludCBtYXVz
Yl9idXNfcHJvYmUoc3RydWN0IGRldmljZSAqZGV2KQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiIik7
DQorCXJldHVybiBtYXVzYl9wcm9iZShkZXYpOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2J1
c19yZW1vdmUoc3RydWN0IGRldmljZSAqZGV2KQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiIik7DQor
CXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2J1c19tYXRjaChzdHJ1Y3QgZGV2
aWNlICpkZXYsIHN0cnVjdCBkZXZpY2VfZHJpdmVyICpkcnYpDQorew0KKwltYXVzYl9wcl9pbmZv
KCIiKTsNCisNCisJaWYgKHN0cm5jbXAoZGV2LT5idXMtPm5hbWUsIGRydi0+bmFtZSwgc3RybGVu
KGRydi0+bmFtZSkpKQ0KKwkJcmV0dXJuIDA7DQorCWVsc2UNCisJCXJldHVybiAxOw0KK30NCisN
CitzdGF0aWMgaW50IG1hdXNiX29wZW4oc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUg
KmZpbGUpDQorew0KKwltYXVzYl9wcl9pbmZvKCIiKTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0
YXRpYyBpbnQgbWF1c2JfcmVsZWFzZShzdHJ1Y3QgaW5vZGUgKmlub2RlLCBzdHJ1Y3QgZmlsZSAq
ZmlsZSkNCit7DQorCW1hdXNiX3ByX2luZm8oIiIpOw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3Rh
dGljIHNzaXplX3QgbWF1c2JfcmVhZChzdHJ1Y3QgZmlsZSAqZmlsZSwgY2hhciBfX3VzZXIgKmJ1
ZmZlciwgc2l6ZV90IGxlbmd0aCwNCisJCSAgIGxvZmZfdCAqb2Zmc2V0KQ0KK3sNCisJbWF1c2Jf
cHJfaW5mbygiIik7DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgc3NpemVfdCBtYXVzYl93
cml0ZShzdHJ1Y3QgZmlsZSAqZmlsZSwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZmZlciwNCisJCQlz
aXplX3QgbGVuZ3RoLCBsb2ZmX3QgKm9mZnNldCkNCit7DQorCW1hdXNiX3ByX2luZm8oIiIpOw0K
KwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGxvbmcgbWF1c2JfaW9jdGwoc3RydWN0IGZpbGUg
KmZpbGUsIHVuc2lnbmVkIGludCBpb2N0bF9mdW5jLA0KKwkJIHVuc2lnbmVkIGxvbmcgaW9jdGxf
YnVmZmVyKQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiIik7DQorCXJldHVybiAwOw0KK30NCisNCitp
bnQgbWF1c2JfaW5pdF9oY2Qodm9pZCkNCit7DQorCWludCByZXR2YWw7DQorDQorCXJldHZhbCA9
IHJlZ2lzdGVyX2NocmRldigwLCBERVZJQ0VfTkFNRSwgJm1hdXNiX2ZvcHMpOw0KKwlpZiAocmV0
dmFsIDwgMCkgew0KKwkJbWF1c2JfcHJfZXJyKCJSZWdpc3Rlcl9jaHJkZXYgZmFpbGVkIik7DQor
CQlyZXR1cm4gcmV0dmFsOw0KKwl9DQorDQorCW1ham9yID0gcmV0dmFsOw0KKwlyZXR2YWwgPSBi
dXNfcmVnaXN0ZXIoJm1hdXNiX2J1c190eXBlKTsNCisJaWYgKHJldHZhbCkgew0KKwkJbWF1c2Jf
cHJfZXJyKCJCdXNfcmVnaXN0ZXIgZmFpbGVkICVkIiwgcmV0dmFsKTsNCisJCWdvdG8gYnVzX3Jl
Z2lzdGVyX2Vycm9yOw0KKwl9DQorDQorCW1hdXNiX2NsYXNzID0gY2xhc3NfY3JlYXRlKFRISVNf
TU9EVUxFLCBDTEFTU19OQU1FKTsNCisJaWYgKElTX0VSUihtYXVzYl9jbGFzcykpIHsNCisJCW1h
dXNiX3ByX2VycigiQ2xhc3NfY3JlYXRlIGZhaWxlZCAlbGQiLCBQVFJfRVJSKG1hdXNiX2NsYXNz
KSk7DQorCQlnb3RvIGNsYXNzX2Vycm9yOw0KKwl9DQorDQorCXJldHZhbCA9IGRyaXZlcl9yZWdp
c3RlcigmbWF1c2JfZHJpdmVyKTsNCisJaWYgKHJldHZhbCkgew0KKwkJbWF1c2JfcHJfZXJyKCJE
cml2ZXJfcmVnaXN0ZXIgZmFpbGVkIik7DQorCQlnb3RvIGRyaXZlcl9yZWdpc3Rlcl9lcnJvcjsN
CisJfQ0KKw0KKwltaGNkID0ga3phbGxvYyhzaXplb2YoKm1oY2QpLCBHRlBfQVRPTUlDKTsNCisJ
aWYgKHVubGlrZWx5KCFtaGNkKSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIk1hdXNiX2hjZCBhbGxv
Y2F0aW9uIGZhaWxlZCIpOw0KKwkJZ290byBtYXVzYl9oY2RfYWxsb2NfZmFpbGVkOw0KKwl9DQor
DQorCWRldnQgPSBNS0RFVihtYWpvciwgbWlub3IpOw0KKwlkZXZpY2UgPSBkZXZpY2VfY3JlYXRl
KG1hdXNiX2NsYXNzLCBOVUxMLCBkZXZ0LCBtaGNkLCBERVZJQ0VfTkFNRSk7DQorDQorCWlmIChJ
U19FUlIoZGV2aWNlKSkgew0KKwkJbWF1c2JfcHJfZXJyKCJEZXZpY2VfY3JlYXRlIGZhaWxlZCAl
bGQiLCBQVFJfRVJSKGRldmljZSkpOw0KKwkJZ290byBkZXZpY2VfY3JlYXRlX2Vycm9yOw0KKwl9
DQorDQorCWRldmljZS0+ZHJpdmVyID0gJm1hdXNiX2RyaXZlcjsNCisNCisJcmV0dmFsID0gbWF1
c2JfcHJvYmUoZGV2aWNlKTsNCisNCisJaWYgKHJldHZhbCkgew0KKwkJbWF1c2JfcHJfZXJyKCJN
YXVzYl9wcm9iZSBmYWlsZWQiKTsNCisJCWdvdG8gbWF1c2JfcHJvYmVfZmFpbGVkOw0KKwl9DQor
DQorCXJldHVybiByZXR2YWw7DQorbWF1c2JfcHJvYmVfZmFpbGVkOg0KKwlkZXZpY2VfZGVzdHJv
eShtYXVzYl9jbGFzcywgZGV2dCk7DQorZGV2aWNlX2NyZWF0ZV9lcnJvcjoNCisJa2ZyZWUobWhj
ZCk7DQorCW1oY2QgPSBOVUxMOw0KK21hdXNiX2hjZF9hbGxvY19mYWlsZWQ6DQorCWRyaXZlcl91
bnJlZ2lzdGVyKCZtYXVzYl9kcml2ZXIpOw0KK2RyaXZlcl9yZWdpc3Rlcl9lcnJvcjoNCisJY2xh
c3NfZGVzdHJveShtYXVzYl9jbGFzcyk7DQorY2xhc3NfZXJyb3I6DQorCWJ1c191bnJlZ2lzdGVy
KCZtYXVzYl9idXNfdHlwZSk7DQorYnVzX3JlZ2lzdGVyX2Vycm9yOg0KKwl1bnJlZ2lzdGVyX2No
cmRldihtYWpvciwgREVWSUNFX05BTUUpOw0KKw0KKwlyZXR1cm4gcmV0dmFsOw0KK30NCisNCit2
b2lkIG1hdXNiX2RlaW5pdF9oY2Qodm9pZCkNCit7DQorCW1hdXNiX3ByX2luZm8oIlN0YXJ0Iik7
DQorDQorCWlmIChtaGNkKSB7DQorCQltYXVzYl9yZW1vdmUoKTsNCisJCWRldmljZV9kZXN0cm95
KG1hdXNiX2NsYXNzLCBkZXZ0KTsNCisJCWRyaXZlcl91bnJlZ2lzdGVyKCZtYXVzYl9kcml2ZXIp
Ow0KKwkJY2xhc3NfZGVzdHJveShtYXVzYl9jbGFzcyk7DQorCQlidXNfdW5yZWdpc3RlcigmbWF1
c2JfYnVzX3R5cGUpOw0KKwkJdW5yZWdpc3Rlcl9jaHJkZXYobWFqb3IsIERFVklDRV9OQU1FKTsN
CisJCWtmcmVlKG1oY2QpOw0KKwl9DQorDQorCW1hdXNiX3ByX2luZm8oIkZpbmlzaCIpOw0KK30N
CmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9kYXRhX2Nv
bW1vbi5jIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hwYWwvZGF0YV9jb21tb24u
Yw0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uMDMyYTg0NTgyZGJl
DQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBh
bC9kYXRhX2NvbW1vbi5jDQpAQCAtMCwwICsxLDEzOSBAQA0KKy8vIFNQRFgtTGljZW5zZS1JZGVu
dGlmaWVyOiBHUEwtMi4wDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3Bs
YXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRl
cm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNl
IHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBh
cmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaW5jbHVkZSAiaHBhbC9kYXRh
X2NvbW1vbi5oIg0KKw0KKyNpbmNsdWRlICJocGFsL2RhdGFfaW4uaCINCisjaW5jbHVkZSAiaHBh
bC9kYXRhX291dC5oIg0KKyNpbmNsdWRlICJocGFsL2lzb2NoX2luLmgiDQorI2luY2x1ZGUgImhw
YWwvaXNvY2hfb3V0LmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX2xvZ3MuaCINCisNCitzdGF0
aWMgaW5saW5lIHN0cnVjdCBtYXVzYl9pcF9jdHggKm1hdXNiX2dldF9kYXRhX2NoYW5uZWwoDQor
CQkJCQkJc3RydWN0IG1hdXNiX2RldmljZSAqbWFfZGV2LA0KKwkJCQkJCWVudW0gbWF1c2JfY2hh
bm5lbCBjaGFubmVsKQ0KK3sNCisJaWYgKGNoYW5uZWwgPj0gTUFVU0JfQ0hBTk5FTF9NQVBfTEVO
R1RIKQ0KKwkJcmV0dXJuIE5VTEw7DQorDQorCXJldHVybiBtYV9kZXYtPmNoYW5uZWxfbWFwW2No
YW5uZWxdOw0KK30NCisNCitpbnQgbWF1c2Jfc2VuZF9kYXRhKHN0cnVjdCBtYXVzYl9kZXZpY2Ug
KmRldiwgZW51bSBtYXVzYl9jaGFubmVsIGNoYW5uZWxfbnVtLA0KKwkJICAgIHN0cnVjdCBtYXVz
Yl9rdmVjX2RhdGFfd3JhcHBlciAqZGF0YSkNCit7DQorCXN0cnVjdCBtYXVzYl9pcF9jdHggKmNo
YW5uZWwgPSBtYXVzYl9nZXRfZGF0YV9jaGFubmVsKGRldiwgY2hhbm5lbF9udW0pOw0KKwlpbnQg
c3RhdHVzID0gMDsNCisNCisJaWYgKCFjaGFubmVsKQ0KKwkJcmV0dXJuIC1FQ0hSTkc7DQorDQor
CXN0YXR1cyA9IG1hdXNiX2lwX3NlbmQoY2hhbm5lbCwgZGF0YSk7DQorDQorCWlmIChzdGF0dXMg
PCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlNlbmQgZmFpbGVkLiBEaXNjb25uZWN0aW5nLi4uIHN0
YXR1cz0lZCIsIHN0YXR1cyk7DQorCQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZkZXYtPnNvY2tl
dF9kaXNjb25uZWN0X3dvcmspOw0KKwkJcXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2LT5oY2Rf
ZGlzY29ubmVjdF93b3JrKTsNCisJfQ0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitpbnQg
bWF1c2Jfc2VuZF90cmFuc2Zlcl9hY2soc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3Qg
bWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICphY2tf
aGRyOw0KKwlzdHJ1Y3Qga3ZlYyBrdmVjOw0KKwlzdHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBw
ZXIgZGF0YV90b19zZW5kOw0KKw0KKwlhY2tfaGRyID0gKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1v
biAqKSgmZXZlbnQtPmRhdGEuaGRyX2Fjayk7DQorDQorCWRhdGFfdG9fc2VuZC5rdmVjCSAgICA9
ICZrdmVjOw0KKwlkYXRhX3RvX3NlbmQua3ZlYy0+aW92X2Jhc2UgPSBhY2tfaGRyOw0KKwlkYXRh
X3RvX3NlbmQua3ZlYy0+aW92X2xlbiAgPSBhY2tfaGRyLT5sZW5ndGg7DQorCWRhdGFfdG9fc2Vu
ZC5rdmVjX251bQkgICAgPSAxOw0KKwlkYXRhX3RvX3NlbmQubGVuZ3RoCSAgICA9IGFja19oZHIt
Pmxlbmd0aDsNCisNCisJcmV0dXJuIG1hdXNiX3NlbmRfZGF0YShkZXYsIG1hdXNiX3RyYW5zZmVy
X3R5cGVfdG9fY2hhbm5lbCgNCisJCQkJCWV2ZW50LT5kYXRhLnRyYW5zZmVyX3R5cGUpLA0KKwkJ
CQkmZGF0YV90b19zZW5kKTsNCit9DQorDQoraW50IG1hdXNiX3NlbmRfZGF0YV9tc2coc3RydWN0
IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJc3Ry
dWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHg7DQorCWludCBzdGF0dXMgPSAwOw0KKw0KKwlpZiAo
ZXZlbnQtPnN0YXR1cyAhPSAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkV2ZW50ICVkIGZhaWxlZCB3
aXRoIHN0YXR1cyAlZCIsDQorCQkJICAgICBldmVudC0+dHlwZSwgZXZlbnQtPnN0YXR1cyk7DQor
CQltYXVzYl9jb21wbGV0ZV91cmIoZXZlbnQpOw0KKwkJcmV0dXJuIGV2ZW50LT5zdGF0dXM7DQor
CX0NCisNCisJdXJiX2N0eCA9IG1hdXNiX2ZpbmRfdXJiX2luX3RyZWUoKHN0cnVjdCB1cmIgKill
dmVudC0+ZGF0YS51cmIpOw0KKw0KKwlpZiAoIXVyYl9jdHgpIHsNCisJCS8qIFRyYW5zZmVyIHdp
bGwgYmUgZGVsZXRlZCBmcm9tIGRlcXVldWUgdGFzayAqLw0KKwkJbWF1c2JfcHJfd2FybigiVXJi
IGlzIGFscmVhZHkgY2FuY2VsbGVkIGZvciBldmVudD0lZCIsDQorCQkJICAgICAgZXZlbnQtPnR5
cGUpOw0KKwkJcmV0dXJuIHN0YXR1czsNCisJfQ0KKw0KKwlpZiAobWF1c2JfaXNvY2hfZGF0YV9l
dmVudChldmVudCkpDQorCQlpZiAoZXZlbnQtPmRhdGEuZGlyZWN0aW9uID09IE1BVVNCX0RBVEFf
TVNHX0RJUkVDVElPTl9JTikNCisJCQlzdGF0dXMgPSAgbWF1c2Jfc2VuZF9pc29jaF9pbl9tc2co
ZGV2LCBldmVudCk7DQorCQllbHNlDQorCQkJc3RhdHVzID0gbWF1c2Jfc2VuZF9pc29jaF9vdXRf
bXNnKGRldiwgZXZlbnQsIHVyYl9jdHgpOw0KKwllbHNlDQorCQlpZiAoZXZlbnQtPmRhdGEuZGly
ZWN0aW9uID09IE1BVVNCX0RBVEFfTVNHX0RJUkVDVElPTl9JTikNCisJCQlzdGF0dXMgPSAgbWF1
c2Jfc2VuZF9pbl9kYXRhX21zZyhkZXYsIGV2ZW50KTsNCisJCWVsc2UNCisJCQlzdGF0dXMgPSBt
YXVzYl9zZW5kX291dF9kYXRhX21zZyhkZXYsIGV2ZW50LCB1cmJfY3R4KTsNCisNCisJcmV0dXJu
IHN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX3JlY2VpdmVfZGF0YV9tc2coc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJaW50IHN0YXR1
cyA9IDA7DQorCXN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4Ow0KKw0KKwltYXVzYl9wcl9k
ZWJ1ZygiRGlyZWN0aW9uPSVkIiwgZXZlbnQtPmRhdGEuZGlyZWN0aW9uKTsNCisNCisJaWYgKCFt
YXVzYl9pc29jaF9kYXRhX2V2ZW50KGV2ZW50KSkgew0KKwkJc3RhdHVzID0gbWF1c2Jfc2VuZF90
cmFuc2Zlcl9hY2soZGV2LCBldmVudCk7DQorCQlpZiAoc3RhdHVzIDwgMCkgew0KKwkJCW1hdXNi
X3ByX3dhcm4oIlNlbmRpbmcgYWNrbm93bGVkZ2VtZW50IGZhaWxlZCIpOw0KKwkJCWdvdG8gY2xl
YW51cDsNCisJCX0NCisJfQ0KKw0KKwl1cmJfY3R4ID0gbWF1c2JfZmluZF91cmJfaW5fdHJlZSgo
c3RydWN0IHVyYiAqKWV2ZW50LT5kYXRhLnVyYik7DQorDQorCWlmICghdXJiX2N0eCkgew0KKwkJ
LyogVHJhbnNmZXIgd2lsbCBiZSBkZWxldGVkIGZyb20gZGVxdWV1ZSB0YXNrICovDQorCQltYXVz
Yl9wcl93YXJuKCJVcmIgaXMgYWxyZWFkeSBjYW5jZWxsZWQiKTsNCisJCWdvdG8gY2xlYW51cDsN
CisJfQ0KKw0KKwlpZiAobWF1c2JfaXNvY2hfZGF0YV9ldmVudChldmVudCkpDQorCQlpZiAoZXZl
bnQtPmRhdGEuZGlyZWN0aW9uID09IE1BVVNCX0RBVEFfTVNHX0RJUkVDVElPTl9JTikNCisJCQlz
dGF0dXMgPSBtYXVzYl9yZWNlaXZlX2lzb2NoX2luX2RhdGEoZGV2LCBldmVudCwNCisJCQkJCQkJ
ICAgICB1cmJfY3R4KTsNCisJCWVsc2UNCisJCQlzdGF0dXMgPSBtYXVzYl9yZWNlaXZlX2lzb2No
X291dChkZXYsIGV2ZW50LCB1cmJfY3R4KTsNCisJZWxzZQ0KKwkJaWYgKGV2ZW50LT5kYXRhLmRp
cmVjdGlvbiA9PSBNQVVTQl9EQVRBX01TR19ESVJFQ1RJT05fSU4pDQorCQkJc3RhdHVzID0gbWF1
c2JfcmVjZWl2ZV9pbl9kYXRhKGRldiwgZXZlbnQsIHVyYl9jdHgpOw0KKwkJZWxzZQ0KKwkJCXN0
YXR1cyA9IG1hdXNiX3JlY2VpdmVfb3V0X2RhdGEoZGV2LCBldmVudCwgdXJiX2N0eCk7DQorDQor
Y2xlYW51cDoNCisJbWF1c2JfcmVsZWFzZV9ldmVudF9yZXNvdXJjZXMoZXZlbnQpOw0KKwlyZXR1
cm4gc3RhdHVzOw0KK30NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9z
cmMvaHBhbC9kYXRhX2luLmMgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9k
YXRhX2luLmMNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjcwZDhm
YzAyZWY4YQ0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qv
c3JjL2hwYWwvZGF0YV9pbi5jDQpAQCAtMCwwICsxLDgyIEBADQorLy8gU1BEWC1MaWNlbnNlLUlk
ZW50aWZpZXI6IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlz
cGxheUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUg
dGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vu
c2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlz
IGFyY2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNsdWRlICJocGFsL2Rh
dGFfaW4uaCINCisNCisjaW5jbHVkZSAiaGNkL2h1Yi5oIg0KKyNpbmNsdWRlICJocGFsL2RhdGFf
Y29tbW9uLmgiDQorI2luY2x1ZGUgImhwYWwvbWF1c2JfZXZlbnRzLmgiDQorI2luY2x1ZGUgInV0
aWxzL21hdXNiX2RhdGFfaXRlcmF0b3IuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9ncy5o
Ig0KKw0KK2ludCBtYXVzYl9zZW5kX2luX2RhdGFfbXNnKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRl
diwgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCkNCit7DQorCWludCBzdGF0dXMgPSAwOw0KKwlz
dHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBwZXIgZGF0YV90b19zZW5kOw0KKwlzdHJ1Y3Qga3Zl
YyBrdmVjWzJdOw0KKwlzdHJ1Y3QgdXJiICp1cmIgICA9IChzdHJ1Y3QgdXJiICopKGV2ZW50LT5k
YXRhLnVyYik7DQorCWJvb2wgc2V0dXBfcGFja2V0ID0gKHVzYl9lbmRwb2ludF94ZmVyX2NvbnRy
b2woJnVyYi0+ZXAtPmRlc2MpICYmDQorCQkJICAgICB1cmItPnNldHVwX3BhY2tldCk7DQorCXVp
bnQzMl90IGt2ZWNfbnVtID0gc2V0dXBfcGFja2V0ID8gMiA6IDE7DQorDQorCWRhdGFfdG9fc2Vu
ZC5rdmVjX251bQk9IGt2ZWNfbnVtOw0KKwlkYXRhX3RvX3NlbmQubGVuZ3RoCT0gTUFVU0JfVFJB
TlNGRVJfSERSX1NJWkUgKw0KKwkJCQkJKHNldHVwX3BhY2tldCA/DQorCQkJCQkJTUFVU0JfQ09O
VFJPTF9TRVRVUF9TSVpFIDoNCisJCQkJCQkwKTsNCisNCisJLyogUHJlcGFyZSB0cmFuc2ZlciBo
ZWFkZXIga3ZlYyAqLw0KKwlrdmVjWzBdLmlvdl9iYXNlID0gZXZlbnQtPmRhdGEuaGRyOw0KKwlr
dmVjWzBdLmlvdl9sZW4gID0gTUFVU0JfVFJBTlNGRVJfSERSX1NJWkU7DQorDQorCS8qIFByZXBh
cmUgc2V0dXAgcGFja2V0IGt2ZWMgKi8NCisJaWYgKHNldHVwX3BhY2tldCkgew0KKwkJa3ZlY1sx
XS5pb3ZfYmFzZSA9IHVyYi0+c2V0dXBfcGFja2V0Ow0KKwkJa3ZlY1sxXS5pb3ZfbGVuICA9IE1B
VVNCX0NPTlRST0xfU0VUVVBfU0laRTsNCisJfQ0KKwlkYXRhX3RvX3NlbmQua3ZlYyA9IGt2ZWM7
DQorDQorCXN0YXR1cyA9IG1hdXNiX3NlbmRfZGF0YShkZXYsIG1hdXNiX3RyYW5zZmVyX3R5cGVf
dG9fY2hhbm5lbCgNCisJCQkJCQlldmVudC0+ZGF0YS50cmFuc2Zlcl90eXBlKSwNCisJCQkJJmRh
dGFfdG9fc2VuZCk7DQorDQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK2ludCBtYXVzYl9yZWNl
aXZlX2luX2RhdGEoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQg
KmV2ZW50LA0KKwkJCSAgc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHgpDQorew0KKwlzdHJ1
Y3QgdXJiICp1cmIgPSB1cmJfY3R4LT51cmI7DQorCXN0cnVjdCBtYXVzYl9kYXRhX2l0ZXIgKml0
ZXJhdG9yICAgICA9ICZ1cmJfY3R4LT5pdGVyYXRvcjsNCisJc3RydWN0IG1hX3VzYl9oZHJfY29t
bW9uICpjb21tb25faGRyID0NCisJCQkoc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICopZXZlbnQt
PmRhdGEucmVjdl9idWY7DQorCXVpbnQxNl90IHBheWxvYWRfc2l6ZSA9IGNvbW1vbl9oZHItPmxl
bmd0aCAtIE1BVVNCX1RSQU5TRkVSX0hEUl9TSVpFOw0KKwl1aW50MzJfdCBkYXRhX3dyaXR0ZW4g
PSAwOw0KKwlpbnQgc3RhdHVzID0gMDsNCisNCisJbWF1c2JfcHJfZGVidWcoIiIpOw0KKw0KKwlk
YXRhX3dyaXR0ZW4gPSBtYXVzYl9kYXRhX2l0ZXJhdG9yX3dyaXRlKGl0ZXJhdG9yLCBzaGlmdF9w
dHIoY29tbW9uX2hkciwNCisJCQkJCQkgTUFVU0JfVFJBTlNGRVJfSERSX1NJWkUpLA0KKwkJCQkJ
CSBwYXlsb2FkX3NpemUpOw0KKw0KKwltYXVzYl9wcl9kZWJ1ZygiZGF0YV93cml0dGVuPSVkLCBw
YXlsb2FkX3NpemU9JWQiLCBkYXRhX3dyaXR0ZW4sDQorCQkgICAgICAgcGF5bG9hZF9zaXplKTsN
CisJZXZlbnQtPmRhdGEucmVtX3RyYW5zZmVyX3NpemUgLT0gZGF0YV93cml0dGVuOw0KKw0KKwlp
ZiAoZXZlbnQtPmRhdGEudHJhbnNmZXJfZW90KSB7DQorCQltYXVzYl9wcl9kZWJ1ZygidHJhbnNm
ZXJfc2l6ZT0lZCwgcmVtX3RyYW5zZmVyX3NpemU9JWQsIHN0YXR1cz0lZCIsDQorCQkJICAgICAg
IGV2ZW50LT5kYXRhLnRyYW5zZmVyX3NpemUsDQorCQkJICAgICAgIGV2ZW50LT5kYXRhLnJlbV90
cmFuc2Zlcl9zaXplLCBldmVudC0+c3RhdHVzKTsNCisJCW1hdXNiX2NvbXBsZXRlX3JlcXVlc3Qo
dXJiLCBldmVudC0+ZGF0YS50cmFuc2Zlcl9zaXplIC0NCisJCQkJICAgICAgIGV2ZW50LT5kYXRh
LnJlbV90cmFuc2Zlcl9zaXplLA0KKwkJCQkgICAgICAgZXZlbnQtPnN0YXR1cyk7DQorCX0NCisN
CisJcmV0dXJuIHN0YXR1czsNCit9DQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9zdGFnaW5nL21hdXNi
X2hvc3Qvc3JjL2hwYWwvZGF0YV9vdXQuYyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3Ny
Yy9ocGFsL2RhdGFfb3V0LmMNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAw
MDAuLjcwYTc5OGRhMGYxYg0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21h
dXNiX2hvc3Qvc3JjL2hwYWwvZGF0YV9vdXQuYw0KQEAgLTAsMCArMSwyMDcgQEANCisvLyBTUERY
LUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMA0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5
IC0gMjAyMCBEaXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJq
ZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGlj
DQorICogTGljZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0
b3J5IG9mIHRoaXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2luY2x1
ZGUgPGhwYWwvZGF0YV9vdXQuaD4NCisNCisjaW5jbHVkZSA8bGludXgvc2xhYi5oPg0KKw0KKyNp
bmNsdWRlICJoY2QvaHViLmgiDQorI2luY2x1ZGUgImhwYWwvZGF0YV9jb21tb24uaCINCisjaW5j
bHVkZSAidXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oIg0KKyNpbmNsdWRlICJ1dGlscy9tYXVz
Yl9sb2dzLmgiDQorDQorc3RhdGljIGludCBtYXVzYl9hZGRfZGF0YV9jaHVuayh2b2lkICpidWZm
ZXIsIHUzMiBidWZmZXJfc2l6ZSwNCisJCQkgc3RydWN0IGxpc3RfaGVhZCAqY2h1bmtzX2xpc3Qp
DQorew0KKwlzdHJ1Y3QgbWF1c2JfcGF5bG9hZF9jaHVuayAqZGF0YV9jaHVuazsNCisNCisJZGF0
YV9jaHVuayA9IGt6YWxsb2Moc2l6ZW9mKCpkYXRhX2NodW5rKSwgR0ZQX0tFUk5FTCk7DQorCWlm
ICghZGF0YV9jaHVuaykNCisJCXJldHVybiAtRU5PTUVNOw0KKw0KKwkvKiBJbml0aWFsaXplIGRh
dGEgY2h1bmsgZm9yIE1BVVNCIGhlYWRlciBhbmQgYWRkIGl0IHRvIGNodW5rcyBsaXN0ICovDQor
CUlOSVRfTElTVF9IRUFEKCZkYXRhX2NodW5rLT5saXN0X2VudHJ5KTsNCisNCisJZGF0YV9jaHVu
ay0+a3ZlYy5pb3ZfYmFzZSA9IGJ1ZmZlcjsNCisJZGF0YV9jaHVuay0+a3ZlYy5pb3ZfbGVuICA9
IGJ1ZmZlcl9zaXplOw0KKwlsaXN0X2FkZF90YWlsKCZkYXRhX2NodW5rLT5saXN0X2VudHJ5LCBj
aHVua3NfbGlzdCk7DQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2luaXRf
ZGF0YV93cmFwcGVyKHN0cnVjdCBtYXVzYl9rdmVjX2RhdGFfd3JhcHBlciAqZGF0YSwNCisJCQkJ
ICAgc3RydWN0IGxpc3RfaGVhZCAqY2h1bmtzX2xpc3QsDQorCQkJCSAgIHVpbnQzMl90IG51bV9v
Zl9kYXRhX2NodW5rcykNCit7DQorCXN0cnVjdCBtYXVzYl9wYXlsb2FkX2NodW5rICpkYXRhX2No
dW5rID0gTlVMTCwNCisJCQkJICAgKnRtcCA9IE5VTEw7DQorCXVpbnQzMl90IGN1cnJlbnRfa3Zl
YyA9IDA7DQorDQorCWRhdGEtPmxlbmd0aCA9IDA7DQorCWRhdGEtPmt2ZWMgPQ0KKwkgICAga2Nh
bGxvYyhudW1fb2ZfZGF0YV9jaHVua3MsIHNpemVvZihzdHJ1Y3Qga3ZlYyksIEdGUF9LRVJORUwp
Ow0KKwlpZiAoIWRhdGEtPmt2ZWMpDQorCQlyZXR1cm4gLUVOT01FTTsNCisNCisJbGlzdF9mb3Jf
ZWFjaF9lbnRyeV9zYWZlKGRhdGFfY2h1bmssIHRtcCwgY2h1bmtzX2xpc3QsIGxpc3RfZW50cnkp
IHsNCisJCWRhdGEtPmt2ZWNbY3VycmVudF9rdmVjXS5pb3ZfYmFzZSA9DQorCQkJZGF0YV9jaHVu
ay0+a3ZlYy5pb3ZfYmFzZTsNCisJCWRhdGEtPmt2ZWNbY3VycmVudF9rdmVjXS5pb3ZfbGVuICA9
DQorCQkgICAgZGF0YV9jaHVuay0+a3ZlYy5pb3ZfbGVuOw0KKwkJKytkYXRhLT5rdmVjX251bTsN
CisJCWRhdGEtPmxlbmd0aCArPSBkYXRhX2NodW5rLT5rdmVjLmlvdl9sZW47DQorCQkrK2N1cnJl
bnRfa3ZlYzsNCisJfQ0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9pbml0
X2hlYWRlcl9kYXRhX2NodW5rKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqY29tbW9uX2hkciwN
CisJCQkJCXN0cnVjdCBsaXN0X2hlYWQgKmNodW5rc19saXN0LA0KKwkJCQkJdWludDMyX3QgKm51
bV9vZl9kYXRhX2NodW5rcykNCit7DQorCWludCBzdGF0dXMgPSBtYXVzYl9hZGRfZGF0YV9jaHVu
ayhjb21tb25faGRyLA0KKwkJCQkJICBNQVVTQl9UUkFOU0ZFUl9IRFJfU0laRSwNCisJCQkJCSAg
Y2h1bmtzX2xpc3QpOw0KKwkvKiBTdWNjZXNzICovDQorCWlmICghc3RhdHVzKQ0KKwkJKysoKm51
bV9vZl9kYXRhX2NodW5rcyk7DQorDQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK3N0YXRpYyBp
bnQgbWF1c2JfaW5pdF9jb250cm9sX2RhdGFfY2h1bmsoc3RydWN0IG1hdXNiX2V2ZW50ICpldmVu
dCwNCisJCQkJICBzdHJ1Y3QgbGlzdF9oZWFkICpjaHVua3NfbGlzdCwNCisJCQkJICB1aW50MzJf
dCAqbnVtX29mX2RhdGFfY2h1bmtzKQ0KK3sNCisJaW50IHN0YXR1cyA9IDA7DQorDQorCWlmICgh
ZXZlbnQtPmRhdGEuZmlyc3RfY29udHJvbF9wYWNrZXQpDQorCQlnb3RvIGxfcmV0dXJuOw0KKw0K
KwlzdGF0dXMgPSBtYXVzYl9hZGRfZGF0YV9jaHVuaygNCisJCQkJKChzdHJ1Y3QgdXJiICopZXZl
bnQtPmRhdGEudXJiKS0+c2V0dXBfcGFja2V0LA0KKwkJCQlNQVVTQl9DT05UUk9MX1NFVFVQX1NJ
WkUsIGNodW5rc19saXN0KTsNCisJLyogU3VjY2VzcyAqLw0KKwlpZiAoIXN0YXR1cykNCisJCSsr
KCpudW1fb2ZfZGF0YV9jaHVua3MpOw0KKw0KK2xfcmV0dXJuOg0KKwlyZXR1cm4gc3RhdHVzOw0K
K30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9jbGVhbnVwX2NodW5rc19saXN0KHN0cnVjdCBsaXN0
X2hlYWQgKmNodW5rc19saXN0KQ0KK3sNCisJc3RydWN0IG1hdXNiX3BheWxvYWRfY2h1bmsgKmRh
dGFfY2h1bmsgPSBOVUxMLCAqdG1wID0gTlVMTDsNCisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeV9z
YWZlKGRhdGFfY2h1bmssIHRtcCwgY2h1bmtzX2xpc3QsIGxpc3RfZW50cnkpIHsNCisJCWxpc3Rf
ZGVsKCZkYXRhX2NodW5rLT5saXN0X2VudHJ5KTsNCisJCWtmcmVlKGRhdGFfY2h1bmspOw0KKwl9
DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfcHJlcGFyZV90cmFuc2Zlcl9wYWNrZXQoDQorCQlz
dHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBwZXIgKndyYXBwZXIsDQorCQkJCSAgc3RydWN0IG1h
dXNiX2V2ZW50ICpldmVudCwNCisJCQkJICBzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRv
cikNCit7DQorCXVpbnQzMl90IG51bV9vZl9kYXRhX2NodW5rcwkgICAgPSAwOw0KKwl1aW50MzJf
dCBudW1fb2ZfcGF5bG9hZF9kYXRhX2NodW5rcyA9IDA7DQorCXVpbnQzMl90IHBheWxvYWRfZGF0
YV9zaXplCSAgICA9IDA7DQorCXN0cnVjdCBsaXN0X2hlYWQgY2h1bmtzX2xpc3Q7DQorCXN0cnVj
dCBsaXN0X2hlYWQgcGF5bG9hZF9kYXRhX2NodW5rczsNCisJaW50IHN0YXR1cyA9IDA7DQorDQor
CUlOSVRfTElTVF9IRUFEKCZjaHVua3NfbGlzdCk7DQorDQorCS8qIEluaXRpYWxpemUgZGF0YSBj
aHVuayBmb3IgTUFVU0IgaGVhZGVyIGFuZCBhZGQgaXQgdG8gY2h1bmtzIGxpc3QgKi8NCisJaWYg
KG1hdXNiX2luaXRfaGVhZGVyX2RhdGFfY2h1bmsoDQorCQkJCShzdHJ1Y3QgbWFfdXNiX2hkcl9j
b21tb24gKilldmVudC0+ZGF0YS5oZHIsDQorCQkJCSZjaHVua3NfbGlzdCwgJm51bV9vZl9kYXRh
X2NodW5rcykgPCAwKSB7DQorCQlzdGF0dXMgPSAtRU5PTUVNOw0KKwkJZ290byBsX2NsZWFudXBf
ZGF0YV9jaHVua3M7DQorCX0NCisNCisJLyoNCisJICogSW5pdGlhbGl6ZSBkYXRhIGNodW5rIGZv
ciBNQVVTQiBjb250cm9sIHNldHVwIHBhY2tldCBhbmQNCisJICogYWRkIGl0IHRvIGNodW5rcyBs
aXN0DQorCSAqLw0KKwlpZiAobWF1c2JfaW5pdF9jb250cm9sX2RhdGFfY2h1bmsoZXZlbnQsICZj
aHVua3NfbGlzdCwNCisJCQkJCSAgJm51bV9vZl9kYXRhX2NodW5rcykgPCAwKSB7DQorCQlzdGF0
dXMgPSAtRU5PTUVNOw0KKwkJZ290byBsX2NsZWFudXBfZGF0YV9jaHVua3M7DQorCX0NCisNCisJ
LyogR2V0IGRhdGEgY2h1bmtzIGZvciBkYXRhIHBheWxvYWQgdG8gc2VuZCAqLw0KKwlJTklUX0xJ
U1RfSEVBRCgmcGF5bG9hZF9kYXRhX2NodW5rcyk7DQorCXBheWxvYWRfZGF0YV9zaXplID0NCisJ
CQkoKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqKWV2ZW50LT5kYXRhLmhkciktPmxlbmd0aCAt
DQorCQkJTUFVU0JfVFJBTlNGRVJfSERSX1NJWkUgLQ0KKwkJCShldmVudC0+ZGF0YS5maXJzdF9j
b250cm9sX3BhY2tldCA/DQorCQkJCU1BVVNCX0NPTlRST0xfU0VUVVBfU0laRSA6IDApOw0KKw0K
KwlpZiAobWF1c2JfZGF0YV9pdGVyYXRvcl9yZWFkKGl0ZXJhdG9yLCBwYXlsb2FkX2RhdGFfc2l6
ZSwNCisJCQkJICAgICAmcGF5bG9hZF9kYXRhX2NodW5rcywNCisJCQkJICAgICAmbnVtX29mX3Bh
eWxvYWRfZGF0YV9jaHVua3MpIDwgMCkgew0KKwkJc3RhdHVzID0gLUVOT01FTTsNCisJCWdvdG8g
bF9jbGVhbnVwX2RhdGFfY2h1bmtzOw0KKwl9DQorDQorCWxpc3Rfc3BsaWNlX3RhaWwoJnBheWxv
YWRfZGF0YV9jaHVua3MsICZjaHVua3NfbGlzdCk7DQorCW51bV9vZl9kYXRhX2NodW5rcyArPSBu
dW1fb2ZfcGF5bG9hZF9kYXRhX2NodW5rczsNCisNCisJLyogTWFwIGFsbCBkYXRhIGNodW5rcyB0
byBkYXRhIHdyYXBwZXIgKi8NCisJaWYgKG1hdXNiX2luaXRfZGF0YV93cmFwcGVyKHdyYXBwZXIs
ICZjaHVua3NfbGlzdCwNCisJCQkJICAgIG51bV9vZl9kYXRhX2NodW5rcykgPCAwKSB7DQorCQlz
dGF0dXMgPSAtRU5PTUVNOw0KKwkJZ290byBsX2NsZWFudXBfZGF0YV9jaHVua3M7DQorCX0NCisN
CitsX2NsZWFudXBfZGF0YV9jaHVua3M6IC8qIENsZWFudXAgYWxsIGFsbG9jYXRlZCBkYXRhIGNo
dW5rIGluIGNhc2Ugb2YgZXJyb3IgKi8NCisJbWF1c2JfY2xlYW51cF9jaHVua3NfbGlzdCgmY2h1
bmtzX2xpc3QpOw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitpbnQgbWF1c2Jfc2VuZF9vdXRf
ZGF0YV9tc2coc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2
ZW50LA0KKwkJCSAgICBzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0eCkNCit7DQorCWludCBz
dGF0dXMgPSAwOw0KKwlzdHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBwZXIgZGF0YTsNCisNCisJ
c3RhdHVzID0gbWF1c2JfcHJlcGFyZV90cmFuc2Zlcl9wYWNrZXQoJmRhdGEsIGV2ZW50LA0KKwkJ
CQkJICAgICAgICZ1cmJfY3R4LT5pdGVyYXRvcik7DQorDQorCWlmIChzdGF0dXMgPCAwKSB7DQor
CQltYXVzYl9wcl9lcnIoIkZhaWxlZCB0byBwcmVwYXJlIHRyYW5zZmVyIHBhY2tldCIpOw0KKwkJ
cmV0dXJuIHN0YXR1czsNCisJfQ0KKw0KKwlzdGF0dXMgPSBtYXVzYl9zZW5kX2RhdGEoZGV2LCBt
YXVzYl90cmFuc2Zlcl90eXBlX3RvX2NoYW5uZWwoDQorCQkJCSBldmVudC0+ZGF0YS50cmFuc2Zl
cl90eXBlKSwgJmRhdGEpOw0KKw0KKwlrZnJlZShkYXRhLmt2ZWMpOw0KKw0KKwlyZXR1cm4gc3Rh
dHVzOw0KK30NCisNCitpbnQgbWF1c2JfcmVjZWl2ZV9vdXRfZGF0YShzdHJ1Y3QgbWF1c2JfZGV2
aWNlICpkZXYsIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJICAgc3RydWN0IG1hdXNi
X3VyYl9jdHggKnVyYl9jdHgpDQorew0KKwlzdHJ1Y3QgdXJiICp1cmIgPSB1cmJfY3R4LT51cmI7
DQorCWludCBzdGF0dXMgPSAwOw0KKw0KKwltYXVzYl9wcl9kZWJ1ZygidHJhbnNmZXJfc2l6ZT0l
ZCwgcmVtX3RyYW5zZmVyX3NpemU9JWQsIHN0YXR1cz0lZCIsDQorCQkgICAgICAgZXZlbnQtPmRh
dGEudHJhbnNmZXJfc2l6ZSwgZXZlbnQtPmRhdGEucmVtX3RyYW5zZmVyX3NpemUsDQorCQkgICAg
ICAgZXZlbnQtPnN0YXR1cyk7DQorDQorCWlmIChldmVudC0+ZGF0YS50cmFuc2Zlcl9lb3QpIHsN
CisJCW1hdXNiX2NvbXBsZXRlX3JlcXVlc3QodXJiLCB1cmItPnRyYW5zZmVyX2J1ZmZlcl9sZW5n
dGggLQ0KKwkJCQkgICAgICAgZXZlbnQtPmRhdGEucmVtX3RyYW5zZmVyX3NpemUsDQorCQkJCSAg
ICAgICBldmVudC0+c3RhdHVzKTsNCisJfQ0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCmRpZmYg
LS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9ocGFsLmMgYi9kcml2
ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9ocGFsLmMNCm5ldyBmaWxlIG1vZGUgMTAw
NjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjlkNzY4NzA2MjNmMA0KLS0tIC9kZXYvbnVsbA0KKysr
IGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hwYWwvaHBhbC5jDQpAQCAtMCwwICsx
LDEzMjcgQEANCisvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMA0KKy8qDQorICog
Q29weXJpZ2h0IChjKSAyMDE5IC0gMjAyMCBEaXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAq
IFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUg
R05VIEdlbmVyYWwgUHVibGljDQorICogTGljZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcg
aW4gdGhlIG1haW4gZGlyZWN0b3J5IG9mIHRoaXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFp
bHMuDQorICovDQorI2luY2x1ZGUgImhwYWwvaHBhbC5oIg0KKw0KKyNpbmNsdWRlIDxsaW51eC9r
b2JqZWN0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCisjaW5jbHVkZSA8bGludXgvc3lz
ZnMuaD4NCisjaW5jbHVkZSA8bGludXgvdWlvLmg+DQorI2luY2x1ZGUgPGxpbnV4L3ZlcnNpb24u
aD4NCisNCisjaW5jbHVkZSAiY29tbW9uL21hdXNiX2V2ZW50LmgiDQorI2luY2x1ZGUgImhjZC9o
dWIuaCINCisjaW5jbHVkZSAiaGNkL3ZoY2QuaCINCisjaW5jbHVkZSAiaHBhbC9tYXVzYl9ldmVu
dHMuaCINCisjaW5jbHVkZSAiaHBhbC9kYXRhX2NvbW1vbi5oIg0KKyNpbmNsdWRlICJocGFsL25l
dHdvcmtfY2FsbGJhY2tzLmgiDQorI2luY2x1ZGUgImxpbmsvbWF1c2JfaXBfbGluay5oIg0KKyNp
bmNsdWRlICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX21tYXAu
aCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfcmluZ19idWZmZXIuaCINCisjaW5jbHVkZSAidXRp
bHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oIg0KKyNpbmNsdWRlICJ1dGlscy9tYXVzYl92ZXJzaW9u
LmgiDQorDQorc3RydWN0IG1zcyBtc3M7DQorDQorc3RhdGljIGludCBtYXVzYl9zdGFydF9jb25u
ZWN0aW9uX3RpbWVyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldik7DQorc3RhdGljIGludCBtYXVz
Yl9wb3dlcl9zdGF0ZV9jYihzdHJ1Y3Qgbm90aWZpZXJfYmxvY2sgKm5iLCB1bnNpZ25lZCBsb25n
IGFjdGlvbiwNCisJCQkJdm9pZCAqZGF0YSk7DQorc3RhdGljIHZvaWQgbWF1c2Jfc2lnbmFsX2Vt
cHR5X21zcyh2b2lkKTsNCitzdGF0aWMgdm9pZCBtYXVzYl9yZW1vdmVfbWFkZXZfZnJvbV9saXN0
KHVpbnQ4X3QgbWFkZXZfYWRkcik7DQorc3RhdGljIHZvaWQgbWF1c2JfZXhlY3V0ZV91cmJfZGVx
dWV1ZShzdHJ1Y3Qgd29ya19zdHJ1Y3QgKmRlcXVldWVfd29yayk7DQorc3RhdGljIGludCBtYXVz
Yl9zdGFydF9oZWFydGJlYXRfdGltZXIodm9pZCk7DQorDQorc3RhdGljIGlubGluZSBzdHJ1Y3Qg
bWF1c2JfdXJiX2N0eCAqX19tYXVzYl9maW5kX3VyYl9pbl90cmVlKHN0cnVjdCB1cmIgKnVyYikN
Cit7DQorCXN0cnVjdCByYl9ub2RlICpub2RlID0gbWhjZC0+bWF1c2JfdXJicy5yYl9ub2RlOw0K
Kw0KKwl3aGlsZSAobm9kZSkgew0KKwkJc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHggPQ0K
KwkJICAgIHJiX2VudHJ5KG5vZGUsIHN0cnVjdCBtYXVzYl91cmJfY3R4LCByYl9ub2RlKTsNCisN
CisJCWlmICh1cmIgPCB1cmJfY3R4LT51cmIpDQorCQkJbm9kZSA9IHVyYl9jdHgtPnJiX25vZGUu
cmJfbGVmdDsNCisJCWVsc2UgaWYgKHVyYiA+IHVyYl9jdHgtPnVyYikNCisJCQlub2RlID0gdXJi
X2N0eC0+cmJfbm9kZS5yYl9yaWdodDsNCisJCWVsc2UNCisJCQlyZXR1cm4gdXJiX2N0eDsNCisJ
fQ0KKwlyZXR1cm4gTlVMTDsNCit9DQorDQorc3RydWN0IG1hdXNiX3VyYl9jdHggKm1hdXNiX2Zp
bmRfdXJiX2luX3RyZWUoc3RydWN0IHVyYiAqdXJiKQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFn
czsNCisJc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHg7DQorDQorCXNwaW5fbG9ja19pcnFz
YXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCXVyYl9jdHggPSAgX19tYXVzYl9maW5kX3VyYl9p
bl90cmVlKHVyYik7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdz
KTsNCisNCisJcmV0dXJuIHVyYl9jdHg7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfaW5zZXJ0
X3VyYl9jdHhfaW5fdHJlZShzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0eCkNCit7DQorDQor
CXN0cnVjdCByYl9ub2RlICoqbmV3X25vZGUgPSAmKG1oY2QtPm1hdXNiX3VyYnMucmJfbm9kZSk7
DQorCXN0cnVjdCByYl9ub2RlICpwYXJlbnQgPSBOVUxMOw0KKwlzdHJ1Y3QgbWF1c2JfdXJiX2N0
eCAqY3VycmVudF91cmIgPSBOVUxMOw0KKw0KKwl3aGlsZSAoKm5ld19ub2RlKSB7DQorCQlwYXJl
bnQgPSAqbmV3X25vZGU7DQorCQljdXJyZW50X3VyYiA9IHJiX2VudHJ5KCpuZXdfbm9kZSwgc3Ry
dWN0IG1hdXNiX3VyYl9jdHgsDQorCQkJCSAgICAgICByYl9ub2RlKTsNCisNCisJCWlmICh1cmJf
Y3R4LT51cmIgPCBjdXJyZW50X3VyYi0+dXJiKQ0KKwkJCW5ld19ub2RlID0gJigoKm5ld19ub2Rl
KS0+cmJfbGVmdCk7DQorCQllbHNlIGlmICh1cmJfY3R4LT51cmIgPiBjdXJyZW50X3VyYi0+dXJi
KQ0KKwkJCW5ld19ub2RlID0gJigoKm5ld19ub2RlKS0+cmJfcmlnaHQpOw0KKwkJZWxzZQ0KKwkJ
CXJldHVybiAtRUVYSVNUOw0KKwl9DQorCXJiX2xpbmtfbm9kZSgmdXJiX2N0eC0+cmJfbm9kZSwg
cGFyZW50LCBuZXdfbm9kZSk7DQorCXJiX2luc2VydF9jb2xvcigmdXJiX2N0eC0+cmJfbm9kZSwg
Jm1oY2QtPm1hdXNiX3VyYnMpOw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1
c2JfZGVsZXRlX3VyYl9jdHhfZnJvbV90cmVlKHN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4
KQ0KK3sNCisJcmJfZXJhc2UoJnVyYl9jdHgtPnJiX25vZGUsICZtaGNkLT5tYXVzYl91cmJzKTsN
Cit9DQorDQorc3RhdGljIHN0cnVjdCBtYXVzYl91cmJfY3R4ICptYXVzYl9jcmVhdGVfdXJiX2N0
eChzdHJ1Y3QgdXJiICp1cmIsIGludCAqc3RhdHVzKQ0KK3sNCisJc3RydWN0IG1hdXNiX3VyYl9j
dHggKnVyYl9jdHggPSBOVUxMOw0KKw0KKwlpZiAodW5saWtlbHkoIXVyYikpIHsNCisJCW1hdXNi
X3ByX2VycigiVXJiIGlzIE5VTEwiKTsNCisJCSpzdGF0dXMgPSAtRUlOVkFMOw0KKwkJcmV0dXJu
IE5VTEw7DQorCX0NCisNCisJdXJiX2N0eCA9IGt6YWxsb2Moc2l6ZW9mKCp1cmJfY3R4KSwgR0ZQ
X0FUT01JQyk7DQorDQorCWlmICh1bmxpa2VseSghdXJiX2N0eCkpIHsNCisJCW1hdXNiX3ByX2Fs
ZXJ0KCJVcmJfY3R4IGFsbG9jYXRpb24gZmFpbGVkIik7DQorCQkqc3RhdHVzID0gLUVOT01FTTsN
CisJCXJldHVybiBOVUxMOw0KKwl9DQorDQorCXVyYl9jdHgtPnVyYiA9IHVyYjsNCisJSU5JVF9X
T1JLKCZ1cmJfY3R4LT53b3JrLCBtYXVzYl9leGVjdXRlX3VyYl9kZXF1ZXVlKTsNCisNCisJcmV0
dXJuIHVyYl9jdHg7DQorfQ0KKw0KK2ludCBtYXVzYl9pbnNlcnRfdXJiX2luX3RyZWUoc3RydWN0
IHVyYiAqdXJiLCBib29sIGxpbmtfdXJiX3RvX2VwKQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFn
czsNCisJaW50IHJldDsNCisJaW50IHN0YXR1cyA9IDA7DQorDQorCXN0cnVjdCBtYXVzYl91cmJf
Y3R4ICp1cmJfY3R4ID0gbWF1c2JfY3JlYXRlX3VyYl9jdHgodXJiLCAmc3RhdHVzKTsNCisNCisJ
aWYgKCF1cmJfY3R4KQ0KKwkJcmV0dXJuIHN0YXR1czsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUo
Jm1oY2QtPmxvY2ssIGZsYWdzKTsNCisNCisJaWYgKGxpbmtfdXJiX3RvX2VwKSB7DQorCQlyZXQg
PSB1c2JfaGNkX2xpbmtfdXJiX3RvX2VwKHVyYi0+aGNwcml2LCB1cmIpOw0KKwkJaWYgKHJldCkg
ew0KKwkJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJCQlt
YXVzYl9wcl9lcnIoIkVycm9yICVkIHdoaWxlIGxpbmtpbmcgdXJiIHRvIGhjZF9lbmRwb2ludCIs
DQorCQkJCQlyZXQpOw0KKwkJCWtmcmVlKHVyYl9jdHgpOw0KKwkJCXJldHVybiByZXQ7DQorCQl9
DQorCX0NCisNCisJaWYgKG1hdXNiX2luc2VydF91cmJfY3R4X2luX3RyZWUodXJiX2N0eCkpIHsN
CisJCWtmcmVlKHVyYl9jdHgpOw0KKwkJaWYgKGxpbmtfdXJiX3RvX2VwKQ0KKwkJCXVzYl9oY2Rf
dW5saW5rX3VyYl9mcm9tX2VwKHVyYi0+aGNwcml2LCB1cmIpOw0KKwkJc3Bpbl91bmxvY2tfaXJx
cmVzdG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwkJbWF1c2JfcHJfZXJyKCJVcmJfY3R4IGlu
c2VydGlvbiBmYWlsZWQiKTsNCisJCXJldHVybiAtRUVYSVNUOw0KKwl9DQorDQorCW1hdXNiX2lu
aXRfZGF0YV9pdGVyYXRvcigmdXJiX2N0eC0+aXRlcmF0b3IsIHVyYi0+dHJhbnNmZXJfYnVmZmVy
LA0KKwkJCQkgdXJiLT50cmFuc2Zlcl9idWZmZXJfbGVuZ3RoLCB1cmItPnNnLA0KKwkJCQkgdXJi
LT5udW1fc2dzLCB1c2JfdXJiX2Rpcl9pbih1cmIpKTsNCisNCisJc3Bpbl91bmxvY2tfaXJxcmVz
dG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGlj
IGJvb2wgbWF1c2JfcmV0dXJuX3VyYl9jdHhfdG9fdHJlZShzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAq
dXJiX2N0eCwNCisJCQkJCWJvb2wgbGlua191cmJfdG9fZXApDQorew0KKwl1bnNpZ25lZCBsb25n
IGZsYWdzOw0KKwlpbnQgcmV0Ow0KKw0KKwlpZiAoIXVyYl9jdHgpDQorCQlyZXR1cm4gZmFsc2U7
DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCWlmIChsaW5r
X3VyYl90b19lcCkgew0KKwkJcmV0ID0gdXNiX2hjZF9saW5rX3VyYl90b19lcCh1cmJfY3R4LT51
cmItPmhjcHJpdiwNCisJCQkJCSAgICAgdXJiX2N0eC0+dXJiKTsNCisJCWlmIChyZXQpIHsNCisJ
CQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorCQkJbWF1c2Jf
cHJfZXJyKCJFcnJvciAlZCB3aGlsZSBsaW5raW5nIHVyYiB0byBoY2RfZW5kcG9pbnQiLA0KKwkJ
CQkgICAgIHJldCk7DQorCQkJcmV0dXJuIGZhbHNlOw0KKwkJfQ0KKwl9DQorDQorCWlmIChtYXVz
Yl9pbnNlcnRfdXJiX2N0eF9pbl90cmVlKHVyYl9jdHgpKSB7DQorCQlpZiAobGlua191cmJfdG9f
ZXApDQorCQkJdXNiX2hjZF91bmxpbmtfdXJiX2Zyb21fZXAodXJiX2N0eC0+dXJiLT5oY3ByaXYs
DQorCQkJCQkJICAgdXJiX2N0eC0+dXJiKTsNCisJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1o
Y2QtPmxvY2ssIGZsYWdzKTsNCisJCW1hdXNiX3ByX2VycigiVXJiX2N0eCBpbnNlcnRpb24gZmFp
bGVkIik7DQorCQlyZXR1cm4gZmFsc2U7DQorCX0NCisNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9y
ZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKw0KKwlyZXR1cm4gdHJ1ZTsNCit9DQorDQorc3RhdGlj
IHZvaWQgbWF1c2JfY29tcGxldGVfdXJic19mcm9tX3RyZWUodm9pZCkNCit7DQorCXN0cnVjdCBt
YXVzYl91cmJfY3R4ICp1cmJfY3R4ID0gTlVMTDsNCisJc3RydWN0IHVyYgkgICAgICpjdXJyZW50
X3VyYiA9IE5VTEw7DQorCXN0cnVjdCByYl9ub2RlCSAgICAgKmN1cnJlbnRfbm9kZSA9IE5VTEw7
DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorCWludCBzdGF0dXMgPSAwOw0KKwlpbnQgcmV0CSAg
ID0gMDsNCisNCisJbWF1c2JfcHJfZGVidWcoIkNvbXBsZXRpbmcgYWxsIHVyYnMgZnJvbSB0cmVl
Iik7DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCXdo
aWxlICgoY3VycmVudF9ub2RlID0gcmJfZmlyc3QoJm1oY2QtPm1hdXNiX3VyYnMpKSkgew0KKw0K
KwkJdXJiX2N0eCA9IHJiX2VudHJ5KGN1cnJlbnRfbm9kZSwgc3RydWN0IG1hdXNiX3VyYl9jdHgs
IHJiX25vZGUpOw0KKw0KKwkJY3VycmVudF91cmIgPSB1cmJfY3R4LT51cmI7DQorCQltYXVzYl9k
ZWxldGVfdXJiX2N0eF9mcm9tX3RyZWUodXJiX2N0eCk7DQorCQltYXVzYl91bmluaXRfZGF0YV9p
dGVyYXRvcigmdXJiX2N0eC0+aXRlcmF0b3IpOw0KKwkJa2ZyZWUodXJiX2N0eCk7DQorDQorCQly
ZXQgPSB1c2JfaGNkX2NoZWNrX3VubGlua191cmIoY3VycmVudF91cmItPmhjcHJpdiwNCisJCQkJ
CSAgICAgICBjdXJyZW50X3VyYiwgc3RhdHVzKTsNCisNCisJCWlmIChyZXQgPT0gLUVJRFJNKQ0K
KwkJCW1hdXNiX3ByX3dhcm4oIlVyYj0lcCBpcyBhbHJlYWR5IHVubGlua2VkIiwNCisJCQkJICAg
ICBjdXJyZW50X3VyYik7DQorCQllbHNlDQorCQkJdXNiX2hjZF91bmxpbmtfdXJiX2Zyb21fZXAo
Y3VycmVudF91cmItPmhjcHJpdiwNCisJCQkJCQkgICBjdXJyZW50X3VyYik7DQorDQorCQlzcGlu
X3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCQkvKiBQcmVwYXJl
IHVyYiBmb3IgY29tcGxldGlvbiAqLw0KKwkJbWF1c2JfcHJfZGVidWcoIkNvbXBsZXRpbmcgdXJi
PSVwIiwgY3VycmVudF91cmIpOw0KKw0KKwkJY3VycmVudF91cmItPnN0YXR1cwkgICA9IC1FUFJP
VE87DQorCQljdXJyZW50X3VyYi0+YWN0dWFsX2xlbmd0aCA9IDA7DQorCQlhdG9taWNfZGVjKCZj
dXJyZW50X3VyYi0+dXNlX2NvdW50KTsNCisJCXVzYl9oY2RfZ2l2ZWJhY2tfdXJiKGN1cnJlbnRf
dXJiLT5oY3ByaXYsIGN1cnJlbnRfdXJiLA0KKwkJCQkgICAgIGN1cnJlbnRfdXJiLT5zdGF0dXMp
Ow0KKw0KKwkJc3Bpbl9sb2NrX2lycXNhdmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisNCisJfQ0K
Kw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCW1h
dXNiX3ByX2RlYnVnKCJDb21wbGV0ZWQgYWxsIHVyYnMgZnJvbSB0cmVlIik7DQorfQ0KKw0KKy8q
QWZ0ZXIgdGhpcyBmdW5jdGlvbiBjYWxsIG9ubHkgdmFsaWQgdGhpbmcgdG8gZG8gd2l0aCB1cmIg
aXMgdG8gZ2l2ZSBpdCBiYWNrKi8NCitzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqbWF1c2JfdW5saW5r
X2FuZF9kZWxldGVfdXJiX2Zyb21fdHJlZShzdHJ1Y3QgdXJiICp1cmIsDQorCQkJCQkJCSAgICBp
bnQgc3RhdHVzKQ0KK3sNCisJc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHggPSBOVUxMOw0K
Kwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKwlpbnQgcmV0Ow0KKw0KKwlpZiAoIXVyYikgew0KKwkJ
bWF1c2JfcHJfd2FybigiVXJiIGlzIE5VTEwiKTsNCisJCXJldHVybiBOVUxMOw0KKwl9DQorDQor
CXNwaW5fbG9ja19pcnFzYXZlKCZtaGNkLT5sb2NrLCBmbGFncyk7DQorDQorCXVyYl9jdHggPSBf
X21hdXNiX2ZpbmRfdXJiX2luX3RyZWUodXJiKTsNCisNCisJaWYgKCF1cmJfY3R4KSB7DQorCQlt
YXVzYl9wcl93YXJuKCJVcmI9JXAgbm90IGluIHRyZWUiLCB1cmIpOw0KKwkJc3Bpbl91bmxvY2tf
aXJxcmVzdG9yZSgmbWhjZC0+bG9jaywgZmxhZ3MpOw0KKwkJcmV0dXJuIE5VTEw7DQorCX0NCisN
CisJcmV0ID0gdXNiX2hjZF9jaGVja191bmxpbmtfdXJiKHVyYi0+aGNwcml2LCB1cmIsIHN0YXR1
cyk7DQorDQorCWlmIChyZXQgPT0gLUVJRFJNKQ0KKwkJbWF1c2JfcHJfd2FybigiVXJiPSVwIGlz
IGFscmVhZHkgdW5saW5rZWQiLCB1cmIpOw0KKwllbHNlDQorCQl1c2JfaGNkX3VubGlua191cmJf
ZnJvbV9lcCh1cmItPmhjcHJpdiwgdXJiKTsNCisNCisJbWF1c2JfZGVsZXRlX3VyYl9jdHhfZnJv
bV90cmVlKHVyYl9jdHgpOw0KKw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtaGNkLT5sb2Nr
LCBmbGFncyk7DQorDQorCW1hdXNiX3ByX2RlYnVnKCJVcmI9JXAgaXMgcmVtb3ZlZCBmcm9tIHRy
ZWUiLCB1cmIpOw0KKw0KKwlyZXR1cm4gdXJiX2N0eDsNCit9DQorDQordm9pZCBtYXVzYl9yZWxl
YXNlX2V2ZW50X3Jlc291cmNlcyhzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJc3Ry
dWN0IG1hX3VzYl9oZHJfY29tbW9uICpyZWNlaXZlX2J1ZmZlciA9IChzdHJ1Y3QgbWFfdXNiX2hk
cl9jb21tb24gKikNCisJCQkJCQkgICAgZXZlbnQtPmRhdGEucmVjdl9idWY7DQorDQorCWtmcmVl
KHJlY2VpdmVfYnVmZmVyKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfaXRlcmF0b3JfcmVz
ZXQoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgc3RydWN0IG1hdXNiX2V2ZW50ICpl
dmVudCkNCit7DQorCXN0cnVjdCB1cmIJICAgICAqdXJiID0gKHN0cnVjdCB1cmIgKilldmVudC0+
ZGF0YS51cmI7DQorCXN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4Ow0KKw0KKwl1cmJfY3R4
ID0gbWF1c2JfZmluZF91cmJfaW5fdHJlZSh1cmIpOw0KKw0KKwlpZiAodXJiX2N0eCkNCisJCW1h
dXNiX3Jlc2V0X2RhdGFfaXRlcmF0b3IoJnVyYl9jdHgtPml0ZXJhdG9yKTsNCit9DQorDQorc3Rh
dGljIHZvaWQgbWF1c2JfaXRlcmF0b3Jfc2VlayhzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQor
CQkJCXN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQorew0KKwlzdHJ1Y3QgdXJiCSAgICAgKnVy
YiA9IChzdHJ1Y3QgdXJiICopZXZlbnQtPmRhdGEudXJiOw0KKwlzdHJ1Y3QgbWF1c2JfdXJiX2N0
eCAqdXJiX2N0eDsNCisNCisJdXJiX2N0eCA9IG1hdXNiX2ZpbmRfdXJiX2luX3RyZWUodXJiKTsN
CisNCisJaWYgKHVyYl9jdHgpDQorCQltYXVzYl9kYXRhX2l0ZXJhdG9yX3NlZWsoJnVyYl9jdHgt
Pml0ZXJhdG9yLA0KKwkJCQkJIGV2ZW50LT5kYXRhLml0ZXJhdG9yX3NlZWtfZGVsdGEpOw0KK30N
CisNCit2b2lkIG1hdXNiX2NvbXBsZXRlX3VyYihzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0K
K3sNCisJc3RydWN0IHVyYiAqdXJiID0gKHN0cnVjdCB1cmIgKilldmVudC0+ZGF0YS51cmI7DQor
DQorCW1hdXNiX3ByX2RlYnVnKCJ0cmFuc2Zlcl9zaXplPSVkLCByZW1fdHJhbnNmZXJfc2l6ZT0l
ZCwgc3RhdHVzPSVkIiwNCisJCSAgICAgICBldmVudC0+ZGF0YS50cmFuc2Zlcl9zaXplLA0KKwkJ
ICAgICAgIGV2ZW50LT5kYXRhLnJlbV90cmFuc2Zlcl9zaXplLCBldmVudC0+c3RhdHVzKTsNCisJ
bWF1c2JfY29tcGxldGVfcmVxdWVzdCh1cmIsDQorCQkJICAgICAgIGV2ZW50LT5kYXRhLnRyYW5z
ZmVyX3NpemUgLQ0KKwkJCSAgICAgICBldmVudC0+ZGF0YS5yZW1fdHJhbnNmZXJfc2l6ZSwNCisJ
CQkgICAgICAgZXZlbnQtPnN0YXR1cyk7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2RlbGV0
ZV9tYV9kZXYoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQlzdHJ1Y3QgbWF1c2JfZXZl
bnQgKmV2ZW50KQ0KK3sNCisJbWF1c2Jfc2lnbmFsX2V2ZW50KGRldiwgZXZlbnQsIGV2ZW50LT5t
Z210LmRlbGV0ZV9tYV9kZXYuZXZlbnRfaWQpOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9w
cm9jZXNzX3VzZXJfZmluaXNoZWQoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkJc3Ry
dWN0IG1hdXNiX2V2ZW50ICpldmVudCkNCit7DQorCWNvbXBsZXRlKCZkZXYtPnVzZXJfZmluaXNo
ZWRfZXZlbnQpOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX3NlbmRfbWdtdF9tc2coc3RydWN0
IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCSAgICAgICBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50
KQ0KK3sNCisJc3RydWN0IG1hdXNiX2t2ZWNfZGF0YV93cmFwcGVyIHdyYXBwZXI7DQorCXN0cnVj
dCBrdmVjIGt2ZWM7DQorCXN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqaGRyOw0KKwlpbnQgc3Rh
dHVzID0gMDsNCisNCisJaGRyID0gKHN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqKWV2ZW50LT5t
Z210Lm1nbXRfaGRyLmhkcjsNCisNCisJbWF1c2JfcHJfaW5mbygiZXZlbnQ9JWQsIHR5cGU9JWQi
LCBldmVudC0+dHlwZSwgaGRyLT50eXBlKTsNCisNCisJa3ZlYy5pb3ZfYmFzZQkgPSBoZHI7DQor
CWt2ZWMuaW92X2xlbgkgPSBoZHItPmxlbmd0aDsNCisJd3JhcHBlci5rdmVjCSA9ICZrdmVjOw0K
Kwl3cmFwcGVyLmt2ZWNfbnVtID0gMTsNCisJd3JhcHBlci5sZW5ndGgJID0gaGRyLT5sZW5ndGg7
DQorDQorCXN0YXR1cyA9IG1hdXNiX2lwX3NlbmQoZGV2LT5tZ210X2NoYW5uZWwsICZ3cmFwcGVy
KTsNCisNCisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiU2VuZCBmYWlsZWQu
IERpc2Nvbm5lY3RpbmcuLi4gc3RhdHVzPSVkIiwgc3RhdHVzKTsNCisJCXF1ZXVlX3dvcmsoZGV2
LT53b3JrcSwgJmRldi0+c29ja2V0X2Rpc2Nvbm5lY3Rfd29yayk7DQorCQlxdWV1ZV93b3JrKGRl
di0+d29ya3EsICZkZXYtPmhjZF9kaXNjb25uZWN0X3dvcmspOw0KKwl9DQorDQorCXJldHVybiBz
dGF0dXM7DQorfQ0KKw0KK3N0YXRpYyBpbnQzMl90IG1hdXNiX2dldF9maXJzdF9mcmVlX3BvcnRf
bnVtYmVyKHZvaWQpDQorew0KKwl1aW50MTZfdCBwb3J0X251bWJlciA9IDA7DQorDQorCXdoaWxl
ICgobWhjZC0+Y29ubmVjdGVkX3BvcnRzICYgKDEgPDwgcG9ydF9udW1iZXIpKSAhPSAwICYmDQor
CQkJcG9ydF9udW1iZXIgPCBOVU1CRVJfT0ZfUE9SVFMpDQorCQkrK3BvcnRfbnVtYmVyOw0KKw0K
KwlpZiAocG9ydF9udW1iZXIgPT0gTlVNQkVSX09GX1BPUlRTKQ0KKwkJcmV0dXJuIC0xOw0KKw0K
KwltaGNkLT5jb25uZWN0ZWRfcG9ydHMgfD0gKDEgPDwgcG9ydF9udW1iZXIpOw0KKw0KKwlyZXR1
cm4gcG9ydF9udW1iZXI7DQorfQ0KKw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBtYXVzYl9wb3J0X2hh
c19jaGFuZ2VkX2V2ZW50KHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJCQlzdHJ1Y3Qg
bWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJaW50MzJfdCBwb3J0X251bWJlciA9IDA7DQorCXVu
c2lnbmVkIGxvbmcgZmxhZ3MgPSAwOw0KKw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmbWhjZC0+bG9j
aywgZmxhZ3MpOw0KKw0KKwlwb3J0X251bWJlciA9IG1hdXNiX2dldF9maXJzdF9mcmVlX3BvcnRf
bnVtYmVyKCk7DQorDQorCWlmIChwb3J0X251bWJlciA8IDApIHsNCisJCXNwaW5fdW5sb2NrX2ly
cXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisJCW1hdXNiX3ByX2VycigiVGhlcmUgaXMg
bm8gZnJlZSBwb3J0LCBzY2hlZHVsZSBkZWxldGUgbWFfZGV2Iik7DQorCQlxdWV1ZV93b3JrKGRl
di0+d29ya3EsICZkZXYtPnNvY2tldF9kaXNjb25uZWN0X3dvcmspOw0KKwkJcmV0dXJuOw0KKwl9
DQorDQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1oY2QtPmxvY2ssIGZsYWdzKTsNCisNCisJ
ZGV2LT5kZXZfdHlwZQkgICA9IGV2ZW50LT5wb3J0X2NoYW5nZWQuZGV2X3R5cGU7DQorCWRldi0+
ZGV2X3NwZWVkCSAgID0gZXZlbnQtPnBvcnRfY2hhbmdlZC5kZXZfc3BlZWQ7DQorCWRldi0+bHNl
CSAgID0gZXZlbnQtPnBvcnRfY2hhbmdlZC5sc2U7DQorCWRldi0+ZGV2X2Nvbm5lY3RlZCA9IDE7
DQorCWRldi0+cG9ydF9udW1iZXIgICA9IHBvcnRfbnVtYmVyOw0KKw0KKwltYXVzYl9wb3J0X2hh
c19jaGFuZ2VkKGV2ZW50LT5wb3J0X2NoYW5nZWQuZGV2X3R5cGUsDQorCQkJICAgICAgIGV2ZW50
LT5wb3J0X2NoYW5nZWQuZGV2X3NwZWVkLCBkZXYpOw0KKw0KKwlpZiAoKGVudW0gbWF1c2JfZGV2
aWNlX3R5cGUpZXZlbnQtPnBvcnRfY2hhbmdlZC5kZXZfdHlwZSA9PSBVU0IzMEhVQikNCisJCW1h
dXNiX3BvcnRfaGFzX2NoYW5nZWQoVVNCMjBIVUIsIEhJR0hfU1BFRUQsIGRldik7DQorfQ0KKw0K
K3N0YXRpYyB2b2lkIG1hdXNiX2NvbXBsZXRlX3RpbWVvdXRfZXZlbnQoc3RydWN0IG1hdXNiX2Rl
dmljZSAqZGV2LA0KKwkJCQkJIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQorew0KKwltYXVz
Yl9wcl9kZWJ1ZygiRXZlbnQgdHlwZT0lZCwgZXZlbnRfaWQ9JWxsdSIsIGV2ZW50LT50eXBlLA0K
KwkJICAgICAgIGV2ZW50LT5tZ210Lm1nbXRfcmVxX3RpbWVkb3V0LmV2ZW50X2lkKTsNCisJbWF1
c2Jfc2lnbmFsX2V2ZW50KGRldiwgZXZlbnQsIGV2ZW50LT5tZ210Lm1nbXRfcmVxX3RpbWVkb3V0
LmV2ZW50X2lkKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfcHJvY2Vzc19ldmVudChzdHJ1
Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCXN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQor
ew0KKw0KKwltYXVzYl9wcl9kZWJ1ZygiRXZlbnQgdHlwZT0lZCIsIGV2ZW50LT50eXBlKTsNCisN
CisJc3dpdGNoIChldmVudC0+dHlwZSkgew0KKwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfVVNCX0RF
Vl9IQU5ETEU6DQorCQltYXVzYl91c2JkZXZoYW5kbGVfZXZlbnRfZnJvbV91c2VyKGRldiwgZXZl
bnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9FUF9IQU5ETEU6DQorCQlt
YXVzYl9lcGhhbmRsZV9ldmVudF9mcm9tX3VzZXIoZGV2LCBldmVudCk7DQorCQlicmVhazsNCisJ
Y2FzZSBNQVVTQl9FVkVOVF9UWVBFX0VQX0hBTkRMRV9BQ1RJVkFURToNCisJCW1hdXNiX2VwYWN0
aXZhdGVfZXZlbnRfZnJvbV91c2VyKGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFV
U0JfRVZFTlRfVFlQRV9FUF9IQU5ETEVfSU5BQ1RJVkFURToNCisJCW1hdXNiX2VwaW5hY3RpdmF0
ZV9ldmVudF9mcm9tX3VzZXIoZGV2LCBldmVudCk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9F
VkVOVF9UWVBFX0VQX0hBTkRMRV9SRVNFVDoNCisJCW1hdXNiX2VwcmVzZXRfZXZlbnRfZnJvbV91
c2VyKGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9FUF9I
QU5ETEVfREVMRVRFOg0KKwkJbWF1c2JfZXBkZWxldGVfZXZlbnRfZnJvbV91c2VyKGRldiwgZXZl
bnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9NT0RJRllfRVAwOg0KKwkJ
bWF1c2JfbW9kaWZ5ZXAwX2V2ZW50X2Zyb21fdXNlcihkZXYsIGV2ZW50KTsNCisJCWJyZWFrOw0K
KwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfU0VUX1VTQl9ERVZfQUREUkVTUzoNCisJCW1hdXNiX3Nl
dHVzYmRldmFkZHJlc3NfZXZlbnRfZnJvbV91c2VyKGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7DQor
CWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9VUERBVEVfREVWOg0KKwkJbWF1c2JfdXBkYXRlZGV2X2V2
ZW50X2Zyb21fdXNlcihkZXYsIGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5U
X1RZUEVfVVNCX0RFVl9SRVNFVDoNCisJCW1hdXNiX3VzYmRldnJlc2V0X2V2ZW50X2Zyb21fdXNl
cihkZXYsIGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfQ0FOQ0VM
X1RSQU5TRkVSOg0KKwkJbWF1c2JfY2FuY2VsdHJhbnNmZXJfZXZlbnRfZnJvbV91c2VyKGRldiwg
ZXZlbnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9QT1JUX0NIQU5HRUQ6
DQorCQltYXVzYl9wb3J0X2hhc19jaGFuZ2VkX2V2ZW50KGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7
DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9QSU5HOg0KKwkJbWF1c2Jfc2VuZF9tZ210X21zZyhk
ZXYsIGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfU0VORF9NR01U
X01TRzoNCisJCW1hdXNiX3NlbmRfbWdtdF9tc2coZGV2LCBldmVudCk7DQorCQlicmVhazsNCisJ
Y2FzZSBNQVVTQl9FVkVOVF9UWVBFX1NFTkRfREFUQV9NU0c6DQorCQltYXVzYl9zZW5kX2RhdGFf
bXNnKGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9SRUNF
SVZFRF9EQVRBX01TRzoNCisJCW1hdXNiX3JlY2VpdmVfZGF0YV9tc2coZGV2LCBldmVudCk7DQor
CQlicmVhazsNCisJY2FzZSBNQVVTQl9FVkVOVF9UWVBFX1VSQl9DT01QTEVURToNCisJCW1hdXNi
X2NvbXBsZXRlX3VyYihldmVudCk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9FVkVOVF9UWVBF
X1NFTkRfQUNLOg0KKwkJbWF1c2Jfc2VuZF90cmFuc2Zlcl9hY2soZGV2LCBldmVudCk7DQorCQlt
YXVzYl9yZWxlYXNlX2V2ZW50X3Jlc291cmNlcyhldmVudCk7DQorCQlicmVhazsNCisJY2FzZSBN
QVVTQl9FVkVOVF9UWVBFX0lURVJBVE9SX1JFU0VUOg0KKwkJbWF1c2JfaXRlcmF0b3JfcmVzZXQo
ZGV2LCBldmVudCk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9FVkVOVF9UWVBFX0lURVJBVE9S
X1NFRUs6DQorCQltYXVzYl9pdGVyYXRvcl9zZWVrKGRldiwgZXZlbnQpOw0KKwkJYnJlYWs7DQor
CWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9ERUxFVEVfTUFfREVWOg0KKwkJbWF1c2JfZGVsZXRlX21h
X2RldihkZXYsIGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfVVNF
Ul9GSU5JU0hFRDoNCisJCW1hdXNiX3Byb2Nlc3NfdXNlcl9maW5pc2hlZChkZXYsIGV2ZW50KTsN
CisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5UX1RZUEVfUkVMRUFTRV9FVkVOVF9SRVNPVVJD
RVM6DQorCQltYXVzYl9yZWxlYXNlX2V2ZW50X3Jlc291cmNlcyhldmVudCk7DQorCQlicmVhazsN
CisJY2FzZSBNQVVTQl9FVkVOVF9UWVBFX05PTkU6DQorCQltYXVzYl9yZWxlYXNlX2V2ZW50X3Jl
c291cmNlcyhldmVudCk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9FVkVOVF9UWVBFX01HTVRf
UkVRVUVTVF9USU1FRF9PVVQ6DQorCQltYXVzYl9jb21wbGV0ZV90aW1lb3V0X2V2ZW50KGRldiwg
ZXZlbnQpOw0KKwkJYnJlYWs7DQorCWRlZmF1bHQ6DQorCQlicmVhazsNCisJfQ0KKw0KKwltYXVz
Yl9ub3RpZnlfY29tcGxldGVkX3VzZXJfZXZlbnRzKGRldi0+cmluZ19idWZmZXIpOw0KKw0KK30N
CisNCitzdGF0aWMgdm9pZCBtYXVzYl9ocGFsX2tlcm5lbF93b3JrKHN0cnVjdCB3b3JrX3N0cnVj
dCAqd29yaykNCit7DQorCXN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiA9IGNvbnRhaW5lcl9vZih3
b3JrLCBzdHJ1Y3QgbWF1c2JfZGV2aWNlLA0KKwkJCQkJCXdvcmspOw0KKwlzdHJ1Y3QgbWF1c2Jf
ZXZlbnQgKmV2ZW50Ow0KKwlpbnQgc3RhdHVzOw0KKwl1aW50MTZfdCBpLA0KKwkJIG51bV9vZl91
c2VyX2V2ZW50cywNCisJCSBudW1fb2ZfY29tcGxldGVkX2V2ZW50czsNCisJdW5zaWduZWQgbG9u
ZyBmbGFnczsNCisJc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyICptYXVzYl9yaW5nID0gZGV2LT5y
aW5nX2J1ZmZlcjsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJmRldi0+bnVtX29mX3VzZXJfZXZl
bnRzX2xvY2ssIGZsYWdzKTsNCisJbnVtX29mX2NvbXBsZXRlZF9ldmVudHMgPSAodWludDE2X3Qp
ZGV2LT5udW1fb2ZfdXNlcl9ldmVudHM7DQorCW51bV9vZl91c2VyX2V2ZW50cwk9IGRldi0+bnVt
X29mX3VzZXJfZXZlbnRzID4+DQorCQkJCSAgKDggKiBzaXplb2YobnVtX29mX3VzZXJfZXZlbnRz
KSk7DQorCWRldi0+bnVtX29mX3VzZXJfZXZlbnRzID0gMDsNCisJc3Bpbl91bmxvY2tfaXJxcmVz
dG9yZSgmZGV2LT5udW1fb2ZfdXNlcl9ldmVudHNfbG9jaywgZmxhZ3MpOw0KKw0KKwlzdGF0dXMg
PSBtYXVzYl9yaW5nX2J1ZmZlcl9tb3ZlX3RhaWwobWF1c2JfcmluZywNCisJCQkJCSAgICAgbnVt
X29mX2NvbXBsZXRlZF9ldmVudHMpOw0KKw0KKwlpZiAoc3RhdHVzIDwgMCkgew0KKwkJbWF1c2Jf
cHJfZXJyKCJEZXF1ZXVlIGZhaWxlZCwgc3RhdHVzPSVkIiwgc3RhdHVzKTsNCisJCWtyZWZfcHV0
KCZkZXYtPnJlZmNvdW50LCBtYXVzYl9yZWxlYXNlX21hX2Rldl9hc3luYyk7DQorCQlyZXR1cm47
DQorCX0NCisNCisJZm9yIChpID0gMDsgaSA8IG51bV9vZl91c2VyX2V2ZW50czsgKytpKSB7DQor
CQlldmVudCA9IG1hdXNiX3JpbmdfY3VycmVudF9mcm9tX3VzZXIobWF1c2JfcmluZyk7DQorCQlt
YXVzYl9yaW5nX25leHRfZnJvbV91c2VyKG1hdXNiX3JpbmcpOw0KKwkJbWF1c2JfcHJvY2Vzc19l
dmVudChkZXYsIGV2ZW50KTsNCisJfQ0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9zb2NrZXRf
ZGlzY29ubmVjdF9ldmVudChzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQorew0KKwlzdHJ1Y3Qg
bWF1c2JfZGV2aWNlICpkZXYgPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IG1hdXNiX2Rldmlj
ZSwNCisJCQkJCQlzb2NrZXRfZGlzY29ubmVjdF93b3JrKTsNCisJc3RydWN0IG1hdXNiX2V2ZW50
IGV2ZW50Ow0KKwlpbnQgc3RhdHVzID0gMDsNCisNCisJbWF1c2JfcHJfaW5mbygibWFkZXZfYWRk
cj0lZCIsIGRldi0+bWFkZXZfYWRkcik7DQorDQorCW1hdXNiX2lwX2Rpc2Nvbm5lY3QoZGV2LT5j
dHJsX2NoYW5uZWwpOw0KKwltYXVzYl9kZXN0cm95X2lwX2N0eChkZXYtPmN0cmxfY2hhbm5lbCk7
DQorCWRldi0+Y3RybF9jaGFubmVsID0gTlVMTDsNCisNCisJbWF1c2JfaXBfZGlzY29ubmVjdChk
ZXYtPmJ1bGtfY2hhbm5lbCk7DQorCW1hdXNiX2Rlc3Ryb3lfaXBfY3R4KGRldi0+YnVsa19jaGFu
bmVsKTsNCisJZGV2LT5idWxrX2NoYW5uZWwgPSBOVUxMOw0KKw0KKwltYXVzYl9pcF9kaXNjb25u
ZWN0KGRldi0+aXNvY2hfY2hhbm5lbCk7DQorCW1hdXNiX2Rlc3Ryb3lfaXBfY3R4KGRldi0+aXNv
Y2hfY2hhbm5lbCk7DQorCWRldi0+aXNvY2hfY2hhbm5lbCA9IE5VTEw7DQorDQorCWlmIChkZXYt
Pm1nbXRfY2hhbm5lbCkgew0KKwkJbWVtc2V0KCZldmVudCwgMCwgc2l6ZW9mKGV2ZW50KSk7DQor
CQlldmVudC50eXBlID0gTUFVU0JfRVZFTlRfVFlQRV9ORVRXT1JLX0RJU0NPTk5FQ1RFRDsNCisJ
CWV2ZW50LmRhdGEuZGV2aWNlX2lkID0gZGV2LT5pZDsNCisNCisJCXN0YXR1cyA9IG1hdXNiX2Vu
cXVldWVfZXZlbnRfdG9fdXNlcihkZXYsICZldmVudCk7DQorCQltYXVzYl9wcl9pbmZvKCJTZW5k
aW5nIG5vdGlmaWNhdGlvbiB0byB1c2VyIHRoYXQgbmV0d29yayBpcyBkaXNjb25uZWN0ZWQgc3Rh
dHVzPSVkIiwNCisJCQkgICAgICBzdGF0dXMpOw0KKw0KKwkJbWF1c2JfcHJfaW5mbygiUmVsZWFz
aW5nIE1BVVNCIGRldmljZSByZWYiKTsNCisJCWtyZWZfcHV0KCZkZXYtPnJlZmNvdW50LCBtYXVz
Yl9yZWxlYXNlX21hX2Rldl9hc3luYyk7DQorCX0NCisNCisJbWF1c2JfaXBfZGlzY29ubmVjdChk
ZXYtPm1nbXRfY2hhbm5lbCk7DQorCW1hdXNiX2Rlc3Ryb3lfaXBfY3R4KGRldi0+bWdtdF9jaGFu
bmVsKTsNCisJZGV2LT5tZ210X2NoYW5uZWwgPSBOVUxMOw0KKw0KKwltZW1zZXQoZGV2LT5jaGFu
bmVsX21hcCwgMCwgc2l6ZW9mKGRldi0+Y2hhbm5lbF9tYXApKTsNCit9DQorDQorc3RhdGljIHZv
aWQgbWF1c2JfZGlzY29ubmVjdF9tYV9kZXYoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2KQ0KK3sN
CisJbWF1c2JfcHJfaW5mbygiRGlzY29ubmVjdGluZyBNQVVTQiBkZXZpY2UgbWFkZXZfYWRkcj0l
ZCIsDQorCQkgICAgICBkZXYtPm1hZGV2X2FkZHIpOw0KKw0KKwlpZiAoIWRldi0+ZGV2X2Nvbm5l
Y3RlZCkgew0KKwkJbWF1c2JfcHJfd2FybigiTUFVU0IgZGV2aWNlIGlzIG5vdCBjb25uZWN0ZWQi
KTsNCisJCWtyZWZfcHV0KCZkZXYtPnJlZmNvdW50LCBtYXVzYl9yZWxlYXNlX21hX2Rldl9hc3lu
Yyk7DQorCQlyZXR1cm47DQorCX0NCisJbWF1c2JfaGNkX2Rpc2Nvbm5lY3QoZGV2LT5wb3J0X251
bWJlciwgZGV2LT5kZXZfdHlwZSwgZGV2LT5kZXZfc3BlZWQpOw0KKw0KKwlpZiAoZGV2LT5kZXZf
dHlwZSA9PSBVU0IzMEhVQikNCisJCW1hdXNiX2hjZF9kaXNjb25uZWN0KGRldi0+cG9ydF9udW1i
ZXIsIFVTQjIwSFVCLCBISUdIX1NQRUVEKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfaGNk
X2Rpc2Nvbm5lY3RfZXZlbnQoc3RydWN0IHdvcmtfc3RydWN0ICp3b3JrKQ0KK3sNCisJc3RydWN0
IG1hdXNiX2RldmljZSAqbWFfZGV2ID0gY29udGFpbmVyX29mKHdvcmssIHN0cnVjdCBtYXVzYl9k
ZXZpY2UsDQorCQkJCQkJICAgaGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorDQorCW1hdXNiX2Rpc2Nv
bm5lY3RfbWFfZGV2KG1hX2Rldik7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2RlbGV0ZV9t
YWRldihzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNl
ICpkZXYgPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IG1hdXNiX2RldmljZSwNCisJCQkJCQlt
YWRldl9kZWxldGVfd29yayk7DQorCXN0cnVjdCBtYXVzYl9ldmVudAlldmVudDsNCisJc3RydWN0
IGNvbXBsZXRpb24JY29tcGxldGlvbjsNCisJc3RydWN0IG1hdXNiX2NvbXBsZXRpb24gbWF1c2Jf
Y29tcGxldGlvbjsNCisJaW50IHN0YXR1czsNCisNCisJbWF1c2JfcHJfaW5mbygiRGVsZXRpbmcg
TUFVU0IgZGV2aWNlIG1hZGV2X2FkZHI9JWQiLCBkZXYtPm1hZGV2X2FkZHIpOw0KKw0KKwlkZWxf
dGltZXJfc3luYygmZGV2LT5jb25uZWN0aW9uX3RpbWVyKTsNCisNCisJLyogQ2xpZW50IElTIHJl
c3BvbnNpdmUgKi8NCisJaWYgKCFhdG9taWNfcmVhZCgmZGV2LT51bnJlc3BvbnNpdmVfY2xpZW50
KSkgew0KKwkJbWVtc2V0KCZldmVudCwgMCwgc2l6ZW9mKGV2ZW50KSk7DQorCQlldmVudC50eXBl
ID0gTUFVU0JfRVZFTlRfVFlQRV9ERUxFVEVfTUFfREVWOw0KKwkJZXZlbnQubWdtdC5kZWxldGVf
bWFfZGV2LmRldmljZV9pZCA9IGRldi0+aWQ7DQorCQlldmVudC5tZ210LmRlbGV0ZV9tYV9kZXYu
ZXZlbnRfaWQgID0gbWF1c2JfZXZlbnRfaWQoZGV2KTsNCisNCisJCWluaXRfY29tcGxldGlvbigm
Y29tcGxldGlvbik7DQorCQltYXVzYl9jb21wbGV0aW9uLmNvbXBsZXRpb25fZXZlbnQgPSAmY29t
cGxldGlvbjsNCisJCW1hdXNiX2NvbXBsZXRpb24uZXZlbnRfaWQgPSBldmVudC5tZ210LmRlbGV0
ZV9tYV9kZXYuZXZlbnRfaWQ7DQorCQltYXVzYl9jb21wbGV0aW9uLm1hdXNiX2V2ZW50ID0gJmV2
ZW50Ow0KKw0KKwkJbWF1c2JfaW5zZXJ0X2V2ZW50KGRldiwgJm1hdXNiX2NvbXBsZXRpb24pOw0K
Kw0KKwkJc3RhdHVzID0gbWF1c2JfZW5xdWV1ZV9ldmVudF90b191c2VyKGRldiwgJmV2ZW50KTsN
CisJCWlmIChzdGF0dXMgPCAwKSB7DQorCQkJbWF1c2JfcmVtb3ZlX2V2ZW50KGRldiwgJm1hdXNi
X2NvbXBsZXRpb24pOw0KKwkJCW1hdXNiX3ByX2VycigiUmluZyBidWZmZXIgZnVsbCwgZW5xdWV1
ZSBmYWlsZWQiKTsNCisJCQlyZXR1cm47DQorCQl9DQorCQltYXVzYl9wcl9kZWJ1ZygiRGVsZXRp
bmcgTUFVU0IgZGV2aWNlLi4uIik7DQorDQorCQlzdGF0dXMgPSB3YWl0X2Zvcl9jb21wbGV0aW9u
X2ludGVycnVwdGlibGVfdGltZW91dCgmY29tcGxldGlvbiwNCisJCQkJCW1zZWNzX3RvX2ppZmZp
ZXMoMzAwMCkpOw0KKw0KKwkJbWF1c2JfcHJfZGVidWcoIkRlbGV0aW5nIE1BVVNCIGRldmljZSBl
dmVudCBmaW5pc2hlZCBzdGF0dXMgJWQiLA0KKwkJCSAgICAgICBzdGF0dXMpOw0KKw0KKwkJbWF1
c2JfcmVtb3ZlX2V2ZW50KGRldiwgJm1hdXNiX2NvbXBsZXRpb24pOw0KKw0KKwkJc3RhdHVzID0g
d2FpdF9mb3JfY29tcGxldGlvbl9pbnRlcnJ1cHRpYmxlX3RpbWVvdXQoDQorCQkJCQkJJmRldi0+
dXNlcl9maW5pc2hlZF9ldmVudCwNCisJCQkJCQltc2Vjc190b19qaWZmaWVzKDMwMDApKTsNCisJ
CW1hdXNiX3ByX2luZm8oIlVzZXIgZXZlbnQgZmluaXNoZWQgc3RhdHVzPSVkIiwgc3RhdHVzKTsN
CisJfQ0KKw0KKwlmbHVzaF93b3JrcXVldWUoZGV2LT53b3JrcSk7DQorCWRlc3Ryb3lfd29ya3F1
ZXVlKGRldi0+d29ya3EpOw0KKw0KKwltYXVzYl9jbGVhcl9oY2RfbWFkZXYoZGV2LT5wb3J0X251
bWJlcik7DQorDQorCW1hdXNiX3JpbmdfYnVmZmVyX2NsZWFudXAoZGV2LT5yaW5nX2J1ZmZlcik7
DQorCW1hdXNiX3JpbmdfYnVmZmVyX2Rlc3Ryb3koZGV2LT5yaW5nX2J1ZmZlcik7DQorDQorCW1h
dXNiX3JlbW92ZV9tYWRldl9mcm9tX2xpc3QoZGV2LT5tYWRldl9hZGRyKTsNCisNCisJcHV0X25l
dChkZXYtPm5ldF9ucyk7DQorDQorCWtmcmVlKGRldi0+cmluZ19idWZmZXIpOw0KKwlrZnJlZShk
ZXYpOw0KKwltYXVzYl9zaWduYWxfZW1wdHlfbXNzKCk7DQorDQorCW1hdXNiX3ByX2luZm8oIk1B
VVNCIGRldmljZSBkZWxldGVkLiBWZXJzaW9uPSVzIiwgTUFVU0JfRFJJVkVSX1ZFUlNJT04pOw0K
K30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9waW5nX3dvcmsoc3RydWN0IHdvcmtfc3RydWN0ICp3
b3JrKQ0KK3sNCisJc3RydWN0IG1hdXNiX2RldmljZSAqZGV2ID0gY29udGFpbmVyX29mKHdvcmss
IHN0cnVjdCBtYXVzYl9kZXZpY2UsDQorCQkJCQkJcGluZ193b3JrKTsNCisJaW50IHN0YXR1cyA9
IDA7DQorDQorCWlmIChtYXVzYl9zdGFydF9jb25uZWN0aW9uX3RpbWVyKGRldikgPCAwKSB7DQor
CQltYXVzYl9wcl9lcnIoIkRldmljZSBkaXNjb25uZWN0aW5nIGR1ZSB0byBzZXNzaW9uIHRpbWVv
dXQgbWFkZXZfYWRkcj0lZCIsDQorCQkJICAgICBkZXYtPm1hZGV2X2FkZHIpOw0KKwkJcXVldWVf
d29yayhkZXYtPndvcmtxLCAmZGV2LT5zb2NrZXRfZGlzY29ubmVjdF93b3JrKTsNCisJCXF1ZXVl
X3dvcmsoZGV2LT53b3JrcSwgJmRldi0+aGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorCQlyZXR1cm47
DQorCX0NCisNCisJc3RhdHVzID0gbWF1c2JfcGluZ19ldmVudF90b191c2VyKGRldik7DQorDQor
CWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlJpbmcgYnVmZmVyIGZ1bGwiKTsN
CisJCXJldHVybjsNCisJfQ0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9oZWFydGJlYXRfd29y
ayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlICpk
ZXYgPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IG1hdXNiX2RldmljZSwNCisJCQkJCQloZWFy
dGJlYXRfd29yayk7DQorDQorCW1hdXNiX3ByX2VycigiRGV2aWNlIGRpc2Nvbm5lY3RpbmcgLSBh
cHAgaXMgdW5yZXNwb25zaXZlIik7DQorCWF0b21pY19zZXQoJmRldi0+dW5yZXNwb25zaXZlX2Ns
aWVudCwgMSk7DQorCW1hdXNiX2NvbXBsZXRlX3VyYnNfZnJvbV90cmVlKCk7DQorCXF1ZXVlX3dv
cmsoZGV2LT53b3JrcSwgJmRldi0+c29ja2V0X2Rpc2Nvbm5lY3Rfd29yayk7DQorCXF1ZXVlX3dv
cmsoZGV2LT53b3JrcSwgJmRldi0+aGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorfQ0KKw0KK3N0YXRp
YyB2b2lkIG1hdXNiX2Nvbm5lY3Rpb25fdGltZXJfZnVuYyhzdHJ1Y3QgdGltZXJfbGlzdCAqdGlt
ZXIpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYgPSBjb250YWluZXJfb2YodGltZXIs
IHN0cnVjdCBtYXVzYl9kZXZpY2UsDQorCQkJCQkJY29ubmVjdGlvbl90aW1lcik7DQorDQorCXF1
ZXVlX3dvcmsoZGV2LT53b3JrcSwgJmRldi0+cGluZ193b3JrKTsNCit9DQorDQorc3RhdGljIHZv
aWQgbWF1c2JfaGVhcnRiZWF0X3RpbWVyX2Z1bmMoc3RydWN0IHRpbWVyX2xpc3QgKnRpbWVyKQ0K
K3sNCisJdW5zaWduZWQgbG9uZyBmbGFncyA9IDA7DQorCXN0cnVjdCBtYXVzYl9kZXZpY2UgKmRl
diA9IE5VTEw7DQorDQorCWlmIChtYXVzYl9zdGFydF9oZWFydGJlYXRfdGltZXIoKSA8IDApIHsN
CisJCW1hdXNiX3ByX2VycigiRGV2aWNlcyBkaXNjb25uZWN0aW5nIC0gYXBwIGlzIHVucmVzcG9u
c2l2ZSIpOw0KKwkJc3Bpbl9sb2NrX2lycXNhdmUoJm1zcy5sb2NrLCBmbGFncyk7DQorDQorCQkv
KiBSZXNldCBjb25uZWN0ZWQgY2xpZW50cyAqLw0KKwkJbXNzLmNsaWVudF9jb25uZWN0ZWQgPSBm
YWxzZTsNCisJCW1zcy5taXNzZWRfaGVhcnRiZWF0cyA9IDA7DQorDQorCQlsaXN0X2Zvcl9lYWNo
X2VudHJ5KGRldiwgJm1zcy5tYWRldl9saXN0LCBsaXN0X2VudHJ5KSB7DQorCQkJbWF1c2JfcHJf
ZGVidWcoIkVucXVldWUgaGVhcnRiZWF0X3dvcmsgbWFkZXZfYWRkcj0leCIsDQorCQkJCSAgICAg
ICBkZXYtPm1hZGV2X2FkZHIpOw0KKwkJCXF1ZXVlX3dvcmsoZGV2LT53b3JrcSwgJmRldi0+aGVh
cnRiZWF0X3dvcmspOw0KKwkJfQ0KKw0KKwkJY29tcGxldGUoJm1zcy5jbGllbnRfc3RvcHBlZCk7
DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwl9DQorfQ0K
Kw0KK3N0YXRpYyBzdHJ1Y3QgbWF1c2JfZGV2aWNlICptYXVzYl9jcmVhdGVfbWFkZXYoc3RydWN0
IG1hdXNiX2RldmljZV9hZGRyZXNzDQorCQkJCQlkZXZfYWRkciwgdWludDhfdCBtYWRldl9hZGRy
ZXNzLA0KKwkJCQkJaW50ICpzdGF0dXMpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXY7
DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3MgPSAwOw0KKwljaGFyIHdvcmtxX25hbWVbMTZdOw0KKwlz
dHJ1Y3Qgd29ya3F1ZXVlX3N0cnVjdCAqd29ya3E7DQorDQorCW1lbXNldCh3b3JrcV9uYW1lLCAw
LCBzaXplb2Yod29ya3FfbmFtZSkpOw0KKwlzcHJpbnRmKHdvcmtxX25hbWUsICIleCIsIG1hZGV2
X2FkZHJlc3MpOw0KKwlzdHJjYXQod29ya3FfbmFtZSwgIl9tYWRldl93b3JrcSIpOw0KKw0KKwlt
YXVzYl9wcl9kZWJ1ZygibWFkZXZfd29ya3FfbmFtZSA9ICVzIiwgd29ya3FfbmFtZSk7DQorDQor
CXdvcmtxID0gYWxsb2Nfb3JkZXJlZF93b3JrcXVldWUod29ya3FfbmFtZSwgV1FfTUVNX1JFQ0xB
SU0pOw0KKwlpZiAoIXdvcmtxKSB7DQorCQltYXVzYl9wcl9hbGVydCgiQ291bGQgbm90IGFsbG9j
YXRlIHdvcmtxdWV1ZSEiKTsNCisJCSpzdGF0dXMgPSAtRU5PTUVNOw0KKwkJcmV0dXJuIE5VTEw7
DQorCX0NCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1zcy5sb2NrLCBmbGFncyk7DQorDQorCWlm
IChtc3MuZGVpbml0X2luX3Byb2dyZXNzKSB7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZt
c3MubG9jaywgZmxhZ3MpOw0KKwkJbWF1c2JfcHJfYWxlcnQoIkRldmljZSBjcmVhdGluZyBmYWls
ZWQgLSBtc3MgZGVpbml0IGluIHByb2dyZXNzIik7DQorCQlmbHVzaF93b3JrcXVldWUod29ya3Ep
Ow0KKwkJZGVzdHJveV93b3JrcXVldWUod29ya3EpOw0KKwkJKnN0YXR1cyA9IC1FU0hVVERPV047
DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKw0KKwlkZXYgPSBtYXVzYl9nZXRfZGV2X2Zyb21fYWRk
cl91bnNhZmUobWFkZXZfYWRkcmVzcyk7DQorDQorCWlmIChkZXYgIT0gTlVMTCkgew0KKwkJc3Bp
bl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisJCW1hdXNiX3ByX2RlYnVn
KCJNQVVTQiBkZXZpY2UgYWxyZWFkeSBjb25uZWN0ZWQsIG1hZGV2X2FkZHJlc3M9JXgiLA0KKwkJ
CSAgICAgICBtYWRldl9hZGRyZXNzKTsNCisJCWZsdXNoX3dvcmtxdWV1ZSh3b3JrcSk7DQorCQlk
ZXN0cm95X3dvcmtxdWV1ZSh3b3JrcSk7DQorCQkqc3RhdHVzID0gLUVFWElTVDsNCisJCXJldHVy
biBOVUxMOw0KKwl9DQorDQorCWRldiA9IGt6YWxsb2Moc2l6ZW9mKCpkZXYpLCBHRlBfQVRPTUlD
KTsNCisNCisJaWYgKHVubGlrZWx5KCFkZXYpKSB7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3Jl
KCZtc3MubG9jaywgZmxhZ3MpOw0KKwkJbWF1c2JfcHJfYWxlcnQoIkNvdWxkIG5vdCBhbGxvY2F0
ZSBNQVVTQiBkZXZpY2UhIik7DQorCQlmbHVzaF93b3JrcXVldWUod29ya3EpOw0KKwkJZGVzdHJv
eV93b3JrcXVldWUod29ya3EpOw0KKwkJKnN0YXR1cyA9IC1FTk9NRU07DQorCQlyZXR1cm4gTlVM
TDsNCisJfQ0KKw0KKwltYXVzYl9wcl9pbmZvKCJDcmVhdGUgTUFVU0IgZGV2aWNlLiBWZXJzaW9u
PSVzIiwgTUFVU0JfRFJJVkVSX1ZFUlNJT04pOw0KKw0KKwlkZXYtPndvcmtxID0gd29ya3E7DQor
DQorCUlOSVRfV09SSygmZGV2LT53b3JrLCBtYXVzYl9ocGFsX2tlcm5lbF93b3JrKTsNCisJSU5J
VF9XT1JLKCZkZXYtPnNvY2tldF9kaXNjb25uZWN0X3dvcmssIG1hdXNiX3NvY2tldF9kaXNjb25u
ZWN0X2V2ZW50KTsNCisJSU5JVF9XT1JLKCZkZXYtPmhjZF9kaXNjb25uZWN0X3dvcmssIG1hdXNi
X2hjZF9kaXNjb25uZWN0X2V2ZW50KTsNCisJSU5JVF9XT1JLKCZkZXYtPm1hZGV2X2RlbGV0ZV93
b3JrLCBtYXVzYl9kZWxldGVfbWFkZXYpOw0KKwlJTklUX1dPUksoJmRldi0+cGluZ193b3JrLCBt
YXVzYl9waW5nX3dvcmspOw0KKwlJTklUX1dPUksoJmRldi0+aGVhcnRiZWF0X3dvcmssIG1hdXNi
X2hlYXJ0YmVhdF93b3JrKTsNCisNCisJa3JlZl9pbml0KCZkZXYtPnJlZmNvdW50KTsNCisNCisJ
SU5JVF9MSVNUX0hFQUQoJmRldi0+Y29tcGxldGlvbl9ldmVudHMpOw0KKwlzcGluX2xvY2tfaW5p
dCgmZGV2LT5jb21wbGV0aW9uX2V2ZW50c19sb2NrKTsNCisJc3Bpbl9sb2NrX2luaXQoJmRldi0+
bnVtX29mX3VzZXJfZXZlbnRzX2xvY2spOw0KKwlzcGluX2xvY2tfaW5pdCgmZGV2LT5jb25uZWN0
aW9uX3RpbWVyX2xvY2spOw0KKw0KKwlpbml0X2NvbXBsZXRpb24oJmRldi0+dXNlcl9maW5pc2hl
ZF9ldmVudCk7DQorCWF0b21pY19zZXQoJmRldi0+dW5yZXNwb25zaXZlX2NsaWVudCwgMCk7DQor
DQorCXRpbWVyX3NldHVwKCZkZXYtPmNvbm5lY3Rpb25fdGltZXIsIG1hdXNiX2Nvbm5lY3Rpb25f
dGltZXJfZnVuYywgMCk7DQorDQorCWRldi0+ZGV2X2FkZHIgPSBkZXZfYWRkcjsNCisJZGV2LT5t
YWRldl9hZGRyID0gbWFkZXZfYWRkcmVzczsNCisJZGV2LT5uZXRfbnMgPSBnZXRfbmV0KGN1cnJl
bnQtPm5zcHJveHktPm5ldF9ucyk7DQorDQorCWlmICghbGlzdF9lbXB0eSgmbXNzLmF2YWlsYWJs
ZV9yaW5nX2J1ZmZlcnMpKSB7DQorCQlkZXYtPnJpbmdfYnVmZmVyID0gY29udGFpbmVyX29mKG1z
cy5hdmFpbGFibGVfcmluZ19idWZmZXJzLm5leHQsDQorCQkJCQkJc3RydWN0IG1hdXNiX3Jpbmdf
YnVmZmVyLA0KKwkJCQkJCWxpc3RfZW50cnkpOw0KKwkJbGlzdF9kZWwobXNzLmF2YWlsYWJsZV9y
aW5nX2J1ZmZlcnMubmV4dCk7DQorCX0gZWxzZSB7DQorCQltYXVzYl9wcl9hbGVydCgiUmluZyBi
dWZmZXIgZm9yIG1hdXNiIGRldmljZSBpcyBub3QgYXZhaWxiYWxlISIpOw0KKwl9DQorDQorCWxp
c3RfYWRkX3RhaWwoJmRldi0+bGlzdF9lbnRyeSwgJm1zcy5tYWRldl9saXN0KTsNCisNCisJcmVp
bml0X2NvbXBsZXRpb24oJm1zcy5lbXB0eSk7DQorDQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUo
Jm1zcy5sb2NrLCBmbGFncyk7DQorDQorCXJldHVybiBkZXY7DQorfQ0KKw0KK3ZvaWQgbWF1c2Jf
cmVsZWFzZV9tYV9kZXZfYXN5bmMoc3RydWN0IGtyZWYgKmtyZWYpDQorew0KKwlzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYgPSBjb250YWluZXJfb2Yoa3JlZiwgc3RydWN0IG1hdXNiX2RldmljZSwN
CisJCQkJCQlyZWZjb3VudCk7DQorDQorCW1hdXNiX3ByX2luZm8oIlNjaGVkdWxpbmcgd29yayBm
b3IgTUFVU0IgZGV2aWNlIHRvIGJlIGRlbGV0ZWQiKTsNCisNCisJc2NoZWR1bGVfd29yaygmZGV2
LT5tYWRldl9kZWxldGVfd29yayk7DQorfQ0KKw0KK2ludCBtYXVzYl9pbml0aWF0ZV9kZXZfY29u
bmVjdGlvbihzdHJ1Y3QgbWF1c2JfZGV2aWNlX2FkZHJlc3MgZGV2X2FkZHIsDQorCQkJCSAgdWlu
dDhfdCBtYWRldl9hZGRyZXNzKQ0KK3sNCisJaW50IGVycm9yID0gMDsNCisJc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2Ow0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0gMDsNCisNCisJc3Bpbl9sb2Nr
X2lycXNhdmUoJm1zcy5sb2NrLCBmbGFncyk7DQorCWRldiA9IG1hdXNiX2dldF9kZXZfZnJvbV9h
ZGRyX3Vuc2FmZShtYWRldl9hZGRyZXNzKTsNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNz
LmxvY2ssIGZsYWdzKTsNCisNCisJaWYgKGRldiAhPSBOVUxMKSB7DQorCQltYXVzYl9wcl9kZWJ1
ZygiTUFVU0IgZGV2aWNlIGFscmVhZHkgY29ubmVjdGVkLCBtYWRldl9hZGRyZXNzPSV4IiwNCisJ
CQkgICAgICAgbWFkZXZfYWRkcmVzcyk7DQorCQlyZXR1cm4gLUVFWElTVDsNCisJfQ0KKw0KKwlk
ZXYgPSBtYXVzYl9jcmVhdGVfbWFkZXYoZGV2X2FkZHIsIG1hZGV2X2FkZHJlc3MsICZlcnJvcik7
DQorDQorCWlmICghZGV2KQ0KKwkJcmV0dXJuIGVycm9yOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJO
ZXcgTUFVU0IgZGV2aWNlIGNyZWF0ZWQgbWFkZXZfYWRkcj0lZCIsIG1hZGV2X2FkZHJlc3MpOw0K
Kw0KKwllcnJvciA9IG1hdXNiX2luaXRfaXBfY3R4KCZkZXYtPm1nbXRfY2hhbm5lbCwgZGV2LT5u
ZXRfbnMsDQorCQkJCSAgZGV2LT5kZXZfYWRkci5JcC5BZGRyZXNzLmlwNCwNCisJCQkJICBkZXYt
PmRldl9hZGRyLklwLlBvcnQubWFuYWdlbWVudCwgZGV2LA0KKwkJCQkgIG1hdXNiX2lwX2NhbGxi
YWNrLCBNQVVTQl9NR01UX0NIQU5ORUwpOw0KKwlpZiAoZXJyb3IpIHsNCisJCW1hdXNiX3ByX2Vy
cigiTWdtdCBpcCBjb250ZXh0IGluaXQgZmFpbGVkOiBlcnJvcj0lZCIsIGVycm9yKTsNCisJCWty
ZWZfcHV0KCZkZXYtPnJlZmNvdW50LCBtYXVzYl9yZWxlYXNlX21hX2Rldl9hc3luYyk7DQorCQly
ZXR1cm4gZXJyb3I7DQorCX0NCisNCisJbWF1c2JfaXBfY29ubmVjdF9hc3luYyhkZXYtPm1nbXRf
Y2hhbm5lbCk7DQorDQorCXJldHVybiAwOw0KK30NCisNCit2b2lkIG1hdXNiX29uX21hZGV2X2Nv
bm5lY3RlZChzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYpDQorew0KKwlpbnQgc3RhdHVzID0gMDsN
CisJc3RydWN0IG1hdXNiX2V2ZW50IG1hdXNiX2V2ZW50Ow0KKw0KKwltYXVzYl9wcl9pbmZvKCIi
KTsNCisNCisJbWF1c2JfZGV2X3Jlc2V0X3JlcV9ldmVudCgmbWF1c2JfZXZlbnQpOw0KKwlzdGF0
dXMgPSBtYXVzYl9lbnF1ZXVlX2V2ZW50X3RvX3VzZXIoZGV2LCAmbWF1c2JfZXZlbnQpOw0KKwlp
ZiAoc3RhdHVzIDwgMCkgew0KKwkJbWF1c2JfcHJfZXJyKCJSaW5nIGJ1ZmZlciBmdWxsLCBkZXZy
ZXNldCBmYWlsZWQiKTsNCisJCXF1ZXVlX3dvcmsoZGV2LT53b3JrcSwgJmRldi0+aGNkX2Rpc2Nv
bm5lY3Rfd29yayk7DQorCQlyZXR1cm47DQorCX0NCit9DQorDQoraW50IG1hdXNiX2VucXVldWVf
ZXZlbnRfZnJvbV91c2VyKHVpbnQ4X3QgbWFkZXZfYWRkciwgdWludDMyX3QgYWxsX2V2ZW50cykN
Cit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorCXVpbnQxNl90IG51bV9vZl9jb21wbGV0ZWQs
DQorCQkgbnVtX29mX2V2ZW50czsNCisJc3RydWN0IG1hdXNiX2RldmljZSAqZGV2Ow0KKw0KKwlz
cGluX2xvY2tfaXJxc2F2ZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisJZGV2ID0gbWF1c2JfZ2V0X2Rl
dl9mcm9tX2FkZHJfdW5zYWZlKG1hZGV2X2FkZHIpOw0KKw0KKwlpZiAoIWRldikgew0KKwkJc3Bp
bl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisJCXJldHVybiAwOw0KKwl9
DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZkZXYtPm51bV9vZl91c2VyX2V2ZW50c19sb2NrLCBm
bGFncyk7DQorCW51bV9vZl9jb21wbGV0ZWQgPSAodWludDE2X3QpYWxsX2V2ZW50cyArDQorCQkJ
ICAgKHVpbnQxNl90KWRldi0+bnVtX29mX3VzZXJfZXZlbnRzOw0KKwludW1fb2ZfZXZlbnRzCSA9
IChhbGxfZXZlbnRzID4+ICg4ICogc2l6ZW9mKG51bV9vZl9ldmVudHMpKSkgKw0KKwkJKGRldi0+
bnVtX29mX3VzZXJfZXZlbnRzID4+ICg4ICogc2l6ZW9mKG51bV9vZl9ldmVudHMpKSk7DQorCWRl
di0+bnVtX29mX3VzZXJfZXZlbnRzICA9IG51bV9vZl9jb21wbGV0ZWQ7DQorCWRldi0+bnVtX29m
X3VzZXJfZXZlbnRzIHw9ICh1aW50MzJfdCludW1fb2ZfZXZlbnRzIDw8DQorCQkoOCAqIHNpemVv
ZihudW1fb2ZfZXZlbnRzKSk7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJmRldi0+bnVtX29m
X3VzZXJfZXZlbnRzX2xvY2ssIGZsYWdzKTsNCisJcXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2
LT53b3JrKTsNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCisN
CisJcmV0dXJuIDA7DQorfQ0KKw0KK2ludCBtYXVzYl9lbnF1ZXVlX2V2ZW50X3RvX3VzZXIoc3Ry
dWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQlzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0K
K3sNCisJaW50IHN0YXR1cyA9IDA7DQorDQorCWV2ZW50LT5tYWRldl9hZGRyID0gZGV2LT5tYWRl
dl9hZGRyOw0KKwlzdGF0dXMgPSBtYXVzYl9yaW5nX2J1ZmZlcl9wdXQoZGV2LT5yaW5nX2J1ZmZl
ciwgZXZlbnQpOw0KKw0KKwlpZiAodW5saWtlbHkoc3RhdHVzIDwgMCkpIHsNCisJCW1hdXNiX3By
X2VycigiUmluZyBidWZmZXIgb3BlcmF0aW9uIGZhaWxlZCIpOw0KKwkJcmV0dXJuIHN0YXR1czsN
CisJfQ0KKw0KKwltYXVzYl9ub3RpZnlfcmluZ19ldmVudHMoZGV2LT5yaW5nX2J1ZmZlcik7DQor
CW1hdXNiX3ByX2RlYnVnKCJVc2VyLXNwYWNlIG5vdGlmaWNhdGlvbiBzZW50LiIpOw0KKw0KKwly
ZXR1cm4gMDsNCit9DQorDQoraW50IG1hdXNiX2RhdGFfcmVxX2VucXVldWVfZXZlbnQoc3RydWN0
IG1hdXNiX2RldmljZSAqZGV2LCB1aW50MTZfdCBlcF9oYW5kbGUsDQorCQkJCSBzdHJ1Y3QgdXJi
ICpyZXF1ZXN0KQ0KK3sNCisJaW50IHN0YXR1cyA9IDA7DQorCXN0cnVjdCBtYXVzYl9ldmVudCBt
YXVzYl9ldmVudDsNCisNCisJbWF1c2JfcHJfZGVidWcoIiIpOw0KKw0KKwltYXVzYl9ldmVudC50
eXBlICAgPSBNQVVTQl9FVkVOVF9UWVBFX1NFTkRfREFUQV9NU0c7DQorCW1hdXNiX2V2ZW50LnN0
YXR1cyA9IDA7DQorDQorCW1hdXNiX2V2ZW50LmRhdGEudHJhbnNmZXJfdHlwZSA9DQorCQltYXVz
Yl90cmFuc2Zlcl90eXBlX2Zyb21fdXNiKCZyZXF1ZXN0LT5lcC0+ZGVzYyk7DQorCW1hdXNiX2V2
ZW50LmRhdGEuZGV2aWNlX2lkCT0gZGV2LT5pZDsNCisJbWF1c2JfZXZlbnQuZGF0YS5lcF9oYW5k
bGUJPSBlcF9oYW5kbGU7DQorCW1hdXNiX2V2ZW50LmRhdGEudXJiCQk9ICh1aW50NjRfdClyZXF1
ZXN0Ow0KKwltYXVzYl9ldmVudC5kYXRhLnNldHVwX3BhY2tldAk9DQorCQkodXNiX2VuZHBvaW50
X3hmZXJfY29udHJvbCgmcmVxdWVzdC0+ZXAtPmRlc2MpICYmDQorCQkJcmVxdWVzdC0+c2V0dXBf
cGFja2V0KTsNCisJbWF1c2JfZXZlbnQuZGF0YS50cmFuc2Zlcl9zaXplCT0gcmVxdWVzdC0+dHJh
bnNmZXJfYnVmZmVyX2xlbmd0aDsNCisJbWF1c2JfZXZlbnQuZGF0YS5kaXJlY3Rpb24JPSAodXNi
X3VyYl9kaXJfaW4ocmVxdWVzdCkgPw0KKwkJCQkJCU1BVVNCX0RBVEFfTVNHX0RJUkVDVElPTl9J
TiA6DQorCQkJCQkJTUFVU0JfREFUQV9NU0dfRElSRUNUSU9OX09VVCk7DQorCW1hdXNiX2V2ZW50
LmRhdGEudHJhbnNmZXJfc2l6ZSArPQ0KKwkJKChtYXVzYl9ldmVudC5kYXRhLmRpcmVjdGlvbiA9
PSBNQVVTQl9EQVRBX01TR19ESVJFQ1RJT05fT1VUICYmDQorCQkJbWF1c2JfZXZlbnQuZGF0YS5z
ZXR1cF9wYWNrZXQpID8NCisJCQkJTUFVU0JfQ09OVFJPTF9TRVRVUF9TSVpFIDogMCk7DQorCW1h
dXNiX2V2ZW50LmRhdGEucmVtX3RyYW5zZmVyX3NpemUgPSBtYXVzYl9ldmVudC5kYXRhLnRyYW5z
ZmVyX3NpemU7DQorCW1hdXNiX2V2ZW50LmRhdGEudHJhbnNmZXJfZmxhZ3MJICAgPSByZXF1ZXN0
LT50cmFuc2Zlcl9mbGFnczsNCisJbWF1c2JfZXZlbnQuZGF0YS50cmFuc2Zlcl9lb3QJICAgPSBm
YWxzZTsNCisJbWF1c2JfZXZlbnQuZGF0YS5pc29jaF9zZWdfbnVtCSAgID0gcmVxdWVzdC0+bnVt
YmVyX29mX3BhY2tldHM7DQorCW1hdXNiX2V2ZW50LmRhdGEucmVjdl9idWYJICAgPSAwOw0KKwlt
YXVzYl9ldmVudC5kYXRhLnBheWxvYWRfc2l6ZQkgICA9DQorCQkodXNiX2VuZHBvaW50X3hmZXJf
aXNvYygmcmVxdWVzdC0+ZXAtPmRlc2MpICYmDQorCQkgdXNiX2VuZHBvaW50X2Rpcl9vdXQoJnJl
cXVlc3QtPmVwLT5kZXNjKSkgPw0KKwkJKHJlcXVlc3QtPmlzb19mcmFtZV9kZXNjW3JlcXVlc3Qt
Pm51bWJlcl9vZl9wYWNrZXRzIC0gMV0NCisJCQkJCQkJCS5vZmZzZXQgKw0KKwkJIHJlcXVlc3Qt
Pmlzb19mcmFtZV9kZXNjW3JlcXVlc3QtPm51bWJlcl9vZl9wYWNrZXRzIC0gMV0NCisJCQkJCQkJ
CS5sZW5ndGgpIDogMDsNCisNCisJaWYgKG1hdXNiX2V2ZW50LmRhdGEuc2V0dXBfcGFja2V0KSB7
DQorCQltZW1jcHkobWF1c2JfZXZlbnQuZGF0YS5oZHJfYWNrLCByZXF1ZXN0LT5zZXR1cF9wYWNr
ZXQsDQorCQkgICAgICAgTUFVU0JfQ09OVFJPTF9TRVRVUF9TSVpFKTsNCisJCW1lbWNweShzaGlm
dF9wdHIobWF1c2JfZXZlbnQuZGF0YS5oZHJfYWNrLA0KKwkJCU1BVVNCX0NPTlRST0xfU0VUVVBf
U0laRSksDQorCQkJJnJlcXVlc3QtPmRldi0+cm91dGUsIHNpemVvZihyZXF1ZXN0LT5kZXYtPnJv
dXRlKSk7DQorCX0NCisJc3RhdHVzID0gbWF1c2JfZW5xdWV1ZV9ldmVudF90b191c2VyKGRldiwg
Jm1hdXNiX2V2ZW50KTsNCisJaWYgKHN0YXR1cyA8IDApDQorCQltYXVzYl9wcl9lcnIoIkZhaWxl
ZCB0byBlbnF1ZXVlIGV2ZW50IHRvIHVzZXItc3BhY2UgZXBfaGFuZGxlPSUjeCwgc3RhdHVzPSVk
IiwNCisJCQkgICAgIG1hdXNiX2V2ZW50LmRhdGEuZXBfaGFuZGxlLCBzdGF0dXMpOw0KKw0KKwly
ZXR1cm4gc3RhdHVzOw0KK30NCisNCit2b2lkIG1hdXNiX2NvbXBsZXRlX3JlcXVlc3Qoc3RydWN0
IHVyYiAqdXJiLCB1aW50MzJfdCBhY3R1YWxfbGVuZ3RoLCBpbnQgc3RhdHVzKQ0KK3sNCisJbWF1
c2JfaGNkX3VyYl9jb21wbGV0ZSh1cmIsIGFjdHVhbF9sZW5ndGgsIHN0YXR1cyk7DQorfQ0KKw0K
K2ludCBtYXVzYl9zaWduYWxfZXZlbnQoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJICAg
ICAgIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsIGxvbmcgZXZlbnRfaWQpDQorew0KKwl1bnNp
Z25lZCBsb25nIGZsYWdzOw0KKwlzdHJ1Y3QgbWF1c2JfY29tcGxldGlvbiAqbWF1c2JfY29tcGxl
dGlvbjsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJmRldi0+Y29tcGxldGlvbl9ldmVudHNfbG9j
aywgZmxhZ3MpOw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KG1hdXNiX2NvbXBsZXRpb24sICZkZXYt
PmNvbXBsZXRpb25fZXZlbnRzLA0KKwkJCSAgICBsaXN0X2VudHJ5KSB7DQorCQlpZiAobWF1c2Jf
Y29tcGxldGlvbi0+ZXZlbnRfaWQgPT0gZXZlbnRfaWQpIHsNCisJCQltZW1jcHkobWF1c2JfY29t
cGxldGlvbi0+bWF1c2JfZXZlbnQsIGV2ZW50LA0KKwkJCSAgICAgICBzaXplb2YoKmV2ZW50KSk7
DQorCQkJY29tcGxldGUobWF1c2JfY29tcGxldGlvbi0+Y29tcGxldGlvbl9ldmVudCk7DQorCQkJ
c3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmZGV2LT5jb21wbGV0aW9uX2V2ZW50c19sb2NrLA0KKwkJ
CQkJICAgICAgIGZsYWdzKTsNCisJCQlyZXR1cm4gMDsNCisJCX0NCisJfQ0KKwlzcGluX3VubG9j
a19pcnFyZXN0b3JlKCZkZXYtPmNvbXBsZXRpb25fZXZlbnRzX2xvY2ssIGZsYWdzKTsNCisNCisJ
cmV0dXJuIC1FVElNRURPVVQ7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2Jfc3RhcnRfY29ubmVj
dGlvbl90aW1lcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYpDQorew0KKwl1bnNpZ25lZCBsb25n
IGZsYWdzID0gMDsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJmRldi0+Y29ubmVjdGlvbl90aW1l
cl9sb2NrLCBmbGFncyk7DQorDQorCWlmICgrK2Rldi0+cmVjZWl2ZV9mYWlsdXJlc19udW0gPiBN
QVVTQl9NQVhfUkVDRUlWRV9GQUlMVVJFUykgew0KKwkJbWF1c2JfcHJfZXJyKCJNaXNzZWQgbW9y
ZSB0aGFuICVkIHBpbmcgcmVzcG9uc2VzIiwNCisJCQkgICAgICBNQVVTQl9NQVhfUkVDRUlWRV9G
QUlMVVJFUyk7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZkZXYtPmNvbm5lY3Rpb25fdGlt
ZXJfbG9jaywgZmxhZ3MpOw0KKwkJcmV0dXJuIC1FVElNRURPVVQ7DQorCX0NCisNCisJbW9kX3Rp
bWVyKCZkZXYtPmNvbm5lY3Rpb25fdGltZXIsIGppZmZpZXMgKyBtc2Vjc190b19qaWZmaWVzKDEw
MDApKTsNCisNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmZGV2LT5jb25uZWN0aW9uX3RpbWVy
X2xvY2ssIGZsYWdzKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfcmVzZXRf
Y29ubmVjdGlvbl90aW1lcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYpDQorew0KKwl1bnNpZ25l
ZCBsb25nIGZsYWdzID0gMDsNCisNCisJc3Bpbl9sb2NrX2lycXNhdmUoJmRldi0+Y29ubmVjdGlv
bl90aW1lcl9sb2NrLCBmbGFncyk7DQorCWRldi0+cmVjZWl2ZV9mYWlsdXJlc19udW0gPSAwOw0K
Kw0KKwltb2RfdGltZXIoJmRldi0+Y29ubmVjdGlvbl90aW1lciwgamlmZmllcyArIG1zZWNzX3Rv
X2ppZmZpZXMoMTAwMCkpOw0KKw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZkZXYtPmNvbm5l
Y3Rpb25fdGltZXJfbG9jaywgZmxhZ3MpOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX3N0YXJ0
X2hlYXJ0YmVhdF90aW1lcih2b2lkKQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFncyA9IDA7DQor
DQorCXNwaW5fbG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwlpZiAoKyttc3MubWlz
c2VkX2hlYXJ0YmVhdHMgPiBNQVVTQl9NQVhfTUlTU0VEX0hFQVJUQkVBVFMpIHsNCisJCW1hdXNi
X3ByX2VycigiTWlzc2VkIG1vcmUgdGhhbiAlZCBoZWFydGJlYXRzIiwNCisJCQkgICAgICBNQVVT
Ql9NQVhfTUlTU0VEX0hFQVJUQkVBVFMpOw0KKwkJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNz
LmxvY2ssIGZsYWdzKTsNCisJCXJldHVybiAtRVRJTUVET1VUOw0KKwl9DQorDQorCXNwaW5fdW5s
b2NrX2lycXJlc3RvcmUoJm1zcy5sb2NrLCBmbGFncyk7DQorCW1vZF90aW1lcigmbXNzLmhlYXJ0
YmVhdF90aW1lciwNCisJCSAgamlmZmllcyArIG1zZWNzX3RvX2ppZmZpZXMoTUFVU0JfSEVBUlRC
RUFUX1RJTUVPVVRfTVMpKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfcmVz
ZXRfaGVhcnRiZWF0X2NudCh2b2lkKQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFncyA9IDA7DQor
DQorCXNwaW5fbG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwltc3MubWlzc2VkX2hl
YXJ0YmVhdHMgPSAwOw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtc3MubG9jaywgZmxhZ3Mp
Ow0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9leGVjdXRlX3VyYl9kZXF1ZXVlKHN0cnVjdCB3
b3JrX3N0cnVjdCAqZGVxdWV1ZV93b3JrKQ0KK3sNCisJc3RydWN0IG1hdXNiX3VyYl9jdHggKnVy
Yl9jdHggPQ0KKwkJCWNvbnRhaW5lcl9vZihkZXF1ZXVlX3dvcmssIHN0cnVjdCBtYXVzYl91cmJf
Y3R4LCB3b3JrKTsNCisJc3RydWN0IHVyYgkJICAqdXJiID0gdXJiX2N0eC0+dXJiOw0KKwlzdHJ1
Y3QgbWF1c2JfZW5kcG9pbnRfY3R4ICplbmRwb2ludF9jdHg7DQorCXN0cnVjdCBtYXVzYl9kZXZp
Y2UJICAqbWFfZGV2Ow0KKwlzdHJ1Y3QgbWF1c2JfZXZlbnQJICBtYXVzYl9ldmVudDsNCisJaW50
IHN0YXR1cyA9IDA7DQorDQorCWVuZHBvaW50X2N0eCA9IHVyYi0+ZXAtPmhjcHJpdjsNCisJbWFf
ZGV2CSAgICAgPSBlbmRwb2ludF9jdHgtPm1hX2RldjsNCisNCisJaWYgKGF0b21pY19yZWFkKCZt
YV9kZXYtPnVucmVzcG9uc2l2ZV9jbGllbnQpKSB7DQorCQltYXVzYl9wcl9lcnIoIkNsaWVudCBp
cyBub3QgcmVzcG9uc2l2ZSBhbnltb3JlIC0gZmluaXNoIHVyYiBpbW1lZGlhdGVseSB1cmI9JXAs
IGVwX2hhbmRsZT0lI3gsIGRldl9oYW5kbGU9JSN4IiwNCisJCQkgICAgIHVyYiwgZW5kcG9pbnRf
Y3R4LT5lcF9oYW5kbGUsDQorCQkJICAgICBlbmRwb2ludF9jdHgtPmRldl9oYW5kbGUpOw0KKwkJ
Z290byBsX2NvbXBsZXRlX3VyYjsNCisJfQ0KKw0KKwltYXVzYl9wcl9kZWJ1ZygidXJiPSVwLCBl
cF9oYW5kbGU9JSN4LCBkZXZfaGFuZGxlPSUjeCIsDQorCQkJdXJiLCBlbmRwb2ludF9jdHgtPmVw
X2hhbmRsZSwgZW5kcG9pbnRfY3R4LT5kZXZfaGFuZGxlKTsNCisNCisJaWYgKCF1c2JfZW5kcG9p
bnRfeGZlcl9pc29jKCZ1cmItPmVwLT5kZXNjKSkgew0KKwkJc3RhdHVzID0gbWF1c2JfY2FuY2Vs
dHJhbnNmZXJfZXZlbnRfdG9fdXNlcigNCisJCQkJZW5kcG9pbnRfY3R4LT5tYV9kZXYsIGVuZHBv
aW50X2N0eC0+ZGV2X2hhbmRsZSwNCisJCQkJZW5kcG9pbnRfY3R4LT5lcF9oYW5kbGUsICh1aW50
NjRfdCl1cmIpOw0KKwkJaWYgKHN0YXR1cyA8IDApIHsNCisJCQltYXVzYl9wcl9lcnIoIkZhaWxl
ZCB0byBlbnF1ZXVlIGNhbmNlbCB0cmFuc2ZlciB0byB1c2VyIik7DQorCQkJZ290byBsX2NvbXBs
ZXRlX3VyYjsNCisJCX0NCisNCisJfQ0KKw0KKwltZW1zZXQoJm1hdXNiX2V2ZW50LCAwLCBzaXpl
b2YobWF1c2JfZXZlbnQpKTsNCisNCisJbWF1c2JfZXZlbnQudHlwZSAgID0gTUFVU0JfRVZFTlRf
VFlQRV9ERUxFVEVfREFUQV9UUkFOU0ZFUjsNCisJbWF1c2JfZXZlbnQuc3RhdHVzID0gMDsNCisN
CisJbWF1c2JfZXZlbnQuZGF0YS50cmFuc2Zlcl90eXBlID0NCisJCQkJbWF1c2JfdHJhbnNmZXJf
dHlwZV9mcm9tX3VzYigmdXJiLT5lcC0+ZGVzYyk7DQorCW1hdXNiX2V2ZW50LmRhdGEuZGV2aWNl
X2lkICAgICA9IG1hX2Rldi0+aWQ7DQorCW1hdXNiX2V2ZW50LmRhdGEuZXBfaGFuZGxlICAgICA9
IGVuZHBvaW50X2N0eC0+ZXBfaGFuZGxlOw0KKwltYXVzYl9ldmVudC5kYXRhLnVyYgkgICAgICAg
PSAodWludDY0X3QpdXJiOw0KKwltYXVzYl9ldmVudC5kYXRhLmRpcmVjdGlvbiAgICAgPSAodXNi
X3VyYl9kaXJfaW4odXJiKSA/DQorCQkJCQkJTUFVU0JfREFUQV9NU0dfRElSRUNUSU9OX0lOIDoN
CisJCQkJCQlNQVVTQl9EQVRBX01TR19ESVJFQ1RJT05fT1VUKTsNCisNCisJc3RhdHVzID0gbWF1
c2JfZW5xdWV1ZV9ldmVudF90b191c2VyKGVuZHBvaW50X2N0eC0+bWFfZGV2LA0KKwkJCQkJCSZt
YXVzYl9ldmVudCk7DQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9hbGVydCgiRmFp
bGVkIHRvIGVucXVldWUgZXZlbnQgdG8gdXNlci1zcGFjZSBlcF9oYW5kbGU9JSN4LCBzdGF0dXM9
JWQiLA0KKwkJCQltYXVzYl9ldmVudC5kYXRhLmVwX2hhbmRsZSwgc3RhdHVzKTsNCisJCWdvdG8g
bF9jb21wbGV0ZV91cmI7DQorCX0NCisNCisJaWYgKCFtYXVzYl9yZXR1cm5fdXJiX2N0eF90b190
cmVlKHVyYl9jdHgsIGZhbHNlKSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIkZhaWxlZCB0byBpbnNl
cnQgaW4gdHJlZSB1cmI9JXAgZXBfaGFuZGxlPSUjeCwgc3RhdHVzPSVkIiwNCisJCQkJdXJiLCBt
YXVzYl9ldmVudC5kYXRhLmVwX2hhbmRsZSwgc3RhdHVzKTsNCisJCWdvdG8gbF9jb21wbGV0ZV91
cmI7DQorCX0NCisNCisJcmV0dXJuOw0KKw0KK2xfY29tcGxldGVfdXJiOg0KKw0KKwkvKiBEZWFs
bG9jYXRlIHVyYl9jdHggKi8NCisJbWF1c2JfdW5pbml0X2RhdGFfaXRlcmF0b3IoJnVyYl9jdHgt
Pml0ZXJhdG9yKTsNCisJa2ZyZWUodXJiX2N0eCk7DQorDQorCXVyYi0+c3RhdHVzCSAgID0gLUVQ
Uk9UTzsNCisJdXJiLT5hY3R1YWxfbGVuZ3RoID0gMDsNCisJYXRvbWljX2RlYygmdXJiLT51c2Vf
Y291bnQpOw0KKwl1c2JfaGNkX2dpdmViYWNrX3VyYih1cmItPmhjcHJpdiwgdXJiLCB1cmItPnN0
YXR1cyk7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfaW5pdGlhbGl6ZV9tc3Modm9pZCkNCit7DQorCXNw
aW5fbG9ja19pbml0KCZtc3MubG9jayk7DQorCUlOSVRfTElTVF9IRUFEKCZtc3MubWFkZXZfbGlz
dCk7DQorCUlOSVRfTElTVF9IRUFEKCZtc3MuYXZhaWxhYmxlX3JpbmdfYnVmZmVycyk7DQorDQor
CWluaXRfY29tcGxldGlvbigmbXNzLmVtcHR5KTsNCisJY29tcGxldGUoJm1zcy5lbXB0eSk7DQor
CWluaXRfY29tcGxldGlvbigmbXNzLnJpbmdzX2V2ZW50cy5tYXVzYl9yaW5nX2hhc19ldmVudHMp
Ow0KKwlhdG9taWNfc2V0KCZtc3MucmluZ3NfZXZlbnRzLm1hdXNiX3N0b3BfcmVhZGluZ19yaW5n
X2V2ZW50cywgMCk7DQorCW1zcy5kZWluaXRfaW5fcHJvZ3Jlc3MJPSBmYWxzZTsNCisJbXNzLnJp
bmdfYnVmZmVyX2lkCT0gMDsNCisJbXNzLmNsaWVudF9jb25uZWN0ZWQgPSBmYWxzZTsNCisJbXNz
Lm1pc3NlZF9oZWFydGJlYXRzID0gMDsNCisJaW5pdF9jb21wbGV0aW9uKCZtc3MuY2xpZW50X3N0
b3BwZWQpOw0KKwlhdG9taWNfc2V0KCZtc3MubnVtX29mX3RyYW5zaXRpb25zX3RvX3NsZWVwLCAw
KTsNCisNCisJdGltZXJfc2V0dXAoJm1zcy5oZWFydGJlYXRfdGltZXIsIG1hdXNiX2hlYXJ0YmVh
dF90aW1lcl9mdW5jLCAwKTsNCit9DQorDQordm9pZCBtYXVzYl9kZWluaXRpYWxpemVfbXNzKHZv
aWQpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYgPSBOVUxMOw0KKwl1bnNpZ25lZCBs
b25nIGZsYWdzID0gMDsNCisJaW50IHN0YXR1cyA9IDA7DQorDQorCXNwaW5fbG9ja19pcnFzYXZl
KCZtc3MubG9jaywgZmxhZ3MpOw0KKw0KKwltc3MuZGVpbml0X2luX3Byb2dyZXNzID0gdHJ1ZTsN
CisNCisJbGlzdF9mb3JfZWFjaF9lbnRyeShkZXYsICZtc3MubWFkZXZfbGlzdCwgbGlzdF9lbnRy
eSkgew0KKwkJbWF1c2JfcHJfZGVidWcoIkVucXVldWUgbWF1c2JfaGNkX2Rpc2Nvbm5lY3Rfd29y
ayBtYWRldl9hZGRyPSV4IiwNCisJCQkJZGV2LT5tYWRldl9hZGRyKTsNCisJCXF1ZXVlX3dvcmso
ZGV2LT53b3JrcSwNCisJCQkgICAmZGV2LT5oY2RfZGlzY29ubmVjdF93b3JrKTsNCisJfQ0KKw0K
KwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZtc3MubG9jaywgZmxhZ3MpOw0KKw0KKwl3YWl0X2Zv
cl9jb21wbGV0aW9uKCZtc3MuZW1wdHkpOw0KKwltYXVzYl9wcl9kZWJ1ZygiV2FpdGluZyBmb3Ig
Y29tcGxldGlvbiBvbiBkaXNjb25uZWN0X2V2ZW50IGVuZGVkIik7DQorCW1hdXNiX3N0b3Bfcmlu
Z19ldmVudHMoKTsNCisJc3RhdHVzID0gd2FpdF9mb3JfY29tcGxldGlvbl90aW1lb3V0KCZtc3Mu
Y2xpZW50X3N0b3BwZWQsDQorCQltc2Vjc190b19qaWZmaWVzKE1BVVNCX0NMSUVOVF9TVE9QUEVE
X1RJTUVPVVRfTVMpKTsNCisJbWF1c2JfcHJfaW5mbygiUmVtYWluaW5nIHRpbWUgYWZ0ZXIgd2Fp
dGluZyBmb3Igc3RvcHBpbmcgY2xpZW50ICVkIiwNCisJCSAgICAgIHN0YXR1cyk7DQorfQ0KKw0K
K2ludCBtYXVzYl9yZWdpc3Rlcl9wb3dlcl9zdGF0ZV9saXN0ZW5lcih2b2lkKQ0KK3sNCisJbWF1
c2JfcHJfaW5mbygiUmVnaXN0ZXJpbmcgcG93ZXIgc3RhdGVzIGxpc3RlbmVyIik7DQorDQorCW1o
Y2QtPnBvd2VyX3N0YXRlX2xpc3RlbmVyLm5vdGlmaWVyX2NhbGwgPSBtYXVzYl9wb3dlcl9zdGF0
ZV9jYjsNCisJcmV0dXJuIHJlZ2lzdGVyX3BtX25vdGlmaWVyKCZtaGNkLT5wb3dlcl9zdGF0ZV9s
aXN0ZW5lcik7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfdW5yZWdpc3Rlcl9wb3dlcl9zdGF0ZV9saXN0
ZW5lcih2b2lkKQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiVW4tcmVnaXN0ZXJpbmcgcG93ZXIgc3Rh
dGVzIGxpc3RlbmVyIik7DQorDQorCXVucmVnaXN0ZXJfcG1fbm90aWZpZXIoJm1oY2QtPnBvd2Vy
X3N0YXRlX2xpc3RlbmVyKTsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9wb3dlcl9zdGF0ZV9j
YihzdHJ1Y3Qgbm90aWZpZXJfYmxvY2sgKm5iLCB1bnNpZ25lZCBsb25nIGFjdGlvbiwNCisJCQkJ
dm9pZCAqZGF0YSkNCit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3MgPSAwOw0KKwlzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYgPSBOVUxMOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJQb3dlciBzdGF0ZSBj
YWxsYmFjayBhY3Rpb24gPSAlbGQiLCBhY3Rpb24pOw0KKwlpZiAoYWN0aW9uID09IFBNX1NVU1BF
TkRfUFJFUEFSRSB8fCBhY3Rpb24gPT0gUE1fSElCRVJOQVRJT05fUFJFUEFSRSkgew0KKwkJLyog
U3RvcCBoZWFydGJlYXQgdGltZXIgKi8NCisJCWRlbF90aW1lcl9zeW5jKCZtc3MuaGVhcnRiZWF0
X3RpbWVyKTsNCisJCW1hdXNiX3ByX2luZm8oIlNhdmluZyBzdGF0ZSBiZWZvcmUgc2xlZXAiKTsN
CisJCXNwaW5fbG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwkJaWYgKCFsaXN0X2Vt
cHR5KCZtc3MubWFkZXZfbGlzdCkpDQorCQkJYXRvbWljX2luYygmbXNzLm51bV9vZl90cmFuc2l0
aW9uc190b19zbGVlcCk7DQorDQorCQlsaXN0X2Zvcl9lYWNoX2VudHJ5KGRldiwgJm1zcy5tYWRl
dl9saXN0LCBsaXN0X2VudHJ5KSB7DQorCQkJbWF1c2JfcHJfaW5mbygiRW5xdWV1ZSBoZWFydGJl
YXRfd29yayBtYWRldl9hZGRyPSV4IiwNCisJCQkJICAgICAgZGV2LT5tYWRldl9hZGRyKTsNCisJ
CQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZkZXYtPmhlYXJ0YmVhdF93b3JrKTsNCisJCX0NCisN
CisJCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1zcy5sb2NrLCBmbGFncyk7DQorCX0gZWxzZSBp
ZiAoYWN0aW9uID09IFBNX1BPU1RfU1VTUEVORCB8fCBhY3Rpb24gPT0gUE1fUE9TVF9ISUJFUk5B
VElPTikgew0KKwkJbWF1c2JfcmVzZXRfaGVhcnRiZWF0X2NudCgpOw0KKwkJLyogU3RhcnQgaGVh
cmJlYXQgdGltZXIgKi8NCisJCW1vZF90aW1lcigmbXNzLmhlYXJ0YmVhdF90aW1lciwNCisJCQlq
aWZmaWVzICsgbXNlY3NfdG9famlmZmllcyhNQVVTQl9IRUFSVEJFQVRfVElNRU9VVF9NUykpOw0K
Kwl9DQorCXJldHVybiBOT1RJRllfT0s7DQorfQ0KKw0KK3N0cnVjdCBtYXVzYl9kZXZpY2UgKm1h
dXNiX2dldF9kZXZfZnJvbV9hZGRyX3Vuc2FmZSh1aW50OF90IG1hZGV2X2FkZHIpDQorew0KKwlz
dHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYgPSBOVUxMOw0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5
KGRldiwgJm1zcy5tYWRldl9saXN0LCBsaXN0X2VudHJ5KSB7DQorCQlpZiAoZGV2LT5tYWRldl9h
ZGRyID09IG1hZGV2X2FkZHIpDQorCQkJcmV0dXJuIGRldjsNCisJfQ0KKw0KKwlyZXR1cm4gTlVM
TDsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfcmVtb3ZlX21hZGV2X2Zyb21fbGlzdCh1aW50
OF90IG1hZGV2X2FkZHIpDQorew0KKwl1bnNpZ25lZCBsb25nIGZsYWdzID0gMDsNCisJc3RydWN0
IG1hdXNiX2RldmljZSAqbWFfZGV2LCAqdG1wID0gTlVMTDsNCisNCisJc3Bpbl9sb2NrX2lycXNh
dmUoJm1zcy5sb2NrLCBmbGFncyk7DQorDQorCWxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZShtYV9k
ZXYsIHRtcCwgJm1zcy5tYWRldl9saXN0LCBsaXN0X2VudHJ5KSB7DQorCQlpZiAobWFfZGV2LT5t
YWRldl9hZGRyID09IG1hZGV2X2FkZHIpIHsNCisJCQlsaXN0X2RlbCgmbWFfZGV2LT5saXN0X2Vu
dHJ5KTsNCisJCQlicmVhazsNCisJCX0NCisJfQ0KKw0KKwlpZiAobGlzdF9lbXB0eSgmbXNzLm1h
ZGV2X2xpc3QpKQ0KKwkJcmVpbml0X2NvbXBsZXRpb24oJm1zcy5yaW5nc19ldmVudHMubWF1c2Jf
cmluZ19oYXNfZXZlbnRzKTsNCisNCisJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmbXNzLmxvY2ss
IGZsYWdzKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2Jfc2lnbmFsX2VtcHR5X21zcyh2b2lk
KQ0KK3sNCisJdW5zaWduZWQgbG9uZyBmbGFncyA9IDA7DQorDQorCXNwaW5fbG9ja19pcnFzYXZl
KCZtc3MubG9jaywgZmxhZ3MpOw0KKwlpZiAobGlzdF9lbXB0eSgmbXNzLm1hZGV2X2xpc3QpKQ0K
KwkJY29tcGxldGUoJm1zcy5lbXB0eSk7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1zcy5s
b2NrLCBmbGFncyk7DQorfQ0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0
L3NyYy9ocGFsL2lzb2NoX2luLmMgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBh
bC9pc29jaF9pbi5jDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi4y
YzVlMmJkZjk4NzENCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9o
b3N0L3NyYy9ocGFsL2lzb2NoX2luLmMNCkBAIC0wLDAgKzEsMjQzIEBADQorLy8gU1BEWC1MaWNl
bnNlLUlkZW50aWZpZXI6IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIw
MjAgRGlzcGxheUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0
byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAq
IExpY2Vuc2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBv
ZiB0aGlzIGFyY2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNsdWRlICJo
cGFsL2lzb2NoX2luLmgiDQorDQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCisjaW5jbHVkZSA8
bGludXgvdWlvLmg+DQorDQorI2luY2x1ZGUgImhjZC9odWIuaCINCisjaW5jbHVkZSAiaHBhbC9k
YXRhX2NvbW1vbi5oIg0KKyNpbmNsdWRlICJocGFsL2hwYWwuaCINCisjaW5jbHVkZSAiaHBhbC9t
YXVzYl9ldmVudHMuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oIg0K
KyNpbmNsdWRlICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorDQorc3RhdGljIGlubGluZSB1MzIgX19t
YXVzYl9pc29jaF9wcmVwYXJlX3JlYWRfc2l6ZV9ibG9jaygNCisJCXN0cnVjdCBtYV91c2JfaGRy
X2lzb2NocmVhZHNpemVibG9ja19zdGQgKmlzb2NoX3JlYWRzaXplX2Jsb2NrLA0KKwkJc3RydWN0
IHVyYiAqdXJiKQ0KK3sNCisJdWludDMyX3QgaTsNCisNCisJaWYgKHVyYi0+bnVtYmVyX29mX3Bh
Y2tldHMgPT0gMCkNCisJCXJldHVybiAwOw0KKw0KKwlpc29jaF9yZWFkc2l6ZV9ibG9jay0+c2Vy
dmljZV9pbnRlcnZhbHMgID0gdXJiLT5udW1iZXJfb2ZfcGFja2V0czsNCisJaXNvY2hfcmVhZHNp
emVfYmxvY2stPm1heF9zZWdtZW50X2xlbmd0aCA9DQorCQkJCQl1cmItPmlzb19mcmFtZV9kZXNj
WzBdLmxlbmd0aDsNCisNCisJZm9yIChpID0gMDsgaSA8IHVyYi0+bnVtYmVyX29mX3BhY2tldHM7
ICsraSkgew0KKwkJdXJiLT5pc29fZnJhbWVfZGVzY1tpXS5zdGF0dXMgPSAwOw0KKwkJdXJiLT5p
c29fZnJhbWVfZGVzY1tpXS5hY3R1YWxfbGVuZ3RoID0gMDsNCisJfQ0KKw0KKwlyZXR1cm4gc2l6
ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2lzb2NocmVhZHNpemVibG9ja19zdGQpOw0KKw0KK30NCisN
CitpbnQgbWF1c2Jfc2VuZF9pc29jaF9pbl9tc2coc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LCBz
dHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJaW50IHN0YXR1cyA9IDA7DQorCXVpbnQz
Ml90IHJlYWRfc2l6ZV9ibG9ja19sZW5ndGggPSAwOw0KKwlzdHJ1Y3QgbWF1c2Jfa3ZlY19kYXRh
X3dyYXBwZXIgZGF0YV90b19zZW5kOw0KKwlzdHJ1Y3Qga3ZlYyBrdmVjW01BVVNCX0lTT0NIX0lO
X0tWRUNfTlVNXTsNCisJc3RydWN0IG1hX3VzYl9oZHJfaXNvY2h0cmFuc2Zlcl9vcHRpb25hbCBv
cHRfaXNvY2hfaGRyOw0KKwlzdHJ1Y3QgbWFfdXNiX2hkcl9pc29jaHJlYWRzaXplYmxvY2tfc3Rk
IGlzb2NoX3JlYWRzaXplX2Jsb2NrOw0KKwlzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24gKmhkciA9
DQorCQkJCShzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24gKilldmVudC0+ZGF0YS5oZHI7DQorCXN0
cnVjdCB1cmIgKnVyYiA9IChzdHJ1Y3QgdXJiICopZXZlbnQtPmRhdGEudXJiOw0KKw0KKwlkYXRh
X3RvX3NlbmQua3ZlY19udW0JPSAwOw0KKwlkYXRhX3RvX3NlbmQubGVuZ3RoCT0gMDsNCisNCisJ
LyogUHJlcGFyZSB0cmFuc2ZlciBoZWFkZXIga3ZlYyAqLw0KKwlrdmVjWzBdLmlvdl9iYXNlICAg
ICA9IGV2ZW50LT5kYXRhLmhkcjsNCisJa3ZlY1swXS5pb3ZfbGVuCSAgICAgPSBNQVVTQl9UUkFO
U0ZFUl9IRFJfU0laRTsNCisJZGF0YV90b19zZW5kLmxlbmd0aCArPSBrdmVjWzBdLmlvdl9sZW47
DQorCWRhdGFfdG9fc2VuZC5rdmVjX251bSsrOw0KKw0KKwkvKiBQcmVwYXJlIG9wdGlvbmFsIGhl
YWRlciBrdmVjICovDQorCW9wdF9pc29jaF9oZHIudGltZXN0YW1wID0gTUFfVVNCX1RSQU5TRkVS
X1JFU0VSVkVEOw0KKwlvcHRfaXNvY2hfaGRyLm10ZAk9IE1BX1VTQl9UUkFOU0ZFUl9SRVNFUlZF
RDsNCisNCisJa3ZlY1sxXS5pb3ZfYmFzZSAgICAgPSAmb3B0X2lzb2NoX2hkcjsNCisJa3ZlY1sx
XS5pb3ZfbGVuCSAgICAgPSBzaXplb2Yoc3RydWN0IG1hX3VzYl9oZHJfaXNvY2h0cmFuc2Zlcl9v
cHRpb25hbCk7DQorCWRhdGFfdG9fc2VuZC5sZW5ndGggKz0ga3ZlY1sxXS5pb3ZfbGVuOw0KKwlk
YXRhX3RvX3NlbmQua3ZlY19udW0rKzsNCisNCisJLyogUHJlcGFyZSByZWFkIHNpemUgYmxvY2tz
ICovDQorCXJlYWRfc2l6ZV9ibG9ja19sZW5ndGggPSBfX21hdXNiX2lzb2NoX3ByZXBhcmVfcmVh
ZF9zaXplX2Jsb2NrKA0KKwkJCQkJJmlzb2NoX3JlYWRzaXplX2Jsb2NrLCB1cmIpOw0KKw0KKwlp
ZiAocmVhZF9zaXplX2Jsb2NrX2xlbmd0aCA+IDApIHsNCisJCWt2ZWNbMl0uaW92X2Jhc2UgICAg
ID0gJmlzb2NoX3JlYWRzaXplX2Jsb2NrOw0KKwkJa3ZlY1syXS5pb3ZfbGVuCSAgICAgPSByZWFk
X3NpemVfYmxvY2tfbGVuZ3RoOw0KKwkJZGF0YV90b19zZW5kLmxlbmd0aCArPSBrdmVjWzJdLmlv
dl9sZW47DQorCQlkYXRhX3RvX3NlbmQua3ZlY19udW0rKzsNCisJfQ0KKw0KKwloZHItPmxlbmd0
aCA9IGRhdGFfdG9fc2VuZC5sZW5ndGg7DQorCWRhdGFfdG9fc2VuZC5rdmVjID0ga3ZlYzsNCisN
CisJc3RhdHVzID0gbWF1c2Jfc2VuZF9kYXRhKGRldiwgbWF1c2JfdHJhbnNmZXJfdHlwZV90b19j
aGFubmVsKA0KKwkJCQkJCWV2ZW50LT5kYXRhLnRyYW5zZmVyX3R5cGUpLA0KKwkJCQkJCSZkYXRh
X3RvX3NlbmQpOw0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitzdGF0aWMgdm9pZCBfX21h
dXNiX3Byb2Nlc3NfaW5faXNvY2hfc2hvcnRfcmVzcChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50
LA0KKwkJCQkJCXN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbiAqaGRyLA0KKwkJCQkJCXN0cnVjdCBt
YXVzYl91cmJfY3R4ICp1cmJfY3R4KQ0KK3sNCisJdWludDhfdCBvcHRfaGRyX3NoaWZ0ID0gKGhk
ci0+ZmxhZ3MgJiBNQV9VU0JfSERSX0ZMQUdTX1RJTUVTVEFNUCkgPw0KKwkJCSAgIHNpemVvZihz
dHJ1Y3QgbWFfdXNiX2hkcl9pc29jaHRyYW5zZmVyX29wdGlvbmFsKSA6IDA7DQorCXN0cnVjdCBt
YV91c2JfaGRyX2lzb2NoZGF0YWJsb2NrX3Nob3J0ICpkYXRhX2Jsb2NrX2hkciA9DQorCQkJKHN0
cnVjdCBtYV91c2JfaGRyX2lzb2NoZGF0YWJsb2NrX3Nob3J0ICopDQorCQkJc2hpZnRfcHRyKG1h
dXNiX2hkcl9pc29jaHRyYW5zZmVyX29wdGlvbmFsX2hkcihoZHIpLA0KKwkJCQlvcHRfaGRyX3No
aWZ0KTsNCisJdWludDhfdCAqaXNvY2hfZGF0YSA9IHNoaWZ0X3B0cihkYXRhX2Jsb2NrX2hkciwg
aGRyLT5kYXRhLmhlYWRlcnMgKg0KKwkJCQkgICBzaXplb2YoKmRhdGFfYmxvY2tfaGRyKSk7DQor
CXVpbnQ4X3QgKmVuZF9vZl9wYWNrZXQgPSBzaGlmdF9wdHIoaGRyLCBoZHItPmxlbmd0aCk7DQor
CXN0cnVjdCB1cmIgKnVyYiA9IHVyYl9jdHgtPnVyYjsNCisJaW50IGk7DQorDQorCWlmICh1bmxp
a2VseShpc29jaF9kYXRhID49IGVuZF9vZl9wYWNrZXQpKSB7DQorCQltYXVzYl9wcl9lcnIoIkJh
ZCBoZWFkZXIgZGF0YS4gRGF0YSBzdGFydCBwb2ludGVyIGFmdGVyIGVuZCBvZiBwYWNrZXQ6IGVw
X2hhbmRsZT0lI3giLA0KKwkJCSAgICAgIGV2ZW50LT5kYXRhLmVwX2hhbmRsZSk7DQorCQlyZXR1
cm47DQorCX0NCisNCisJZm9yIChpID0gMDsgaSA8IGhkci0+ZGF0YS5oZWFkZXJzOyArK2kpIHsN
CisJCXVpbnQxNl90IHNlZ19udW0gID0gZGF0YV9ibG9ja19oZHJbaV0uc2VnbWVudF9udW1iZXI7
DQorCQl1aW50MTZfdCBzZWdfc2l6ZSA9IGRhdGFfYmxvY2tfaGRyW2ldLmJsb2NrX2xlbmd0aDsN
CisNCisJCWlmICh1bmxpa2VseShzZWdfbnVtID49IHVyYi0+bnVtYmVyX29mX3BhY2tldHMpKSB7
DQorCQkJbWF1c2JfcHJfZXJyKCJUb28gbWFueSBzZWdtZW50czogZXBfaGFuZGxlPSUjeCwgc2Vn
X251bT0lZCwgdXJiLm51bWJlcl9vZl9wYWNrZXRzPSVkIiwNCisJCQkJICAgICAgZXZlbnQtPmRh
dGEuZXBfaGFuZGxlLA0KKwkJCQkgICAgICBzZWdfbnVtLCB1cmItPm51bWJlcl9vZl9wYWNrZXRz
KTsNCisJCQlicmVhazsNCisJCX0NCisNCisJCWlmICh1bmxpa2VseShzZWdfc2l6ZSA+IHVyYi0+
aXNvX2ZyYW1lX2Rlc2Nbc2VnX251bV0ubGVuZ3RoKSkgew0KKwkJCW1hdXNiX3ByX2VycigiQmxv
Y2sgdG8gbG9uZyBmb3Igc2VnbWVudDogZXBfaGFuZGxlPSUjeCIsDQorCQkJCSAgICAgIGV2ZW50
LT5kYXRhLmVwX2hhbmRsZSk7DQorCQkJYnJlYWs7DQorCQl9DQorDQorCQlpZiAodW5saWtlbHko
c2hpZnRfcHRyKGlzb2NoX2RhdGEsIHNlZ19zaXplKSA+IGVuZF9vZl9wYWNrZXQpKSB7DQorCQkJ
bWF1c2JfcHJfZXJyKCJFbmQgb2Ygc2VnbWVudCBhZnRlciBlbmYgb2YgcGFja2V0OiBlcF9oYW5k
bGU9JSN4IiwNCisJCQkJICAgICAgZXZlbnQtPmRhdGEuZXBfaGFuZGxlKTsNCisJCQlicmVhazsN
CisJCX0NCisNCisJCW1hdXNiX3Jlc2V0X2RhdGFfaXRlcmF0b3IoJnVyYl9jdHgtPml0ZXJhdG9y
KTsNCisJCW1hdXNiX2RhdGFfaXRlcmF0b3Jfc2VlaygmdXJiX2N0eC0+aXRlcmF0b3IsDQorCQkJ
CQkgdXJiLT5pc29fZnJhbWVfZGVzY1tzZWdfbnVtXS5vZmZzZXQpOw0KKwkJbWF1c2JfZGF0YV9p
dGVyYXRvcl93cml0ZSgmdXJiX2N0eC0+aXRlcmF0b3IsIGlzb2NoX2RhdGEsDQorCQkJc2VnX3Np
emUpOw0KKw0KKwkJaXNvY2hfZGF0YSA9IHNoaWZ0X3B0cihpc29jaF9kYXRhLCBzZWdfc2l6ZSk7
DQorDQorCQl1cmItPmlzb19mcmFtZV9kZXNjW3NlZ19udW1dLmFjdHVhbF9sZW5ndGggPSBzZWdf
c2l6ZTsNCisJCXVyYi0+aXNvX2ZyYW1lX2Rlc2Nbc2VnX251bV0uc3RhdHVzID0gMDsNCisJfQ0K
K30NCisNCitzdGF0aWMgdm9pZCBfX21hdXNiX3Byb2Nlc3NfaW5faXNvY2hfc3RkX3Jlc3Aoc3Ry
dWN0IG1hdXNiX2V2ZW50ICpldmVudCwNCisJCQkJCSAgICAgIHN0cnVjdCBtYV91c2JfaGRyX2Nv
bW1vbiAqaGRyLA0KKwkJCQkJICAgICAgc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHgpDQor
ew0KKwl1aW50OF90IG9wdF9oZHJfc2hpZnQgPSAoaGRyLT5mbGFncyAmIE1BX1VTQl9IRFJfRkxB
R1NfVElNRVNUQU1QKSA/DQorCQkJICAgc2l6ZW9mKHN0cnVjdCBtYV91c2JfaGRyX2lzb2NodHJh
bnNmZXJfb3B0aW9uYWwpIDogMDsNCisJc3RydWN0IG1hX3VzYl9oZHJfaXNvY2hkYXRhYmxvY2tf
c3RkICpkYXRhX2Jsb2NrX2hkciA9DQorCQkoc3RydWN0IG1hX3VzYl9oZHJfaXNvY2hkYXRhYmxv
Y2tfc3RkICopDQorCQlzaGlmdF9wdHIobWF1c2JfaGRyX2lzb2NodHJhbnNmZXJfb3B0aW9uYWxf
aGRyKGhkciksDQorCQkJICBvcHRfaGRyX3NoaWZ0KTsNCisJdWludDhfdCAqaXNvY2hfZGF0YSA9
IHNoaWZ0X3B0cihkYXRhX2Jsb2NrX2hkciwgaGRyLT5kYXRhLmhlYWRlcnMgKg0KKwkJCQlzaXpl
b2Yoc3RydWN0IG1hX3VzYl9oZHJfaXNvY2hkYXRhYmxvY2tfc2hvcnQpKTsNCisJdWludDhfdCAq
ZW5kX29mX3BhY2tldCA9IHNoaWZ0X3B0cihoZHIsIGhkci0+bGVuZ3RoKTsNCisJc3RydWN0IHVy
YiAqdXJiID0gKHN0cnVjdCB1cmIgKilldmVudC0+ZGF0YS51cmI7DQorCWludCBpOw0KKw0KKwlp
ZiAoaXNvY2hfZGF0YSA+PSBlbmRfb2ZfcGFja2V0KSB7DQorCQltYXVzYl9wcl9lcnIoIkJhZCBo
ZWFkZXIgZGF0YS4gRGF0YSBzdGFydCBwb2ludGVyIGFmdGVyIGVuZCBvZiBwYWNrZXQ6IGVwX2hh
bmRsZT0lI3giLA0KKwkJCSAgICAgIGV2ZW50LT5kYXRhLmVwX2hhbmRsZSk7DQorCQlyZXR1cm47
DQorCX0NCisNCisJZm9yIChpID0gMDsgaSA8IGhkci0+ZGF0YS5oZWFkZXJzOyArK2kpIHsNCisJ
CXVpbnQxNl90IHNlZ19udW0gICA9IGRhdGFfYmxvY2tfaGRyW2ldLnNlZ21lbnRfbnVtYmVyOw0K
KwkJdWludDE2X3Qgc2VnX2xlbiAgID0gZGF0YV9ibG9ja19oZHJbaV0uc2VnbWVudF9sZW5ndGg7
DQorCQl1aW50MTZfdCBibG9ja19sZW4gPSBkYXRhX2Jsb2NrX2hkcltpXS5ibG9ja19sZW5ndGg7
DQorDQorCQlpZiAodW5saWtlbHkoc2VnX251bSA+PSB1cmItPm51bWJlcl9vZl9wYWNrZXRzKSkg
ew0KKwkJCW1hdXNiX3ByX2VycigiVG9vIG1hbnkgc2VnbWVudHM6IGVwX2hhbmRsZT0lI3gsIHNl
Z19udW09JWQsIG51bWJlcl9vZl9wYWNrZXRzPSVkIiwNCisJCQkJICAgICAgZXZlbnQtPmRhdGEu
ZXBfaGFuZGxlLA0KKwkJCQkgICAgICBzZWdfbnVtLCB1cmItPm51bWJlcl9vZl9wYWNrZXRzKTsN
CisJCQlicmVhazsNCisJCX0NCisNCisJCWlmICh1bmxpa2VseShibG9ja19sZW4gPiB1cmItPmlz
b19mcmFtZV9kZXNjW3NlZ19udW1dLmxlbmd0aCAtDQorCQkJICAgICB1cmItPmlzb19mcmFtZV9k
ZXNjW3NlZ19udW1dLmFjdHVhbF9sZW5ndGgpKXsNCisJCQltYXVzYl9wcl9lcnIoIkJsb2NrIHRv
byBsb25nIGZvciBzZWdtZW50OiBlcF9oYW5kbGU9JSN4IiwNCisJCQkJICAgICAgZXZlbnQtPmRh
dGEuZXBfaGFuZGxlKTsNCisJCQlicmVhazsNCisJCX0NCisNCisJCWlmICh1bmxpa2VseShzaGlm
dF9wdHIoaXNvY2hfZGF0YSwgYmxvY2tfbGVuKSA+DQorCQkJCSAgICAgICBlbmRfb2ZfcGFja2V0
KSkgew0KKwkJCW1hdXNiX3ByX2VycigiRW5kIG9mIGZyYWdtZW50IGFmdGVyIGVuZCBvZiBwYWNr
ZXQ6IGVwX2hhbmRsZT0lI3giLA0KKwkJCQlldmVudC0+ZGF0YS5lcF9oYW5kbGUpOw0KKwkJCWJy
ZWFrOw0KKwkJfQ0KKw0KKwkJbWF1c2JfcmVzZXRfZGF0YV9pdGVyYXRvcigmdXJiX2N0eC0+aXRl
cmF0b3IpOw0KKwkJbWF1c2JfZGF0YV9pdGVyYXRvcl9zZWVrKCZ1cmJfY3R4LT5pdGVyYXRvciwN
CisJCQkJCSB1cmItPmlzb19mcmFtZV9kZXNjW3NlZ19udW1dLm9mZnNldCArDQorCQkJCQkgZGF0
YV9ibG9ja19oZHJbaV0uZnJhZ21lbnRfb2Zmc2V0KTsNCisJCW1hdXNiX2RhdGFfaXRlcmF0b3Jf
d3JpdGUoJnVyYl9jdHgtPml0ZXJhdG9yLA0KKwkJCQkJICBpc29jaF9kYXRhLCBibG9ja19sZW4p
Ow0KKwkJaXNvY2hfZGF0YSA9IHNoaWZ0X3B0cihpc29jaF9kYXRhLCBibG9ja19sZW4pOw0KKw0K
KwkJdXJiLT5pc29fZnJhbWVfZGVzY1tzZWdfbnVtXS5hY3R1YWxfbGVuZ3RoICs9IGJsb2NrX2xl
bjsNCisNCisJCWlmICh1cmItPmlzb19mcmFtZV9kZXNjW3NlZ19udW1dLmFjdHVhbF9sZW5ndGgg
PT0gc2VnX2xlbikNCisJCQl1cmItPmlzb19mcmFtZV9kZXNjW3NlZ19udW1dLnN0YXR1cyA9IDA7
DQorCX0NCit9DQorDQoraW50IG1hdXNiX3JlY2VpdmVfaXNvY2hfaW5fZGF0YShzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYsDQorCQkJCXN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJCXN0
cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4KQ0KK3sNCisJc3RydWN0IG1hX3VzYl9oZHJfY29t
bW9uICpjb21tb25faGRyID0NCisJCQkoc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICopZXZlbnQt
PmRhdGEucmVjdl9idWY7DQorCXN0cnVjdCBtYV91c2JfaGRyX3RyYW5zZmVyICp0cmFuc2Zlcl9o
ZHIgPQ0KKwkJCQkJbWF1c2JfZ2V0X2RhdGFfdHJhbnNmZXJfaGRyKGNvbW1vbl9oZHIpOw0KKw0K
KwlpZiAoIShjb21tb25faGRyLT5kYXRhLmlfZmxhZ3MgJiBNQV9VU0JfREFUQV9JRkxBR1NfRk1U
X01BU0spKSB7DQorCQkvKiBTaG9ydCBJU08gaGVhZGVycyByZXNwb25zZSAqLw0KKwkJX19tYXVz
Yl9wcm9jZXNzX2luX2lzb2NoX3Nob3J0X3Jlc3AoZXZlbnQsIGNvbW1vbl9oZHIsIHVyYl9jdHgp
Ow0KKwl9IGVsc2UgaWYgKChjb21tb25faGRyLT5kYXRhLmlfZmxhZ3MgJiBNQV9VU0JfREFUQV9J
RkxBR1NfRk1UX01BU0spICYNCisJCU1BX1VTQl9EQVRBX0lGTEFHU19IRFJfRk1UX1NURCkgew0K
KwkJLyogU3RhbmRhcmQgSVNPIGhlYWRlcnMgcmVzcG9uc2UgKi8NCisJCV9fbWF1c2JfcHJvY2Vz
c19pbl9pc29jaF9zdGRfcmVzcChldmVudCwgY29tbW9uX2hkciwgdXJiX2N0eCk7DQorCX0gZWxz
ZSBpZiAoKGNvbW1vbl9oZHItPmRhdGEuaV9mbGFncyAmIE1BX1VTQl9EQVRBX0lGTEFHU19GTVRf
TUFTSykgJg0KKwkJTUFfVVNCX0RBVEFfSUZMQUdTX0hEUl9GTVRfTE9ORykgew0KKwkJLyogTG9u
ZyBJU08gaGVhZGVycyByZXNwb25zZSAqLw0KKwkJbWF1c2JfcHJfd2FybigiTG9uZyBpc29jIGhl
YWRlcnMgaW4gcmVzcG9uc2U6IGVwX2hhbmRsZT0lI3gsIHJlcV9pZD0lI3giLA0KKwkJCSAgICAg
IGV2ZW50LT5kYXRhLmVwX2hhbmRsZSwgdHJhbnNmZXJfaGRyLT5yZXFfaWQpOw0KKwl9IGVsc2Ug
ew0KKwkJLyogRXJyb3IgKi8NCisJCW1hdXNiX3ByX2VycigiSXNvYyBoZWFkZXIgZXJyb3IgaW4g
cmVzcG9uc2U6IGVwX2hhbmRsZT0lI3gsIHJlcV9pZD0lI3giLA0KKwkJCSAgICAgZXZlbnQtPmRh
dGEuZXBfaGFuZGxlLCB0cmFuc2Zlcl9oZHItPnJlcV9pZCk7DQorCX0NCisNCisJcmV0dXJuIDA7
DQorfQ0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy9ocGFsL2lz
b2NoX291dC5jIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hwYWwvaXNvY2hfb3V0
LmMNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAwMDAwMDAuLjc0YTE0YWY0MzI2
YQ0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hw
YWwvaXNvY2hfb3V0LmMNCkBAIC0wLDAgKzEsMzYyIEBADQorLy8gU1BEWC1MaWNlbnNlLUlkZW50
aWZpZXI6IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxh
eUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVy
bXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2Ug
djIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFy
Y2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNsdWRlICJocGFsL2lzb2No
X291dC5oIg0KKw0KKyNpbmNsdWRlIDxsaW51eC9zbGFiLmg+DQorDQorI2luY2x1ZGUgImhjZC9o
dWIuaCINCisjaW5jbHVkZSAiaHBhbC9kYXRhX2NvbW1vbi5oIg0KKyNpbmNsdWRlICJocGFsL2hw
YWwuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5oIg0KKyNpbmNsdWRl
ICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorDQorc3RhdGljIHN0cnVjdCBtYV91c2JfaGRyX2NvbW1v
biAqX19tYXVzYl9jcmVhdGVfaXNvY2hfb3V0X3RyYW5zZmVyX3BhY2tldCgNCisJCQkJCXN0cnVj
dCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJCQlzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0
eCwNCisJCQkJCXVpbnQxNl90IHBheWxvYWRfc2l6ZSwgdWludDMyX3Qgc2VxX24sDQorCQkJCQl1
aW50MzJfdCBzdGFydF9vZl9zZWdtZW50cywNCisJCQkJCXVpbnQzMl90IG51bWJlcl9vZl9zZWdt
ZW50cykNCit7DQorCXN0cnVjdCBtYV91c2JfaGRyX2NvbW1vbgkJICpoZHI7DQorCXN0cnVjdCBt
YV91c2JfaGRyX2lzb2NodHJhbnNmZXIJCSAqaGRyX2lzb2NodHJhbnNmZXI7DQorCXN0cnVjdCBt
YV91c2JfaGRyX2lzb2NoZGF0YWJsb2NrX3N0ZAkgKmlzb2NfaGVhZGVyX3N0ZDsNCisJc3RydWN0
IG1hX3VzYl9oZHJfaXNvY2h0cmFuc2Zlcl9vcHRpb25hbCAqaGRyX29wdF9pc29jaHRyYW5zZmVy
Ow0KKwlzdHJ1Y3QgdXJiICp1cmIgPSAoc3RydWN0IHVyYiAqKSBldmVudC0+ZGF0YS51cmI7DQor
CXZvaWQgKmlzb2NfaGVhZGVycyA9IE5VTEw7DQorCXVpbnQxNl90IGxlbmd0aCA9IDA7DQorCXVp
bnQxNl90IGk7DQorCXVuc2lnbmVkIGxvbmcgYmxvY2tfbGVuZ3RoOw0KKwl1aW50MzJfdCBudW1i
ZXJfb2ZfcGFja2V0cyA9ICh1aW50MzJfdClldmVudC0+ZGF0YS5pc29jaF9zZWdfbnVtOw0KKwl1
aW50MTZfdCBzaXplX29mX3JlcXVlc3Q7DQorDQorCXNpemVfb2ZfcmVxdWVzdCA9IE1BVVNCX0lT
T0NIX1RSQU5TRkVSX0hEUl9TSVpFICsNCisJCQkgIElTT0NIX1NUQU5EQVJEX0ZPUk1BVF9TSVpF
ICogbnVtYmVyX29mX3NlZ21lbnRzOw0KKw0KKwloZHIgPSBremFsbG9jKHNpemVfb2ZfcmVxdWVz
dCwgR0ZQX0tFUk5FTCk7DQorCWlmICh1bmxpa2VseSghaGRyKSkgew0KKwkJbWF1c2JfcHJfYWxl
cnQoIkhlYWRlciBhbGxvY2F0aW9uIGZhaWxlZCIpOw0KKwkJcmV0dXJuIE5VTEw7DQorCX0NCisN
CisJaGRyLT52ZXJzaW9uCSAgPSBNQV9VU0JfSERSX1ZFUlNJT05fMV8wOw0KKwloZHItPnNzaWQJ
ICA9IGV2ZW50LT5kYXRhLm1hdXNiX3NzaWQ7DQorCWhkci0+ZmxhZ3MJICA9IE1BX1VTQl9IRFJf
RkxBR1NfSE9TVDsNCisJaGRyLT5kZXZfYWRkcgkgID0gZXZlbnQtPmRhdGEubWF1c2JfYWRkcmVz
czsNCisJaGRyLT5oYW5kbGUuZXB2CSAgPSBldmVudC0+ZGF0YS5lcF9oYW5kbGU7DQorCWhkci0+
ZGF0YS5zdGF0dXMgID0gTUFfVVNCX0hEUl9TVEFUVVNfTk9fRVJST1I7DQorCWhkci0+ZGF0YS5l
cHMJICA9IE1BVVNCX1RSQU5TRkVSX1JFU0VSVkVEOw0KKwloZHItPmRhdGEudF9mbGFncyA9IHVz
Yl9lbmRwb2ludF90eXBlKCZ1cmItPmVwLT5kZXNjKSA8PCAzOw0KKw0KKwlpc29jX2hlYWRlcnMg
PSBzaGlmdF9wdHIoaGRyLCBNQVVTQl9JU09DSF9UUkFOU0ZFUl9IRFJfU0laRSk7DQorDQorCWZv
ciAoaSA9ICh1aW50MTZfdClzdGFydF9vZl9zZWdtZW50czsNCisJICAgICBpIDwgbnVtYmVyX29m
X3NlZ21lbnRzICsgc3RhcnRfb2Zfc2VnbWVudHM7ICsraSkgew0KKwkJYmxvY2tfbGVuZ3RoID0g
aSA8IG51bWJlcl9vZl9wYWNrZXRzIC0gMSA/DQorCQkJdXJiLT5pc29fZnJhbWVfZGVzY1tpICsg
MV0ub2Zmc2V0IC0NCisJCQl1cmItPmlzb19mcmFtZV9kZXNjW2ldLm9mZnNldCA6DQorCQkJbWF1
c2JfZGF0YV9pdGVyYXRvcl9sZW5ndGgoJnVyYl9jdHgtPml0ZXJhdG9yKSAtDQorCQkJdXJiLT5p
c29fZnJhbWVfZGVzY1tpXS5vZmZzZXQ7DQorDQorCQl1cmItPmlzb19mcmFtZV9kZXNjW2ldLnN0
YXR1cyA9IE1BX1VTQl9IRFJfU1RBVFVTX1VOU1VDQ0VTU0ZVTDsNCisJCWlzb2NfaGVhZGVyX3N0
ZCA9IChzdHJ1Y3QgbWFfdXNiX2hkcl9pc29jaGRhdGFibG9ja19zdGQgKikNCisJCQkJICAgc2hp
ZnRfcHRyKGlzb2NfaGVhZGVycywNCisJCQkJCSh1aW50NjRfdClJU09DSF9TVEFOREFSRF9GT1JN
QVRfU0laRSAqDQorCQkJCQkoaSAtIHN0YXJ0X29mX3NlZ21lbnRzKSk7DQorCQlpc29jX2hlYWRl
cl9zdGQtPmJsb2NrX2xlbmd0aAkgPSAodWludDE2X3QpYmxvY2tfbGVuZ3RoOw0KKwkJaXNvY19o
ZWFkZXJfc3RkLT5zZWdtZW50X251bWJlciAgPSBpOw0KKwkJaXNvY19oZWFkZXJfc3RkLT5zX2Zs
YWdzCSA9IDA7DQorCQlpc29jX2hlYWRlcl9zdGQtPnNlZ21lbnRfbGVuZ3RoICA9ICh1aW50MTZf
dClibG9ja19sZW5ndGg7DQorCQlpc29jX2hlYWRlcl9zdGQtPmZyYWdtZW50X29mZnNldCA9IDA7
DQorCX0NCisNCisJbGVuZ3RoID0gKElTT0NIX1NUQU5EQVJEX0ZPUk1BVF9TSVpFICogbnVtYmVy
X29mX3NlZ21lbnRzKQ0KKwkJICsgTUFVU0JfSVNPQ0hfVFJBTlNGRVJfSERSX1NJWkU7DQorDQor
CWhkci0+ZmxhZ3MJCSAgIHw9IE1BX1VTQl9IRFJfRkxBR1NfVElNRVNUQU1QOw0KKwloZHItPnR5
cGUJCSAgICA9IE1BX1VTQl9IRFJfVFlQRV9EQVRBX1JFUShJU09DSFRSQU5TRkVSKTsNCisJaGRy
LT5kYXRhLmhlYWRlcnMJICAgID0gKHVpbnQxNl90KW51bWJlcl9vZl9zZWdtZW50czsNCisJaGRy
LT5kYXRhLmlfZmxhZ3MJICAgID0gTUFfVVNCX0RBVEFfSUZMQUdTX0hEUl9GTVRfU1REIHwNCisJ
CQkJICAgICAgTUFfVVNCX0RBVEFfSUZMQUdTX0FTQVA7DQorCWhkcl9pc29jaHRyYW5zZmVyCSAg
ICA9IG1hdXNiX2dldF9pc29jaHRyYW5zZmVyX2hkcihoZHIpOw0KKwloZHJfb3B0X2lzb2NodHJh
bnNmZXIJICAgID0gbWF1c2JfaGRyX2lzb2NodHJhbnNmZXJfb3B0aW9uYWxfaGRyKGhkcik7DQor
CWhkcl9pc29jaHRyYW5zZmVyLT5yZXFfaWQgICA9IGV2ZW50LT5kYXRhLnJlcV9pZDsNCisJaGRy
X2lzb2NodHJhbnNmZXItPnNlcV9uICAgID0gc2VxX247DQorCWhkcl9pc29jaHRyYW5zZmVyLT5z
ZWdtZW50cyA9IG51bWJlcl9vZl9wYWNrZXRzOw0KKw0KKwloZHJfaXNvY2h0cmFuc2Zlci0+cHJl
c2VudGF0aW9uX3RpbWUgPSBNQV9VU0JfVFJBTlNGRVJfUkVTRVJWRUQ7DQorDQorCWhkcl9vcHRf
aXNvY2h0cmFuc2Zlci0+dGltZXN0YW1wID0gTUFfVVNCX1RSQU5TRkVSX1JFU0VSVkVEOw0KKwlo
ZHJfb3B0X2lzb2NodHJhbnNmZXItPm10ZAkgPSBNQV9VU0JfVFJBTlNGRVJfUkVTRVJWRUQ7DQor
DQorCWhkci0+bGVuZ3RoID0gbGVuZ3RoICsgcGF5bG9hZF9zaXplOw0KKw0KKwlyZXR1cm4gaGRy
Ow0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2FkZF9kYXRhX2NodW5rKHZvaWQgKmJ1ZmZlciwg
dWludDMyX3QgYnVmZmVyX3NpemUsDQorCQkJCXN0cnVjdCBsaXN0X2hlYWQgKmNodW5rc19saXN0
KQ0KK3sNCisJc3RydWN0IG1hdXNiX3BheWxvYWRfY2h1bmsgKmRhdGFfY2h1bmsgPSBOVUxMOw0K
Kw0KKwlkYXRhX2NodW5rID0ga3phbGxvYyhzaXplb2YoKmRhdGFfY2h1bmspLCBHRlBfS0VSTkVM
KTsNCisJaWYgKHVubGlrZWx5KCFkYXRhX2NodW5rKSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIkRh
dGEgY2h1bmsgYWxsb2NhdGlvbiBmYWlsZWQiKTsNCisJCXJldHVybiAtRU5PTUVNOw0KKwl9DQor
DQorCS8qIEluaXRpYWxpemUgZGF0YSBjaHVuayBmb3IgTUFVU0IgaGVhZGVyIGFuZCBhZGQgaXQg
dG8gY2h1bmtzIGxpc3QgKi8NCisJSU5JVF9MSVNUX0hFQUQoJmRhdGFfY2h1bmstPmxpc3RfZW50
cnkpOw0KKwlkYXRhX2NodW5rLT5rdmVjLmlvdl9iYXNlID0gYnVmZmVyOw0KKwlkYXRhX2NodW5r
LT5rdmVjLmlvdl9sZW4gID0gYnVmZmVyX3NpemU7DQorCWxpc3RfYWRkX3RhaWwoJmRhdGFfY2h1
bmstPmxpc3RfZW50cnksIGNodW5rc19saXN0KTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRp
YyBpbnQgbWF1c2JfaW5pdF9oZWFkZXJfZGF0YV9jaHVuayhzdHJ1Y3QgbWFfdXNiX2hkcl9jb21t
b24gKmNvbW1vbl9oZHIsDQorCQkJCQlzdHJ1Y3QgbGlzdF9oZWFkICpjaHVua3NfbGlzdCwNCisJ
CQkJCXVpbnQzMl90ICpudW1fb2ZfZGF0YV9jaHVua3MsDQorCQkJCQl1aW50MzJfdCBudW1fb2Zf
cGFja2V0cykNCit7DQorCXVpbnQzMl90IGhlYWRlcl9zaXplID0gTUFVU0JfSVNPQ0hfVFJBTlNG
RVJfSERSX1NJWkUgKw0KKwkJCSAgICAgICBJU09DSF9TVEFOREFSRF9GT1JNQVRfU0laRSAqIG51
bV9vZl9wYWNrZXRzOw0KKwlpbnQgc3RhdHVzOw0KKw0KKwlzdGF0dXMgPSBtYXVzYl9hZGRfZGF0
YV9jaHVuayhjb21tb25faGRyLCBoZWFkZXJfc2l6ZSwgY2h1bmtzX2xpc3QpOw0KKw0KKwkvKiBT
dWNjZXNzICovDQorCWlmICghc3RhdHVzKQ0KKwkJKysoKm51bV9vZl9kYXRhX2NodW5rcyk7DQor
DQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1c2JfaW5pdF9kYXRhX3dy
YXBwZXIoc3RydWN0IG1hdXNiX2t2ZWNfZGF0YV93cmFwcGVyICpkYXRhLA0KKwkJCQkgICBzdHJ1
Y3QgbGlzdF9oZWFkICpjaHVua3NfbGlzdCwNCisJCQkJICAgdWludDMyX3QgbnVtX29mX2RhdGFf
Y2h1bmtzKQ0KK3sNCisJc3RydWN0IG1hdXNiX3BheWxvYWRfY2h1bmsgKmRhdGFfY2h1bmsgPSBO
VUxMLCAqdG1wID0gTlVMTDsNCisJdWludDMyX3QgY3VycmVudF9rdmVjID0gMDsNCisNCisJZGF0
YS0+bGVuZ3RoID0gMDsNCisJZGF0YS0+a3ZlYyA9IGtjYWxsb2MobnVtX29mX2RhdGFfY2h1bmtz
LCBzaXplb2Yoc3RydWN0IGt2ZWMpLA0KKwkJCSAgICAgR0ZQX0tFUk5FTCk7DQorCWlmICghZGF0
YS0+a3ZlYykNCisJCXJldHVybiAtRU5PTUVNOw0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5X3Nh
ZmUoZGF0YV9jaHVuaywgdG1wLCBjaHVua3NfbGlzdCwgbGlzdF9lbnRyeSkgew0KKwkJZGF0YS0+
a3ZlY1tjdXJyZW50X2t2ZWNdLmlvdl9iYXNlID0NCisJCQlkYXRhX2NodW5rLT5rdmVjLmlvdl9i
YXNlOw0KKwkJZGF0YS0+a3ZlY1tjdXJyZW50X2t2ZWNdLmlvdl9sZW4gPQ0KKwkJICAgIGRhdGFf
Y2h1bmstPmt2ZWMuaW92X2xlbjsNCisJCSsrZGF0YS0+a3ZlY19udW07DQorCQlkYXRhLT5sZW5n
dGggKz0gZGF0YV9jaHVuay0+a3ZlYy5pb3ZfbGVuOw0KKwkJKytjdXJyZW50X2t2ZWM7DQorCX0N
CisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2NsZWFudXBfY2h1bmtzX2xp
c3Qoc3RydWN0IGxpc3RfaGVhZCAqY2h1bmtzX2xpc3QpDQorew0KKwlzdHJ1Y3QgbWF1c2JfcGF5
bG9hZF9jaHVuayAqZGF0YV9jaHVuayA9IE5VTEwsICp0bXAgPSBOVUxMOw0KKw0KKwlsaXN0X2Zv
cl9lYWNoX2VudHJ5X3NhZmUoZGF0YV9jaHVuaywgdG1wLCBjaHVua3NfbGlzdCwgbGlzdF9lbnRy
eSkgew0KKwkJbGlzdF9kZWwoJmRhdGFfY2h1bmstPmxpc3RfZW50cnkpOw0KKwkJa2ZyZWUoZGF0
YV9jaHVuayk7DQorCX0NCit9DQorDQorc3RhdGljIGludCBtYXVzYl9wcmVwYXJlX2lzb2NoX291
dF90cmFuc2Zlcl9wYWNrZXQoDQorCQkJc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICpoZHIsDQor
CQkJc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCwNCisJCQlzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAq
dXJiX2N0eCwNCisJCQlzdHJ1Y3QgbWF1c2Jfa3ZlY19kYXRhX3dyYXBwZXIgKnJlc3VsdF9kYXRh
X3dyYXBwZXIpDQorew0KKwl1aW50MzJfdCBudW1fb2ZfZGF0YV9jaHVua3MJICAgID0gMDsNCisJ
dWludDMyX3QgbnVtX29mX3BheWxvYWRfZGF0YV9jaHVua3MgPSAwOw0KKwl1aW50MzJfdCBwYXls
b2FkX2RhdGFfc2l6ZQkgICAgPSAwOw0KKwl1aW50MzJfdCBzaXplX29mX2hlYWRlcgkJICAgID0g
TUFVU0JfSVNPQ0hfVFJBTlNGRVJfSERSX1NJWkUgKw0KKwkJCQkJICAgICAgSVNPQ0hfU1RBTkRB
UkRfRk9STUFUX1NJWkUgKg0KKwkJCQkJICAgICAgZXZlbnQtPmRhdGEuaXNvY2hfc2VnX251bTsN
CisJc3RydWN0IGxpc3RfaGVhZCBjaHVua3NfbGlzdDsNCisJc3RydWN0IGxpc3RfaGVhZCBwYXls
b2FkX2RhdGFfY2h1bmtzOw0KKwlpbnQgc3RhdHVzID0gMDsNCisNCisJSU5JVF9MSVNUX0hFQUQo
JmNodW5rc19saXN0KTsNCisNCisJLyogSW5pdGlhbGl6ZSBkYXRhIGNodW5rIGZvciBNQVVTQiBo
ZWFkZXIgYW5kIGFkZCBpdCB0byBjaHVua3MgbGlzdCAqLw0KKwlpZiAobWF1c2JfaW5pdF9oZWFk
ZXJfZGF0YV9jaHVuayhoZHIsICZjaHVua3NfbGlzdCwgJm51bV9vZl9kYXRhX2NodW5rcywNCisJ
CQkJCSBldmVudC0+ZGF0YS5pc29jaF9zZWdfbnVtKSA8IDApew0KKwkJc3RhdHVzID0gLUVOT01F
TTsNCisJCQlnb3RvIGxfY2xlYW51cF9kYXRhX2NodW5rczsNCisJfQ0KKw0KKwkvKiBHZXQgZGF0
YSBjaHVua3MgZm9yIGRhdGEgcGF5bG9hZCB0byBzZW5kICovDQorCUlOSVRfTElTVF9IRUFEKCZw
YXlsb2FkX2RhdGFfY2h1bmtzKTsNCisJcGF5bG9hZF9kYXRhX3NpemUgPSBoZHItPmxlbmd0aCAt
IHNpemVfb2ZfaGVhZGVyOw0KKw0KKwlpZiAobWF1c2JfZGF0YV9pdGVyYXRvcl9yZWFkKCZ1cmJf
Y3R4LT5pdGVyYXRvciwgcGF5bG9hZF9kYXRhX3NpemUsDQorCQkJCSAgICAgJnBheWxvYWRfZGF0
YV9jaHVua3MsDQorCQkJCSAgICAgJm51bV9vZl9wYXlsb2FkX2RhdGFfY2h1bmtzKSA8IDApew0K
KwkJbWF1c2JfcHJfZXJyKCJEYXRhIGl0ZXJhdG9yIHJlYWQgZmFpbGVkIik7DQorCQlzdGF0dXMg
PSAtRU5PTUVNOw0KKwkJZ290byBsX2NsZWFudXBfZGF0YV9jaHVua3M7DQorCX0NCisNCisJbGlz
dF9zcGxpY2VfdGFpbCgmcGF5bG9hZF9kYXRhX2NodW5rcywgJmNodW5rc19saXN0KTsNCisJbnVt
X29mX2RhdGFfY2h1bmtzICs9IG51bV9vZl9wYXlsb2FkX2RhdGFfY2h1bmtzOw0KKw0KKwkvKiBN
YXAgYWxsIGRhdGEgY2h1bmtzIHRvIGRhdGEgd3JhcHBlciAqLw0KKwlpZiAobWF1c2JfaW5pdF9k
YXRhX3dyYXBwZXIocmVzdWx0X2RhdGFfd3JhcHBlciwgJmNodW5rc19saXN0LA0KKwkJCQkgICAg
bnVtX29mX2RhdGFfY2h1bmtzKSA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiRGF0YSB3cmFwcGVy
IGluaXQgZmFpbGVkIik7DQorCQlzdGF0dXMgPSAtRU5PTUVNOw0KKwkJZ290byBsX2NsZWFudXBf
ZGF0YV9jaHVua3M7DQorCX0NCisNCitsX2NsZWFudXBfZGF0YV9jaHVua3M6DQorCW1hdXNiX2Ns
ZWFudXBfY2h1bmtzX2xpc3QoJmNodW5rc19saXN0KTsNCisJcmV0dXJuIHN0YXR1czsNCit9DQor
DQorc3RhdGljIGludCBtYXVzYl9jcmVhdGVfYW5kX3NlbmRfaXNvY2hfdHJhbnNmZXJfcmVxKHN0
cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQlzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50LA0K
KwkJCXN0cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4LCB1aW50MzJfdCAqc2VxX24sDQorCQkJ
dWludDMyX3QgcGF5bG9hZF9zaXplLCB1aW50MzJfdCBzdGFydF9vZl9zZWdtZW50cywNCisJCQl1
aW50MzJfdCBudW1iZXJfb2Zfc2VnbWVudHMpDQorew0KKwlzdHJ1Y3QgbWFfdXNiX2hkcl9jb21t
b24gKmhkcjsNCisJc3RydWN0IG1hdXNiX2t2ZWNfZGF0YV93cmFwcGVyIGRhdGFfdG9fc2VuZDsN
CisJaW50IHN0YXR1czsNCisNCisJaGRyID0gX19tYXVzYl9jcmVhdGVfaXNvY2hfb3V0X3RyYW5z
ZmVyX3BhY2tldChldmVudCwgdXJiX2N0eCwNCisJCQkJCQkgICAgICAgcGF5bG9hZF9zaXplLCAq
c2VxX24sDQorCQkJCQkJICAgICAgIHN0YXJ0X29mX3NlZ21lbnRzLA0KKwkJCQkJCSAgICAgICBu
dW1iZXJfb2Zfc2VnbWVudHMpOw0KKwlpZiAoIWhkcikgew0KKwkJbWF1c2JfcHJfYWxlcnQoIklz
b2NoIHRyYW5zZmVyIHBhY2tldCBhbGxvYyBmYWlsZWQiKTsNCisJCXJldHVybiAtRU5PTUVNOw0K
Kwl9DQorCSpzZXFfbiA9ICgqc2VxX24gKyAxKSAlIChNQV9VU0JfVFJBTlNGRVJfU0VRTl9NQVgg
KyAxKTsNCisNCisJc3RhdHVzID0gbWF1c2JfcHJlcGFyZV9pc29jaF9vdXRfdHJhbnNmZXJfcGFj
a2V0KGhkciwgZXZlbnQsIHVyYl9jdHgsDQorCQkJCQkJCSAmZGF0YV90b19zZW5kKTsNCisJaWYg
KHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2FsZXJ0KCJGYWlsZWQgdG8gcHJlcGFyZSB0cmFu
c2ZlciBwYWNrZXQiKTsNCisJCWtmcmVlKGhkcik7DQorCQlyZXR1cm4gc3RhdHVzOw0KKwl9DQor
DQorCXN0YXR1cyA9IG1hdXNiX3NlbmRfZGF0YShkZXYsIG1hdXNiX3RyYW5zZmVyX3R5cGVfdG9f
Y2hhbm5lbCgNCisJCQkJCQlldmVudC0+ZGF0YS50cmFuc2Zlcl90eXBlKSwNCisJCQkJJmRhdGFf
dG9fc2VuZCk7DQorDQorCWtmcmVlKGhkcik7DQorCWtmcmVlKGRhdGFfdG9fc2VuZC5rdmVjKTsN
CisNCisJcmV0dXJuIHN0YXR1czsNCit9DQorDQorc3RhdGljIGlubGluZSBpbnQgX19tYXVzYl9z
ZW5kX2lzb2NoX291dF9wYWNrZXQoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCXN0cnVj
dCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJc3RydWN0IG1hdXNiX3VyYl9jdHggKnVyYl9jdHgs
IHVpbnQzMl90ICpzZXFfbiwNCisJCQl1aW50MzJfdCAqc3RhcnRpbmdfc2VnbWVudHMsIHVpbnQz
Ml90ICpyZW1fdHJhbnNmZXJfYnVmLA0KKwkJCXVpbnQzMl90ICpwYXlsb2FkX3NpemUsIGludCBp
bmRleCkNCit7DQorCWludCBzdGF0dXMgPSBtYXVzYl9jcmVhdGVfYW5kX3NlbmRfaXNvY2hfdHJh
bnNmZXJfcmVxKGRldiwgZXZlbnQsDQorCQkJCQl1cmJfY3R4LCBzZXFfbiwgKnBheWxvYWRfc2l6
ZSwNCisJCQkJCSpzdGFydGluZ19zZWdtZW50cywNCisJCQkJCWluZGV4IC0gKnN0YXJ0aW5nX3Nl
Z21lbnRzKTsNCisNCisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiSVNPQ0gg
dHJhbnNmZXIgcmVxdWVzdCBjcmVhdGUgYW5kIHNlbmQgZmFpbGVkIik7DQorCQlyZXR1cm4gc3Rh
dHVzOw0KKwl9DQorCSpzdGFydGluZ19zZWdtZW50cyA9IGluZGV4Ow0KKwkqcmVtX3RyYW5zZmVy
X2J1ZiAgPSBNQVhfSVNPQ0hfQVNBUF9QQUNLRVRfU0laRTsNCisJKnBheWxvYWRfc2l6ZQkgICA9
IDA7DQorDQorCXJldHVybiAwOw0KK30NCisNCitpbnQgbWF1c2Jfc2VuZF9pc29jaF9vdXRfbXNn
KHN0cnVjdCBtYXVzYl9kZXZpY2UgKm1hX2RldiwNCisJCQkgICAgIHN0cnVjdCBtYXVzYl9ldmVu
dCAqbWF1c2JfZXZlbnQsDQorCQkJICAgICBzdHJ1Y3QgbWF1c2JfdXJiX2N0eCAqdXJiX2N0eCkN
Cit7DQorCXVpbnQzMl90ICAgc3RhcnRpbmdfc2VnbWVudHMgPSAwOw0KKwl1aW50MzJfdCAgIHJl
bV90cmFuc2Zlcl9idWYgID0gTUFYX0lTT0NIX0FTQVBfUEFDS0VUX1NJWkU7DQorCXN0cnVjdCB1
cmIgKnVyYiA9IChzdHJ1Y3QgdXJiICopbWF1c2JfZXZlbnQtPmRhdGEudXJiOw0KKwl1aW50MzJf
dCBudW1iZXJfb2ZfcGFja2V0cyA9IHVyYi0+bnVtYmVyX29mX3BhY2tldHM7DQorCXVpbnQzMl90
IHBheWxvYWRfc2l6ZQkgICA9IDA7DQorCXVpbnQzMl90IGNodW5rX3NpemUJICAgPSAwOw0KKwl1
aW50MzJfdCBzZXFfbgkJICAgPSAwOw0KKwlpbnQgc3RhdHVzID0gMDsNCisJaW50IGkJICAgPSAw
Ow0KKw0KKwlmb3IgKGkgPSAwOyBpIDwgbnVtYmVyX29mX3BhY2tldHM7ICsraSkgew0KKwkJaWYg
KGkgPCBudW1iZXJfb2ZfcGFja2V0cyAtIDEpDQorCQkJY2h1bmtfc2l6ZSA9IHVyYi0+aXNvX2Zy
YW1lX2Rlc2NbaSArIDFdLm9mZnNldCAtDQorCQkJCQl1cmItPmlzb19mcmFtZV9kZXNjW2ldLm9m
ZnNldDsNCisJCWVsc2UNCisJCQljaHVua19zaXplID0NCisJCQkJbWF1c2JfZGF0YV9pdGVyYXRv
cl9sZW5ndGgoJnVyYl9jdHgtPml0ZXJhdG9yKSAtDQorCQkJCQkJdXJiLT5pc29fZnJhbWVfZGVz
Y1tpXS5vZmZzZXQ7DQorDQorCQlpZiAoY2h1bmtfc2l6ZSArIElTT0NIX1NUQU5EQVJEX0ZPUk1B
VF9TSVpFID4NCisJCQkJCQkJcmVtX3RyYW5zZmVyX2J1Zikgew0KKwkJCWlmIChwYXlsb2FkX3Np
emUgPT0gMCkgew0KKwkJCQltYXVzYl9wcl93YXJuKCJGcmFnbWVudGF0aW9uIik7DQorCQkJfSBl
bHNlIHsNCisJCQkJc3RhdHVzID0gX19tYXVzYl9zZW5kX2lzb2NoX291dF9wYWNrZXQobWFfZGV2
LA0KKwkJCQkJCW1hdXNiX2V2ZW50LCB1cmJfY3R4LCAmc2VxX24sDQorCQkJCQkJJnN0YXJ0aW5n
X3NlZ21lbnRzLA0KKwkJCQkJCSZyZW1fdHJhbnNmZXJfYnVmLA0KKwkJCQkJCSZwYXlsb2FkX3Np
emUsIGkpOw0KKwkJCQlpZiAoc3RhdHVzIDwgMCkNCisJCQkJCXJldHVybiBzdGF0dXM7DQorCQkJ
CWktLTsNCisJCQkJY29udGludWU7DQorCQkJfQ0KKwkJfSBlbHNlIHsNCisJCQlyZW1fdHJhbnNm
ZXJfYnVmIC09IGNodW5rX3NpemUgKw0KKwkJCQkJICAgICBJU09DSF9TVEFOREFSRF9GT1JNQVRf
U0laRTsNCisJCQlwYXlsb2FkX3NpemUgKz0gY2h1bmtfc2l6ZTsNCisJCX0NCisNCisJCWlmIChp
ID09IG51bWJlcl9vZl9wYWNrZXRzIC0gMSB8fCByZW1fdHJhbnNmZXJfYnVmID09IDApIHsNCisN
CisJCQlzdGF0dXMgPSBfX21hdXNiX3NlbmRfaXNvY2hfb3V0X3BhY2tldChtYV9kZXYsDQorCQkJ
CQltYXVzYl9ldmVudCwgdXJiX2N0eCwgJnNlcV9uLA0KKwkJCQkJJnN0YXJ0aW5nX3NlZ21lbnRz
LA0KKwkJCQkJJnJlbV90cmFuc2Zlcl9idWYsICZwYXlsb2FkX3NpemUsDQorCQkJCQlpICsgMSk7
DQorCQkJaWYgKHN0YXR1cyA8IDApDQorCQkJCXJldHVybiBzdGF0dXM7DQorCQl9DQorCX0NCisJ
cmV0dXJuIDA7DQorfQ0KKw0KK2ludCBtYXVzYl9yZWNlaXZlX2lzb2NoX291dChzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYsIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJICAgIHN0cnVj
dCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4KQ0KK3sNCisJc3RydWN0IHVyYiAqdXJiID0gKHN0cnVj
dCB1cmIgKilldmVudC0+ZGF0YS51cmI7DQorCWludCBzdGF0dXMgPSAwOw0KKwl1aW50MTZfdCBp
Ow0KKw0KKwltYXVzYl9wcl9kZWJ1ZygidHJhbnNmZXJfc2l6ZT0lZCwgcmVtX3RyYW5zZmVyX3Np
emU9JWQsIHN0YXR1cz0lZCIsDQorCQkgICAgICAgZXZlbnQtPmRhdGEudHJhbnNmZXJfc2l6ZSwg
ZXZlbnQtPmRhdGEucmVtX3RyYW5zZmVyX3NpemUsDQorCQkgICAgICAgZXZlbnQtPnN0YXR1cyk7
DQorDQorCWZvciAoaSA9IDA7IGkgPCB1cmItPm51bWJlcl9vZl9wYWNrZXRzOyArK2kpDQorCQl1
cmItPmlzb19mcmFtZV9kZXNjW2ldLnN0YXR1cyA9IGV2ZW50LT5zdGF0dXM7DQorDQorCW1hdXNi
X2NvbXBsZXRlX3JlcXVlc3QodXJiLCBldmVudC0+ZGF0YS5wYXlsb2FkX3NpemUsIGV2ZW50LT5z
dGF0dXMpOw0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0
YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9tYXVzYl9ldmVudHMuYyBiL2RyaXZlcnMvc3RhZ2lu
Zy9tYXVzYl9ob3N0L3NyYy9ocGFsL21hdXNiX2V2ZW50cy5jDQpuZXcgZmlsZSBtb2RlIDEwMDY0
NA0KaW5kZXggMDAwMDAwMDAwMDAwLi45YjUzMGQ4NTAzMjENCi0tLSAvZGV2L251bGwNCisrKyBi
L2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy9ocGFsL21hdXNiX2V2ZW50cy5jDQpAQCAt
MCwwICsxLDY2MSBAQA0KKy8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wDQorLyoN
CisgKiBDb3B5cmlnaHQgKGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0KKyAq
DQorICogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9m
IHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUgQ09Q
WUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1vcmUg
ZGV0YWlscy4NCisgKi8NCisjaW5jbHVkZSA8aHBhbC9tYXVzYl9ldmVudHMuaD4NCisNCisjaW5j
bHVkZSA8bGludXgvc2xhYi5oPg0KKw0KKyNpbmNsdWRlICJoY2QvaHViLmgiDQorI2luY2x1ZGUg
ImhwYWwvZGF0YV9jb21tb24uaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9ncy5oIg0KKyNp
bmNsdWRlICJ1dGlscy9tYXVzYl9kYXRhX2l0ZXJhdG9yLmgiDQorDQordm9pZCBtYXVzYl9kZXZf
cmVzZXRfcmVxX2V2ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQorew0KKwlldmVudC0+
dHlwZSA9IE1BVVNCX0VWRU5UX1RZUEVfREVWX1JFU0VUOw0KK30NCisNCitzdGF0aWMgaW50IG1h
dXNiX21nbXRfbXNnX3JlY2VpdmVkX2V2ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQor
CQkJCQkgc3RydWN0IG1hX3VzYl9oZHJfY29tbW9uICpoZHIsDQorCQkJCQkgZW51bSBtYXVzYl9j
aGFubmVsIGNoYW5uZWwpDQorew0KKwlpbnQgc3RhdHVzID0gMDsNCisNCisJbWF1c2JfcHJfaW5m
bygiY2hhbm5lbD0lZCwgdHlwZT0lZCIsIGNoYW5uZWwsIGhkci0+dHlwZSk7DQorCWlmIChoZHIt
Pmxlbmd0aCA8PSBNQVVTQl9NQVhfTUdNVF9TSVpFKSB7DQorCQlldmVudC0+dHlwZSA9IE1BVVNC
X0VWRU5UX1RZUEVfUkVDRUlWRURfTUdNVF9NU0c7DQorCQltZW1jcHkoZXZlbnQtPm1nbXQubWdt
dF9oZHIuaGRyLCBoZHIsIGhkci0+bGVuZ3RoKTsNCisJfSBlbHNlIHsNCisJCW1hdXNiX3ByX2Vy
cigiTUdNVCBtZXNzYWdlIHRvIGxvbmcsIGZhaWxlZCB0byBjb3B5Iik7DQorCQlzdGF0dXMgPSAt
RUlOVkFMOw0KKwl9DQorDQorCWtmcmVlKGhkcik7DQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0K
K3N0YXRpYyBpbnQgbWF1c2JfZGF0YV9tc2dfcmVjZWl2ZWRfZXZlbnQoc3RydWN0IG1hdXNiX2V2
ZW50ICpldmVudCwNCisJCQkJCSBzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24gKmhkciwNCisJCQkJ
CSBlbnVtIG1hdXNiX2NoYW5uZWwgY2hhbm5lbCkNCit7DQorCWV2ZW50LT50eXBlCQkgID0gTUFV
U0JfRVZFTlRfVFlQRV9SRUNFSVZFRF9EQVRBX01TRzsNCisJZXZlbnQtPmRhdGEudHJhbnNmZXJf
dHlwZSA9IG1hdXNiX3RyYW5zZmVyX3R5cGVfZnJvbV9oZHIoaGRyKTsNCisJZXZlbnQtPmRhdGEu
ZGV2aWNlX2lkCSAgPSAoKGhkci0+c3NpZCA8PCA4KSB8IGhkci0+ZGV2X2FkZHIpOw0KKwlldmVu
dC0+ZGF0YS5lcF9oYW5kbGUJICA9IGhkci0+aGFuZGxlLmVwdjsNCisJZXZlbnQtPmRhdGEucmVj
dl9idWYJICA9ICh1aW50NjRfdCkgaGRyOw0KKw0KKwltZW1jcHkoZXZlbnQtPmRhdGEuaGRyLCBo
ZHIsIE1BVVNCX1RSQU5TRkVSX0hEUl9TSVpFKTsNCisNCisJaWYgKG1hdXNiX2N0cmxfdHJhbnNm
ZXIoaGRyKSAmJg0KKwkJaGRyLT5sZW5ndGggPD0gMipNQVVTQl9UUkFOU0ZFUl9IRFJfU0laRSkg
ew0KKwkJbWVtY3B5KGV2ZW50LT5kYXRhLmhkcl9hY2ssDQorCQkJc2hpZnRfcHRyKGhkciwgTUFV
U0JfVFJBTlNGRVJfSERSX1NJWkUpLA0KKwkJCQkgIGhkci0+bGVuZ3RoIC0gTUFVU0JfVFJBTlNG
RVJfSERSX1NJWkUpOw0KKwl9DQorDQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1h
dXNiX2lzb2NoX21zZ19yZWNlaXZlZF9ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50LA0K
KwkJCQkJICBzdHJ1Y3QgbWFfdXNiX2hkcl9jb21tb24gKmhkciwNCisJCQkJCSAgZW51bSBtYXVz
Yl9jaGFubmVsIGNoYW5uZWwpDQorew0KKwlldmVudC0+dHlwZQkJICA9IE1BVVNCX0VWRU5UX1RZ
UEVfUkVDRUlWRURfREFUQV9NU0c7DQorCWV2ZW50LT5kYXRhLnRyYW5zZmVyX3R5cGUgPSBtYXVz
Yl90cmFuc2Zlcl90eXBlX2Zyb21faGRyKGhkcik7DQorCWV2ZW50LT5kYXRhLmRldmljZV9pZAkg
ID0gKChoZHItPnNzaWQgPDwgOCkgfCBoZHItPmRldl9hZGRyKTsNCisJZXZlbnQtPmRhdGEuZXBf
aGFuZGxlCSAgPSBoZHItPmhhbmRsZS5lcHY7DQorCWV2ZW50LT5kYXRhLnJlY3ZfYnVmCSAgPSAo
dWludDY0X3QpIGhkcjsNCisNCisJbWVtY3B5KGV2ZW50LT5kYXRhLmhkciwgaGRyLCBNQVVTQl9U
UkFOU0ZFUl9IRFJfU0laRSk7DQorDQorCXJldHVybiAwOw0KK30NCisNCitpbnQgbWF1c2JfbXNn
X3JlY2VpdmVkX2V2ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQsDQorCQkJICAgICBzdHJ1
Y3QgbWFfdXNiX2hkcl9jb21tb24gKmhkciwNCisJCQkgICAgIGVudW0gbWF1c2JfY2hhbm5lbCBj
aGFubmVsKQ0KK3sNCisJbWF1c2JfcHJfZGVidWcoImNoYW5uZWw9JWQsIHR5cGU9JWQiLCBjaGFu
bmVsLCBoZHItPnR5cGUpOw0KKwlpZiAoTUFfVVNCX0hEUl9UWVBFX0lTX01BTkFHRU1FTlQoaGRy
LT50eXBlKSkNCisJCXJldHVybiBtYXVzYl9tZ210X21zZ19yZWNlaXZlZF9ldmVudChldmVudCwg
aGRyLCBjaGFubmVsKTsNCisJZWxzZSBpZiAoaGRyLT50eXBlID09IE1BX1VTQl9IRFJfVFlQRV9E
QVRBX1JFU1AoVFJBTlNGRVIpKQ0KKwkJcmV0dXJuIG1hdXNiX2RhdGFfbXNnX3JlY2VpdmVkX2V2
ZW50KGV2ZW50LCBoZHIsIGNoYW5uZWwpOw0KKwllbHNlIGlmIChoZHItPnR5cGUgPT0gTUFfVVNC
X0hEUl9UWVBFX0RBVEFfUkVTUChJU09DSFRSQU5TRkVSKSkNCisJCXJldHVybiBtYXVzYl9pc29j
aF9tc2dfcmVjZWl2ZWRfZXZlbnQoZXZlbnQsIGhkciwgY2hhbm5lbCk7DQorDQorCWtmcmVlKGhk
cik7DQorCW1hdXNiX3ByX3dhcm4oIlVua25vd24gZXZlbnQgdHlwZSBldmVudD0lZCIsIGhkci0+
dHlwZSk7DQorCXJldHVybiAtRUJBRFI7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX3ByZXBh
cmVfY29tcGxldGlvbihzdHJ1Y3QgbWF1c2JfY29tcGxldGlvbiAqbWF1c2JfY29tcGxldGlvbiwN
CisJCQkJICAgICBzdHJ1Y3QgY29tcGxldGlvbiAqY29tcGxldGlvbiwNCisJCQkJICAgICBzdHJ1
Y3QgbWF1c2JfZXZlbnQgKmV2ZW50LCBsb25nIGV2ZW50X2lkKQ0KK3sNCisJaW5pdF9jb21wbGV0
aW9uKGNvbXBsZXRpb24pOw0KKw0KKwltYXVzYl9jb21wbGV0aW9uLT5jb21wbGV0aW9uX2V2ZW50
ID0gY29tcGxldGlvbjsNCisJbWF1c2JfY29tcGxldGlvbi0+ZXZlbnRfaWQJICAgPSBldmVudF9p
ZDsNCisJbWF1c2JfY29tcGxldGlvbi0+bWF1c2JfZXZlbnQJICAgPSBldmVudDsNCit9DQorDQor
c3RhdGljIGludCBtYXVzYl93YWl0X2Zvcl9jb21wbGV0aW9uKHN0cnVjdCBtYXVzYl9ldmVudCAq
ZXZlbnQsIGxvbmcgZXZlbnRfaWQsDQorCQkJCXN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldikNCit7
DQorCXN0cnVjdCBjb21wbGV0aW9uCWNvbXBsZXRpb247DQorCXN0cnVjdCBtYXVzYl9jb21wbGV0
aW9uIG1hdXNiX2NvbXBsZXRpb247DQorCWludCAgICBzdGF0dXMgPSAwOw0KKw0KKwltYXVzYl9w
cmVwYXJlX2NvbXBsZXRpb24oJm1hdXNiX2NvbXBsZXRpb24sICZjb21wbGV0aW9uLCBldmVudCwN
CisJCQkJIGV2ZW50X2lkKTsNCisJbWF1c2JfaW5zZXJ0X2V2ZW50KGRldiwgJm1hdXNiX2NvbXBs
ZXRpb24pOw0KKw0KKwlzdGF0dXMgPSBtYXVzYl9lbnF1ZXVlX2V2ZW50X3RvX3VzZXIoZGV2LCBl
dmVudCk7DQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9yZW1vdmVfZXZlbnQoZGV2LCAm
bWF1c2JfY29tcGxldGlvbik7DQorCQltYXVzYl9wcl9lcnIoIlJpbmcgYnVmZmVyIGZ1bGwsIGV2
ZW50X2lkPSVsZCIsIGV2ZW50X2lkKTsNCisJCXF1ZXVlX3dvcmsoZGV2LT53b3JrcSwgJmRldi0+
aGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorCQlyZXR1cm4gc3RhdHVzOw0KKwl9DQorDQorCXN0YXR1
cyA9IHdhaXRfZm9yX2NvbXBsZXRpb25faW50ZXJydXB0aWJsZV90aW1lb3V0KCZjb21wbGV0aW9u
LA0KKwkJCW1zZWNzX3RvX2ppZmZpZXMoTUFOQUdFTUVOVF9FVkVOVF9USU1FT1VUKSk7DQorDQor
CW1hdXNiX3JlbW92ZV9ldmVudChkZXYsICZtYXVzYl9jb21wbGV0aW9uKTsNCisNCisJaWYgKHN0
YXR1cyA9PSAwKSB7DQorCQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZkZXYtPnNvY2tldF9kaXNj
b25uZWN0X3dvcmspOw0KKwkJcXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2LT5oY2RfZGlzY29u
bmVjdF93b3JrKTsNCisJCXJldHVybiAtRVRJTUVET1VUOw0KKwl9DQorDQorCXJldHVybiAwOw0K
K30NCisNCitpbnQgbWF1c2JfdXNiZGV2aGFuZGxlX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2LA0KKwkJCQkgICAgIHVpbnQ4X3QgZGV2aWNlX3NwZWVkLA0KKwkJCQkgICAg
IHVpbnQzMl90IHJvdXRlX3N0cmluZywNCisJCQkJICAgICB1aW50MTZfdCBodWJfZGV2X2hhbmRs
ZSwNCisJCQkJICAgICB1aW50MTZfdCBwYXJlbnRfaHNfaHViX2Rldl9oYW5kbGUsDQorCQkJCSAg
ICAgdWludDE2X3QgcGFyZW50X2hzX2h1Yl9wb3J0LCB1aW50MTZfdCBtdHQsDQorCQkJCSAgICAg
dWludDhfdCBsc2UsIGludDMyX3QgKnVzYl9kZXZfaGFuZGxlKQ0KK3sNCisJc3RydWN0IG1hdXNi
X2V2ZW50IGV2ZW50Ow0KKwlpbnQgc3RhdHVzOw0KKwlsb25nIGV2ZW50X2lkID0gbWF1c2JfZXZl
bnRfaWQoZGV2KTsNCisNCisJZXZlbnQudHlwZSA9IE1BVVNCX0VWRU5UX1RZUEVfVVNCX0RFVl9I
QU5ETEU7DQorCWV2ZW50Lm1nbXQuZGV2X2hhbmRsZS5kZXZpY2Vfc3BlZWQJID0gZGV2aWNlX3Nw
ZWVkOw0KKwlldmVudC5tZ210LmRldl9oYW5kbGUucm91dGVfc3RyaW5nCSA9IHJvdXRlX3N0cmlu
ZzsNCisJZXZlbnQubWdtdC5kZXZfaGFuZGxlLmh1Yl9kZXZfaGFuZGxlCSA9IGh1Yl9kZXZfaGFu
ZGxlOw0KKwlldmVudC5tZ210LmRldl9oYW5kbGUucGFyZW50X2hzX2h1Yl9wb3J0ID0gcGFyZW50
X2hzX2h1Yl9wb3J0Ow0KKwlldmVudC5tZ210LmRldl9oYW5kbGUubXR0CQkgPSBtdHQ7DQorCWV2
ZW50Lm1nbXQuZGV2X2hhbmRsZS5sc2UJCSA9IGxzZTsNCisJZXZlbnQubWdtdC5kZXZfaGFuZGxl
LmV2ZW50X2lkCQkgPSBldmVudF9pZDsNCisJZXZlbnQubWFkZXZfYWRkcgkJCSA9IGRldi0+bWFk
ZXZfYWRkcjsNCisJZXZlbnQubWdtdC5kZXZfaGFuZGxlLnBhcmVudF9oc19odWJfZGV2X2hhbmRs
ZSA9DQorCQkJCQkJICAgcGFyZW50X2hzX2h1Yl9kZXZfaGFuZGxlOw0KKw0KKwlzdGF0dXMgPSBt
YXVzYl93YWl0X2Zvcl9jb21wbGV0aW9uKCZldmVudCwgZXZlbnRfaWQsIGRldik7DQorDQorCWlm
IChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlVzYmRldmhhbmRsZSBmYWlsZWQsIGV2
ZW50X2lkPSVsZCIsIGV2ZW50X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJaWYg
KGV2ZW50LnN0YXR1cyA8IDApDQorCQlyZXR1cm4gZXZlbnQuc3RhdHVzOw0KKw0KKwkqdXNiX2Rl
dl9oYW5kbGUgPSBldmVudC5tZ210LmRldl9oYW5kbGUuZGV2X2hhbmRsZTsNCisNCisJcmV0dXJu
IDA7DQorfQ0KKw0KK2ludCBtYXVzYl91c2JkZXZoYW5kbGVfZXZlbnRfZnJvbV91c2VyKHN0cnVj
dCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICAgICAgIHN0cnVjdCBtYXVzYl9ldmVudCAqZXZl
bnQpDQorew0KKwlyZXR1cm4gbWF1c2Jfc2lnbmFsX2V2ZW50KGRldiwgZXZlbnQsIGV2ZW50LT5t
Z210LmRldl9oYW5kbGUuZXZlbnRfaWQpOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9wb3B1
bGF0ZV9zdGFuZGFyZF9lcF9kZXNjcmlwdG9yKHN0cnVjdCB1c2JfZXBfZGVzYyAqc3RkX2Rlc2Ms
DQorCQkJCXN0cnVjdCB1c2JfZW5kcG9pbnRfZGVzY3JpcHRvciAqdXNiX3N0ZF9kZXNjKQ0KK3sN
CisJc3RkX2Rlc2MtPmJMZW5ndGgJICAgPSB1c2Jfc3RkX2Rlc2MtPmJMZW5ndGg7DQorCXN0ZF9k
ZXNjLT5iRGVzY3JpcHRvclR5cGUgID0gdXNiX3N0ZF9kZXNjLT5iRGVzY3JpcHRvclR5cGU7DQor
CXN0ZF9kZXNjLT5iRW5kcG9pbnRBZGRyZXNzID0gdXNiX3N0ZF9kZXNjLT5iRW5kcG9pbnRBZGRy
ZXNzOw0KKwlzdGRfZGVzYy0+Ym1BdHRyaWJ1dGVzCSAgID0gdXNiX3N0ZF9kZXNjLT5ibUF0dHJp
YnV0ZXM7DQorCXN0ZF9kZXNjLT53TWF4UGFja2V0U2l6ZSAgID0gdXNiX3N0ZF9kZXNjLT53TWF4
UGFja2V0U2l6ZTsNCisJc3RkX2Rlc2MtPmJJbnRlcnZhbAkgICA9IHVzYl9zdGRfZGVzYy0+Yklu
dGVydmFsOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9wb3B1bGF0ZV9zdXBlcnNwZWVkX2Vw
X2Rlc2NyaXB0b3IoDQorCQkJCXN0cnVjdCB1c2Jfc3NfZXBfY29tcF9kZXNjICpzc19kZXNjLA0K
KwkJCQlzdHJ1Y3QgdXNiX3NzX2VwX2NvbXBfZGVzY3JpcHRvciAqdXNiX3NzX2Rlc2MpDQorew0K
Kwlzc19kZXNjLT5iTGVuZ3RoCSAgID0gdXNiX3NzX2Rlc2MtPmJMZW5ndGg7DQorCXNzX2Rlc2Mt
PmJEZXNjcmlwdG9yVHlwZSAgID0gdXNiX3NzX2Rlc2MtPmJEZXNjcmlwdG9yVHlwZTsNCisJc3Nf
ZGVzYy0+Yk1heEJ1cnN0CSAgID0gdXNiX3NzX2Rlc2MtPmJNYXhCdXJzdDsNCisJc3NfZGVzYy0+
Ym1BdHRyaWJ1dGVzCSAgID0gdXNiX3NzX2Rlc2MtPmJtQXR0cmlidXRlczsNCisJc3NfZGVzYy0+
d0J5dGVzUGVySW50ZXJ2YWwgPSB1c2Jfc3NfZGVzYy0+d0J5dGVzUGVySW50ZXJ2YWw7DQorfQ0K
Kw0KK3ZvaWQgbWF1c2JfaW5pdF9zdGFuZGFyZF9lcF9kZXNjcmlwdG9yKA0KKwkJc3RydWN0IG1h
X3VzYl9lcGhhbmRsZXJlcV9kZXNjX3N0ZCAqc3RkX2Rlc2MsDQorCQlzdHJ1Y3QgdXNiX2VuZHBv
aW50X2Rlc2NyaXB0b3IgKnVzYl9zdGRfZGVzYykNCit7DQorCW1hdXNiX3BvcHVsYXRlX3N0YW5k
YXJkX2VwX2Rlc2NyaXB0b3IoJnN0ZF9kZXNjLT51c2IyMCwgdXNiX3N0ZF9kZXNjKTsNCit9DQor
DQordm9pZCBtYXVzYl9pbml0X3N1cGVyc3BlZWRfZXBfZGVzY3JpcHRvcigNCisJCXN0cnVjdCBt
YV91c2JfZXBoYW5kbGVyZXFfZGVzY19zcyAqc3NfZGVzYywNCisJCXN0cnVjdCB1c2JfZW5kcG9p
bnRfZGVzY3JpcHRvciAqdXNiX3N0ZF9kZXNjLA0KKwkJc3RydWN0IHVzYl9zc19lcF9jb21wX2Rl
c2NyaXB0b3IgKnVzYl9zc19kZXNjKQ0KK3sNCisJbWF1c2JfcG9wdWxhdGVfc3RhbmRhcmRfZXBf
ZGVzY3JpcHRvcigmc3NfZGVzYy0+dXNiMjAsIHVzYl9zdGRfZGVzYyk7DQorCW1hdXNiX3BvcHVs
YXRlX3N1cGVyc3BlZWRfZXBfZGVzY3JpcHRvcigmc3NfZGVzYy0+dXNiMzEsIHVzYl9zc19kZXNj
KTsNCit9DQorDQoraW50IG1hdXNiX2VwaGFuZGxlX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNi
X2RldmljZSAqZGV2LA0KKwkJCQkgdWludDE2X3QgZGV2aWNlX2hhbmRsZSwNCisJCQkJIHVpbnQx
Nl90IGRlc2NyaXB0b3Jfc2l6ZSwgdm9pZCAqZGVzY3JpcHRvciwNCisJCQkJIHVpbnQxNl90ICpl
cF9oYW5kbGUpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZXZlbnQgZXZlbnQ7DQorCWludCAgc3RhdHVz
Ow0KKwlsb25nIGV2ZW50X2lkID0gbWF1c2JfZXZlbnRfaWQoZGV2KTsNCisNCisJZXZlbnQudHlw
ZQkJCSAgICAgPSBNQVVTQl9FVkVOVF9UWVBFX0VQX0hBTkRMRTsNCisJZXZlbnQubWdtdC5lcF9o
YW5kbGUuZGV2aWNlX2hhbmRsZSAgID0gZGV2aWNlX2hhbmRsZTsNCisJZXZlbnQubWdtdC5lcF9o
YW5kbGUuZGVzY3JpcHRvcl9zaXplID0gZGVzY3JpcHRvcl9zaXplOw0KKwlldmVudC5tZ210LmVw
X2hhbmRsZS5ldmVudF9pZAkgICAgID0gZXZlbnRfaWQ7DQorCWV2ZW50Lm1hZGV2X2FkZHIJCSAg
ICAgPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCW1lbWNweShldmVudC5tZ210LmVwX2hhbmRsZS5k
ZXNjcmlwdG9yLCBkZXNjcmlwdG9yLCBkZXNjcmlwdG9yX3NpemUpOw0KKw0KKwlzdGF0dXMgPSBt
YXVzYl93YWl0X2Zvcl9jb21wbGV0aW9uKCZldmVudCwgZXZlbnRfaWQsIGRldik7DQorDQorCWlm
IChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkVwaGFuZGxlIGZhaWxlZCwgZXZlbnRf
aWQ9JWxkIiwgZXZlbnRfaWQpOw0KKwkJcmV0dXJuIHN0YXR1czsNCisJfQ0KKw0KKwlpZiAoZXZl
bnQuc3RhdHVzIDwgMCkNCisJCXJldHVybiBldmVudC5zdGF0dXM7DQorDQorCSplcF9oYW5kbGUg
PSBldmVudC5tZ210LmVwX2hhbmRsZS5lcF9oYW5kbGU7DQorDQorCXJldHVybiAwOw0KK30NCisN
CitpbnQgbWF1c2JfZXBoYW5kbGVfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2Ug
KmRldiwNCisJCQkJICAgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCkNCit7DQorCXJldHVybiBt
YXVzYl9zaWduYWxfZXZlbnQoZGV2LCBldmVudCwgZXZlbnQtPm1nbXQuZXBfaGFuZGxlLmV2ZW50
X2lkKTsNCit9DQorDQoraW50IG1hdXNiX2VwYWN0aXZhdGVfZXZlbnRfdG9fdXNlcihzdHJ1Y3Qg
bWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgIHVpbnQxNl90IGRldmljZV9oYW5kbGUsIHVpbnQx
Nl90IGVwX2hhbmRsZSkNCit7DQorCXN0cnVjdCBtYXVzYl9ldmVudCBldmVudDsNCisJaW50ICBz
dGF0dXM7DQorCWxvbmcgZXZlbnRfaWQgPSBtYXVzYl9ldmVudF9pZChkZXYpOw0KKw0KKwlldmVu
dC50eXBlID0gTUFVU0JfRVZFTlRfVFlQRV9FUF9IQU5ETEVfQUNUSVZBVEU7DQorCWV2ZW50Lm1n
bXQuZXBfYWN0aXZhdGUuZGV2aWNlX2hhbmRsZSA9IGRldmljZV9oYW5kbGU7DQorCWV2ZW50Lm1n
bXQuZXBfYWN0aXZhdGUuZXBfaGFuZGxlICAgICA9IGVwX2hhbmRsZTsNCisJZXZlbnQubWdtdC5l
cF9hY3RpdmF0ZS5ldmVudF9pZAkgICAgID0gZXZlbnRfaWQ7DQorCWV2ZW50Lm1hZGV2X2FkZHIJ
CSAgICAgPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCXN0YXR1cyA9IG1hdXNiX3dhaXRfZm9yX2Nv
bXBsZXRpb24oJmV2ZW50LCBldmVudF9pZCwgZGV2KTsNCisNCisJaWYgKHN0YXR1cyA8IDApIHsN
CisJCW1hdXNiX3ByX2VycigiRXBhY3RpdmF0ZSBmYWlsZWQsIGV2ZW50X2lkPSVsZCIsIGV2ZW50
X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJcmV0dXJuIGV2ZW50LnN0YXR1czsN
Cit9DQoraW50IG1hdXNiX2VwYWN0aXZhdGVfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBtYXVzYl9k
ZXZpY2UgKmRldiwNCisJCQkJICAgICBzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJ
cmV0dXJuIG1hdXNiX3NpZ25hbF9ldmVudChkZXYsIGV2ZW50LA0KKwkJZXZlbnQtPm1nbXQuZXBf
YWN0aXZhdGUuZXZlbnRfaWQpOw0KK30NCisNCitpbnQgbWF1c2JfZXBpbmFjdGl2YXRlX2V2ZW50
X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICAgIHVpbnQxNl90IGRl
dmljZV9oYW5kbGUsIHVpbnQxNl90IGVwX2hhbmRsZSkNCit7DQorCXN0cnVjdCBtYXVzYl9ldmVu
dCBldmVudDsNCisJaW50ICBzdGF0dXM7DQorCWxvbmcgZXZlbnRfaWQgPSBtYXVzYl9ldmVudF9p
ZChkZXYpOw0KKw0KKwlldmVudC50eXBlID0gTUFVU0JfRVZFTlRfVFlQRV9FUF9IQU5ETEVfSU5B
Q1RJVkFURTsNCisJZXZlbnQubWdtdC5lcF9pbmFjdGl2YXRlLmRldmljZV9oYW5kbGUJPSBkZXZp
Y2VfaGFuZGxlOw0KKwlldmVudC5tZ210LmVwX2luYWN0aXZhdGUuZXBfaGFuZGxlCT0gZXBfaGFu
ZGxlOw0KKwlldmVudC5tZ210LmVwX2luYWN0aXZhdGUuZXZlbnRfaWQJPSBldmVudF9pZDsNCisJ
ZXZlbnQubWFkZXZfYWRkcgkJCT0gZGV2LT5tYWRldl9hZGRyOw0KKw0KKwlzdGF0dXMgPSBtYXVz
Yl93YWl0X2Zvcl9jb21wbGV0aW9uKCZldmVudCwgZXZlbnRfaWQsIGRldik7DQorDQorCWlmIChz
dGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkVwaW5hY3RpdmF0ZSBmYWlsZWQsIGV2ZW50
X2lkPSVsZCIsIGV2ZW50X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJcmV0dXJu
IGV2ZW50LnN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX2VwaW5hY3RpdmF0ZV9ldmVudF9mcm9t
X3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICAgICAgc3RydWN0IG1hdXNi
X2V2ZW50ICpldmVudCkNCit7DQorCXJldHVybiBtYXVzYl9zaWduYWxfZXZlbnQoZGV2LCBldmVu
dCwNCisJCQkJICBldmVudC0+bWdtdC5lcF9pbmFjdGl2YXRlLmV2ZW50X2lkKTsNCit9DQorDQor
aW50IG1hdXNiX2VwcmVzZXRfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYs
DQorCQkJCXVpbnQxNl90IGRldmljZV9oYW5kbGUsIHVpbnQxNl90IGVwX2hhbmRsZSwNCisJCQkJ
dWludDhfdCB0c3BfZmxhZykNCit7DQorCXN0cnVjdCBtYXVzYl9ldmVudCBldmVudDsNCisJaW50
ICBzdGF0dXM7DQorCWxvbmcgZXZlbnRfaWQgPSBtYXVzYl9ldmVudF9pZChkZXYpOw0KKw0KKwll
dmVudC50eXBlCQkJICA9IE1BVVNCX0VWRU5UX1RZUEVfRVBfSEFORExFX1JFU0VUOw0KKwlldmVu
dC5tZ210LmVwX3Jlc2V0LmRldmljZV9oYW5kbGUgPSBkZXZpY2VfaGFuZGxlOw0KKwlldmVudC5t
Z210LmVwX3Jlc2V0LmVwX2hhbmRsZQkgID0gZXBfaGFuZGxlOw0KKwlldmVudC5tZ210LmVwX3Jl
c2V0LnRzcAkJICA9IHRzcF9mbGFnOw0KKwlldmVudC5tZ210LmVwX3Jlc2V0LmV2ZW50X2lkCSAg
PSBldmVudF9pZDsNCisJZXZlbnQubWFkZXZfYWRkcgkJICA9IGRldi0+bWFkZXZfYWRkcjsNCisN
CisJc3RhdHVzID0gbWF1c2Jfd2FpdF9mb3JfY29tcGxldGlvbigmZXZlbnQsIGV2ZW50X2lkLCBk
ZXYpOw0KKw0KKwlpZiAoc3RhdHVzIDwgMCkgew0KKwkJbWF1c2JfcHJfZXJyKCJFcHJlc2V0IGZh
aWxlZCwgZXZlbnRfaWQ9JWxkIiwgZXZlbnRfaWQpOw0KKwkJcmV0dXJuIHN0YXR1czsNCisJfQ0K
Kw0KKwlyZXR1cm4gZXZlbnQuc3RhdHVzOw0KK30NCisNCitpbnQgbWF1c2JfZXByZXNldF9ldmVu
dF9mcm9tX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgIHN0cnVjdCBtYXVz
Yl9ldmVudCAqZXZlbnQpDQorew0KKwlyZXR1cm4gbWF1c2Jfc2lnbmFsX2V2ZW50KGRldiwgZXZl
bnQsIGV2ZW50LT5tZ210LmVwX3Jlc2V0LmV2ZW50X2lkKTsNCit9DQorDQoraW50IG1hdXNiX2Vw
ZGVsZXRlX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgdWlu
dDE2X3QgZGV2aWNlX2hhbmRsZSwgdWludDE2X3QgZXBfaGFuZGxlKQ0KK3sNCisJc3RydWN0IG1h
dXNiX2V2ZW50IGV2ZW50Ow0KKwlpbnQgIHN0YXR1czsNCisJbG9uZyBldmVudF9pZCA9IG1hdXNi
X2V2ZW50X2lkKGRldik7DQorDQorCWV2ZW50LnR5cGUJCQkgICA9IE1BVVNCX0VWRU5UX1RZUEVf
RVBfSEFORExFX0RFTEVURTsNCisJZXZlbnQubWdtdC5lcF9kZWxldGUuZGV2aWNlX2hhbmRsZSA9
IGRldmljZV9oYW5kbGU7DQorCWV2ZW50Lm1nbXQuZXBfZGVsZXRlLmVwX2hhbmRsZQkgICA9IGVw
X2hhbmRsZTsNCisJZXZlbnQubWdtdC5lcF9kZWxldGUuZXZlbnRfaWQJICAgPSBldmVudF9pZDsN
CisJZXZlbnQubWFkZXZfYWRkcgkJICAgPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCXN0YXR1cyA9
IG1hdXNiX3dhaXRfZm9yX2NvbXBsZXRpb24oJmV2ZW50LCBldmVudF9pZCwgZGV2KTsNCisNCisJ
aWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiRXBkZWxldGUgZmFpbGVkLCBldmVu
dF9pZD0lbGQiLCBldmVudF9pZCk7DQorCQlyZXR1cm4gc3RhdHVzOw0KKwl9DQorDQorCXJldHVy
biBldmVudC5zdGF0dXM7DQorfQ0KKw0KK2ludCBtYXVzYl9lcGRlbGV0ZV9ldmVudF9mcm9tX3Vz
ZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICBzdHJ1Y3QgbWF1c2JfZXZlbnQg
KmV2ZW50KQ0KK3sNCisJcmV0dXJuIG1hdXNiX3NpZ25hbF9ldmVudChkZXYsIGV2ZW50LCBldmVu
dC0+bWdtdC5lcF9kZWxldGUuZXZlbnRfaWQpOw0KK30NCisNCitpbnQgbWF1c2JfbW9kaWZ5ZXAw
X2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgIHVpbnQxNl90
IGRldmljZV9oYW5kbGUsIHVpbnQxNl90ICplcF9oYW5kbGUsDQorCQkJCSAgdWludDE2X3QgbWF4
X3BhY2tldF9zaXplKQ0KK3sNCisJc3RydWN0IG1hdXNiX2V2ZW50IGV2ZW50Ow0KKwlpbnQgIHN0
YXR1czsNCisJbG9uZyBldmVudF9pZCA9IG1hdXNiX2V2ZW50X2lkKGRldik7DQorDQorCWV2ZW50
LnR5cGUJCQkJPSBNQVVTQl9FVkVOVF9UWVBFX01PRElGWV9FUDA7DQorCWV2ZW50Lm1nbXQubW9k
aWZ5X2VwMC5kZXZpY2VfaGFuZGxlCT0gZGV2aWNlX2hhbmRsZTsNCisJZXZlbnQubWdtdC5tb2Rp
ZnlfZXAwLmVwX2hhbmRsZQkJPSAqZXBfaGFuZGxlOw0KKwlldmVudC5tZ210Lm1vZGlmeV9lcDAu
bWF4X3BhY2tldF9zaXplCT0gbWF4X3BhY2tldF9zaXplOw0KKwlldmVudC5tZ210Lm1vZGlmeV9l
cDAuZXZlbnRfaWQJCT0gZXZlbnRfaWQ7DQorCWV2ZW50Lm1hZGV2X2FkZHIJCQk9IGRldi0+bWFk
ZXZfYWRkcjsNCisNCisJc3RhdHVzID0gbWF1c2Jfd2FpdF9mb3JfY29tcGxldGlvbigmZXZlbnQs
IGV2ZW50X2lkLCBkZXYpOw0KKw0KKwlpZiAoc3RhdHVzIDwgMCkgew0KKwkJbWF1c2JfcHJfZXJy
KCJNb2RpZnllcDAgZmFpbGVkLCBldmVudF9pZD0lbGQiLCBldmVudF9pZCk7DQorCQlyZXR1cm4g
c3RhdHVzOw0KKwl9DQorDQorCWlmIChldmVudC5zdGF0dXMgPCAwKQ0KKwkJcmV0dXJuIGV2ZW50
LnN0YXR1czsNCisNCisJKmVwX2hhbmRsZSA9IGV2ZW50Lm1nbXQubW9kaWZ5X2VwMC5lcF9oYW5k
bGU7DQorDQorCXJldHVybiAwOw0KK30NCisNCitpbnQgbWF1c2JfbW9kaWZ5ZXAwX2V2ZW50X2Zy
b21fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICBzdHJ1Y3QgbWF1c2Jf
ZXZlbnQgKmV2ZW50KQ0KK3sNCisJcmV0dXJuIG1hdXNiX3NpZ25hbF9ldmVudChkZXYsIGV2ZW50
LCBldmVudC0+bWdtdC5tb2RpZnlfZXAwLmV2ZW50X2lkKTsNCit9DQorDQoraW50IG1hdXNiX3Nl
dHVzYmRldmFkZHJlc3NfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQor
CQkJCQkgdWludDE2X3QgZGV2aWNlX2hhbmRsZSwNCisJCQkJCSB1aW50MTZfdCByZXNwb25zZV90
aW1lb3V0KQ0KK3sNCisJc3RydWN0IG1hdXNiX2V2ZW50IGV2ZW50Ow0KKwlpbnQgIHN0YXR1czsN
CisJbG9uZyBldmVudF9pZCA9IG1hdXNiX2V2ZW50X2lkKGRldik7DQorDQorCWV2ZW50LnR5cGUg
PSBNQVVTQl9FVkVOVF9UWVBFX1NFVF9VU0JfREVWX0FERFJFU1M7DQorCWV2ZW50Lm1nbXQuc2V0
X3VzYl9kZXZfYWRkcmVzcy5kZXZpY2VfaGFuZGxlCT0gZGV2aWNlX2hhbmRsZTsNCisJZXZlbnQu
bWdtdC5zZXRfdXNiX2Rldl9hZGRyZXNzLnJlc3BvbnNlX3RpbWVvdXQJPSByZXNwb25zZV90aW1l
b3V0Ow0KKwlldmVudC5tZ210LnNldF91c2JfZGV2X2FkZHJlc3MuZXZlbnRfaWQJCT0gZXZlbnRf
aWQ7DQorCWV2ZW50Lm1hZGV2X2FkZHIJCQkJPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCXN0YXR1
cyA9IG1hdXNiX3dhaXRfZm9yX2NvbXBsZXRpb24oJmV2ZW50LCBldmVudF9pZCwgZGV2KTsNCisN
CisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiU2V0dXNiZGV2YWRkcmVzcyBm
YWlsZWQsIGV2ZW50X2lkPSVsZCIsIGV2ZW50X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0N
CisNCisJcmV0dXJuIGV2ZW50LnN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX3NldHVzYmRldmFk
ZHJlc3NfZXZlbnRfZnJvbV91c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJCSAg
IHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQorew0KKwlyZXR1cm4gbWF1c2Jfc2lnbmFsX2V2
ZW50KGRldiwgZXZlbnQsDQorCQlldmVudC0+bWdtdC5zZXRfdXNiX2Rldl9hZGRyZXNzLmV2ZW50
X2lkKTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfaW5pdF9kZXZpY2VfZGVzY3JpcHRvcigN
CisJCQlzdHJ1Y3QgbWFfdXNiX3VwZGF0ZWRldnJlcV9kZXNjICp1cGRhdGVfZGVzY3JpcHRvciwN
CisJCQlzdHJ1Y3QgdXNiX2RldmljZV9kZXNjcmlwdG9yICpkZXZpY2VfZGVzY3JpcHRvcikNCit7
DQorCXVwZGF0ZV9kZXNjcmlwdG9yLT51c2IyMC5iTGVuZ3RoID0gZGV2aWNlX2Rlc2NyaXB0b3It
PmJMZW5ndGg7DQorCXVwZGF0ZV9kZXNjcmlwdG9yLT51c2IyMC5iRGVzY3JpcHRvclR5cGUgPQ0K
KwkJCQkJZGV2aWNlX2Rlc2NyaXB0b3ItPmJEZXNjcmlwdG9yVHlwZTsNCisJdXBkYXRlX2Rlc2Ny
aXB0b3ItPnVzYjIwLmJjZFVTQiA9IGRldmljZV9kZXNjcmlwdG9yLT5iY2RVU0I7DQorCXVwZGF0
ZV9kZXNjcmlwdG9yLT51c2IyMC5iRGV2aWNlQ2xhc3MgPQ0KKwkJCQkJZGV2aWNlX2Rlc2NyaXB0
b3ItPmJEZXZpY2VDbGFzczsNCisJdXBkYXRlX2Rlc2NyaXB0b3ItPnVzYjIwLmJEZXZpY2VTdWJD
bGFzcyA9DQorCQkJCQlkZXZpY2VfZGVzY3JpcHRvci0+YkRldmljZVN1YkNsYXNzOw0KKwl1cGRh
dGVfZGVzY3JpcHRvci0+dXNiMjAuYkRldmljZVByb3RvY29sID0NCisJCQkJCWRldmljZV9kZXNj
cmlwdG9yLT5iRGV2aWNlUHJvdG9jb2w7DQorCXVwZGF0ZV9kZXNjcmlwdG9yLT51c2IyMC5iTWF4
UGFja2V0U2l6ZTAgPQ0KKwkJCQkJZGV2aWNlX2Rlc2NyaXB0b3ItPmJNYXhQYWNrZXRTaXplMDsN
CisJdXBkYXRlX2Rlc2NyaXB0b3ItPnVzYjIwLmlkVmVuZG9yICA9IGRldmljZV9kZXNjcmlwdG9y
LT5pZFZlbmRvcjsNCisJdXBkYXRlX2Rlc2NyaXB0b3ItPnVzYjIwLmlkUHJvZHVjdCA9IGRldmlj
ZV9kZXNjcmlwdG9yLT5pZFByb2R1Y3Q7DQorCXVwZGF0ZV9kZXNjcmlwdG9yLT51c2IyMC5iY2RE
ZXZpY2UgPSBkZXZpY2VfZGVzY3JpcHRvci0+YmNkRGV2aWNlOw0KKwl1cGRhdGVfZGVzY3JpcHRv
ci0+dXNiMjAuaU1hbnVmYWN0dXJlciA9DQorCQkJCQlkZXZpY2VfZGVzY3JpcHRvci0+aU1hbnVm
YWN0dXJlcjsNCisJdXBkYXRlX2Rlc2NyaXB0b3ItPnVzYjIwLmlQcm9kdWN0ICA9IGRldmljZV9k
ZXNjcmlwdG9yLT5pUHJvZHVjdDsNCisJdXBkYXRlX2Rlc2NyaXB0b3ItPnVzYjIwLmlTZXJpYWxO
dW1iZXIgPQ0KKwkJCQkJZGV2aWNlX2Rlc2NyaXB0b3ItPmlTZXJpYWxOdW1iZXI7DQorCXVwZGF0
ZV9kZXNjcmlwdG9yLT51c2IyMC5iTnVtQ29uZmlndXJhdGlvbnMgPQ0KKwkJCQkJZGV2aWNlX2Rl
c2NyaXB0b3ItPmJOdW1Db25maWd1cmF0aW9uczsNCit9DQorDQoraW50IG1hdXNiX3VwZGF0ZWRl
dl9ldmVudF90b191c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwNCisJCQkJICB1aW50MTZf
dCBkZXZpY2VfaGFuZGxlLA0KKwkJCQkgIHVpbnQxNl90IG1heF9leGl0X2xhdGVuY3ksIHVpbnQ4
X3QgaHViLA0KKwkJCQkgIHVpbnQ4X3QgbnVtYmVyX29mX3BvcnRzLCB1aW50OF90IG10dCwNCisJ
CQkJICB1aW50OF90IHR0dCwgdWludDhfdCBpbnRlZ3JhdGVkX2h1Yl9sYXRlbmN5LA0KKwkJCQkg
IHN0cnVjdCB1c2JfZGV2aWNlX2Rlc2NyaXB0b3IgKmRldl9kZXNjcmlwdG9yKQ0KK3sNCisJc3Ry
dWN0IG1hdXNiX2V2ZW50IGV2ZW50Ow0KKwlpbnQgc3RhdHVzOw0KKwlsb25nIGV2ZW50X2lkID0g
bWF1c2JfZXZlbnRfaWQoZGV2KTsNCisNCisJZXZlbnQudHlwZSA9IE1BVVNCX0VWRU5UX1RZUEVf
VVBEQVRFX0RFVjsNCisJZXZlbnQubWdtdC51cGRhdGVfZGV2LmRldmljZV9oYW5kbGUJICAgICA9
IGRldmljZV9oYW5kbGU7DQorCWV2ZW50Lm1nbXQudXBkYXRlX2Rldi5tYXhfZXhpdF9sYXRlbmN5
CSAgICAgPSBtYXhfZXhpdF9sYXRlbmN5Ow0KKwlldmVudC5tZ210LnVwZGF0ZV9kZXYuaHViCQkg
ICAgID0gaHViOw0KKwlldmVudC5tZ210LnVwZGF0ZV9kZXYubnVtYmVyX29mX3BvcnRzCSAgICAg
PSBudW1iZXJfb2ZfcG9ydHM7DQorCWV2ZW50Lm1nbXQudXBkYXRlX2Rldi5tdHQJCSAgICAgPSBt
dHQ7DQorCWV2ZW50Lm1nbXQudXBkYXRlX2Rldi50dHQJCSAgICAgPSB0dHQ7DQorCWV2ZW50Lm1n
bXQudXBkYXRlX2Rldi5pbnRlZ3JhdGVkX2h1Yl9sYXRlbmN5ID0gaW50ZWdyYXRlZF9odWJfbGF0
ZW5jeTsNCisJZXZlbnQubWdtdC51cGRhdGVfZGV2LmV2ZW50X2lkCQkgICAgID0gZXZlbnRfaWQ7
DQorCWV2ZW50Lm1hZGV2X2FkZHIJCQkgICAgID0gZGV2LT5tYWRldl9hZGRyOw0KKw0KKwltYXVz
Yl9pbml0X2RldmljZV9kZXNjcmlwdG9yKCZldmVudC5tZ210LnVwZGF0ZV9kZXYudXBkYXRlX2Rl
c2NyaXB0b3IsDQorCQkJCSAgICAgZGV2X2Rlc2NyaXB0b3IpOw0KKw0KKwlzdGF0dXMgPSBtYXVz
Yl93YWl0X2Zvcl9jb21wbGV0aW9uKCZldmVudCwgZXZlbnRfaWQsIGRldik7DQorDQorCWlmIChz
dGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlVwZGF0ZWRldiBmYWlsZWQsIGV2ZW50X2lk
PSVsZCIsIGV2ZW50X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJcmV0dXJuIGV2
ZW50LnN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX3VwZGF0ZWRldl9ldmVudF9mcm9tX3VzZXIo
c3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICAgc3RydWN0IG1hdXNiX2V2ZW50ICpl
dmVudCkNCit7DQorCXJldHVybiBtYXVzYl9zaWduYWxfZXZlbnQoZGV2LCBldmVudCwgZXZlbnQt
Pm1nbXQudXBkYXRlX2Rldi5ldmVudF9pZCk7DQorfQ0KKw0KK2ludCBtYXVzYl91c2JkZXZkaXNj
b25uZWN0X2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkJIHVp
bnQxNl90IGRldl9oYW5kbGUpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZXZlbnQgZXZlbnQ7DQorCWlu
dCBzdGF0dXM7DQorDQorCWV2ZW50LnR5cGUgPSBNQVVTQl9FVkVOVF9UWVBFX1VTQl9ERVZfRElT
Q09OTkVDVDsNCisJZXZlbnQubWdtdC51c2JfZGV2X2Rpc2Nvbm5lY3QuZGV2aWNlX2hhbmRsZSA9
IGRldl9oYW5kbGU7DQorCWV2ZW50Lm1hZGV2X2FkZHIJCQkgICAgPSBkZXYtPm1hZGV2X2FkZHI7
DQorDQorCXN0YXR1cyA9IG1hdXNiX2VucXVldWVfZXZlbnRfdG9fdXNlcihkZXYsICZldmVudCk7
DQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlJpbmcgYnVmZmVyIGZ1bGws
IHVzYmRldmRpc2Nvbm5lY3QgZmFpbGVkIik7DQorCQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZk
ZXYtPmhjZF9kaXNjb25uZWN0X3dvcmspOw0KKwl9DQorDQorCXJldHVybiBzdGF0dXM7DQorfQ0K
Kw0KK2ludCBtYXVzYl9waW5nX2V2ZW50X3RvX3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2
KQ0KK3sNCisJc3RydWN0IG1hdXNiX2V2ZW50IGV2ZW50Ow0KKwlpbnQgc3RhdHVzOw0KKw0KKwll
dmVudC50eXBlCSA9IE1BVVNCX0VWRU5UX1RZUEVfUElORzsNCisJZXZlbnQubWFkZXZfYWRkciA9
IGRldi0+bWFkZXZfYWRkcjsNCisNCisJc3RhdHVzID0gbWF1c2JfZW5xdWV1ZV9ldmVudF90b191
c2VyKGRldiwgJmV2ZW50KTsNCisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2Vycigi
UmluZyBidWZmZXIgZnVsbCwgZGV2ZGlzY29ubmVjdCBmYWlsZWQiKTsNCisJCXF1ZXVlX3dvcmso
ZGV2LT53b3JrcSwgJmRldi0+aGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorCX0NCisNCisJcmV0dXJu
IHN0YXR1czsNCit9DQorDQorX19hdHRyaWJ1dGVfXygodW51c2VkKSkNCitzdGF0aWMgaW50IG1h
dXNiX2RldmRpc2Nvbm5lY3RfZXZlbnRfdG9fdXNlcihzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYp
DQorew0KKwlzdHJ1Y3QgbWF1c2JfZXZlbnQgZXZlbnQ7DQorCWludCBzdGF0dXM7DQorDQorCWV2
ZW50LnR5cGUJID0gTUFVU0JfRVZFTlRfVFlQRV9ERVZfRElTQ09OTkVDVDsNCisJZXZlbnQubWFk
ZXZfYWRkciA9IGRldi0+bWFkZXZfYWRkcjsNCisNCisJc3RhdHVzID0gbWF1c2JfZW5xdWV1ZV9l
dmVudF90b191c2VyKGRldiwgJmV2ZW50KTsNCisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNi
X3ByX2VycigiUmluZyBidWZmZXIgZnVsbCwgZGV2ZGlzY29ubmVjdCBmYWlsZWQiKTsNCisJCXF1
ZXVlX3dvcmsoZGV2LT53b3JrcSwgJmRldi0+aGNkX2Rpc2Nvbm5lY3Rfd29yayk7DQorCX0NCisN
CisJcmV0dXJuIHN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX3VzYmRldnJlc2V0X2V2ZW50X3Rv
X3VzZXIoc3RydWN0IG1hdXNiX2RldmljZSAqZGV2LA0KKwkJCQkgICAgdWludDE2X3QgZGV2aWNl
X2hhbmRsZSkNCit7DQorCXN0cnVjdCBtYXVzYl9ldmVudCBldmVudDsNCisJaW50ICBzdGF0dXM7
DQorCWxvbmcgZXZlbnRfaWQgPSBtYXVzYl9ldmVudF9pZChkZXYpOw0KKw0KKwlldmVudC50eXBl
CQkJICAgICAgID0gTUFVU0JfRVZFTlRfVFlQRV9VU0JfREVWX1JFU0VUOw0KKwlldmVudC5tZ210
LnVzYl9kZXZfcmVzZXQuZGV2aWNlX2hhbmRsZSA9IGRldmljZV9oYW5kbGU7DQorCWV2ZW50Lm1n
bXQudXNiX2Rldl9yZXNldC5ldmVudF9pZCAgICAgID0gZXZlbnRfaWQ7DQorCWV2ZW50Lm1hZGV2
X2FkZHIJCSAgICAgICA9IGRldi0+bWFkZXZfYWRkcjsNCisNCisJc3RhdHVzID0gbWF1c2Jfd2Fp
dF9mb3JfY29tcGxldGlvbigmZXZlbnQsIGV2ZW50X2lkLCBkZXYpOw0KKw0KKwlpZiAoc3RhdHVz
IDwgMCkgew0KKwkJbWF1c2JfcHJfZXJyKCJVc2JkZXZyZXNldCBmYWlsZWQsIGV2ZW50X2lkPSVs
ZCIsIGV2ZW50X2lkKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJcmV0dXJuIGV2ZW50
LnN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX3VzYmRldnJlc2V0X2V2ZW50X2Zyb21fdXNlcihz
dHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgIHN0cnVjdCBtYXVzYl9ldmVudCAq
ZXZlbnQpDQorew0KKwlyZXR1cm4gbWF1c2Jfc2lnbmFsX2V2ZW50KGRldiwgZXZlbnQsDQorCQkJ
CSAgZXZlbnQtPm1nbXQudXNiX2Rldl9yZXNldC5ldmVudF9pZCk7DQorfQ0KKw0KK2ludCBtYXVz
Yl9jYW5jZWx0cmFuc2Zlcl9ldmVudF90b191c2VyKHN0cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwN
CisJCQkJICAgICAgIHVpbnQxNl90IGRldmljZV9oYW5kbGUsDQorCQkJCSAgICAgICB1aW50MTZf
dCBlcF9oYW5kbGUsIHVpbnQ2NF90IHVyYikNCit7DQorCXN0cnVjdCBtYXVzYl9ldmVudCBldmVu
dDsNCisJaW50IHN0YXR1czsNCisNCisJZXZlbnQudHlwZSA9IE1BVVNCX0VWRU5UX1RZUEVfQ0FO
Q0VMX1RSQU5TRkVSOw0KKwlldmVudC5tZ210LmNhbmNlbF90cmFuc2Zlci5kZXZpY2VfaGFuZGxl
ID0gZGV2aWNlX2hhbmRsZTsNCisJZXZlbnQubWdtdC5jYW5jZWxfdHJhbnNmZXIuZXBfaGFuZGxl
CSA9IGVwX2hhbmRsZTsNCisJZXZlbnQubWdtdC5jYW5jZWxfdHJhbnNmZXIudXJiCQkgPSB1cmI7
DQorCWV2ZW50Lm1hZGV2X2FkZHIJCQkgPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCXN0YXR1cyA9
IG1hdXNiX2VucXVldWVfZXZlbnRfdG9fdXNlcihkZXYsICZldmVudCk7DQorCWlmIChzdGF0dXMg
PCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlJpbmcgYnVmZmVyIGZ1bGwsIGNhbmNlbHRyYW5zZmVy
IGZhaWxlZCIpOw0KKwkJcXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2LT5oY2RfZGlzY29ubmVj
dF93b3JrKTsNCisJCXJldHVybiBzdGF0dXM7DQorCX0NCisNCisJcmV0dXJuIHN0YXR1czsNCit9
DQorDQoraW50IG1hdXNiX2NhbmNlbHRyYW5zZmVyX2V2ZW50X2Zyb21fdXNlcihzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYsDQorCQkJCQkgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCkNCit7DQor
CW1hdXNiX3ByX2RlYnVnKCIiKTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfY2xl
YW51cF9zZW5kX2RhdGFfbXNnX2V2ZW50KHN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQpDQorew0K
KwltYXVzYl9wcl9kZWJ1ZygiIik7DQorCW1hdXNiX2NvbXBsZXRlX3VyYihldmVudCk7DQorfQ0K
Kw0KK3ZvaWQgbWF1c2JfY2xlYW51cF9yZWNlaXZlZF9kYXRhX21zZ19ldmVudChzdHJ1Y3QgbWF1
c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJbWF1c2JfcHJfZGVidWcoIiIpOw0KKwltYXVzYl9yZWxl
YXNlX2V2ZW50X3Jlc291cmNlcyhldmVudCk7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfY2xlYW51cF9k
ZWxldGVfZGF0YV90cmFuc2Zlcl9ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sN
CisJc3RydWN0IHVyYiAqdXJiID0gKHN0cnVjdCB1cmIgKilldmVudC0+ZGF0YS51cmI7DQorCXN0
cnVjdCBtYXVzYl91cmJfY3R4ICp1cmJfY3R4Ow0KKwlpbnQgc3RhdHVzID0gMDsNCisNCisJdXJi
X2N0eCA9IG1hdXNiX3VubGlua19hbmRfZGVsZXRlX3VyYl9mcm9tX3RyZWUodXJiLCBzdGF0dXMp
Ow0KKwlpZiAoIXVyYl9jdHgpIHsNCisJCW1hdXNiX3ByX3dhcm4oIlVyYj0lcCBpcyBub3QgaW4g
dHJlZSIsIHVyYik7DQorCQlyZXR1cm47DQorCX0NCisNCisJLyogRGVhbGxvY2F0ZSB1cmJfY3R4
ICovDQorCW1hdXNiX3VuaW5pdF9kYXRhX2l0ZXJhdG9yKCZ1cmJfY3R4LT5pdGVyYXRvcik7DQor
CWtmcmVlKHVyYl9jdHgpOw0KKw0KKwl1cmItPnN0YXR1cyA9IC1FUFJPVE87DQorCXVyYi0+YWN0
dWFsX2xlbmd0aCA9IDA7DQorCWF0b21pY19kZWMoJnVyYi0+dXNlX2NvdW50KTsNCisJdXNiX2hj
ZF9naXZlYmFja191cmIodXJiLT5oY3ByaXYsIHVyYiwgdXJiLT5zdGF0dXMpOw0KK30NCmRpZmYg
LS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvaHBhbC9uZXR3b3JrX2NhbGxi
YWNrcy5jIGIvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL2hwYWwvbmV0d29ya19jYWxs
YmFja3MuYw0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uNjBkMGRl
ZTBkZTBlDQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9z
cmMvaHBhbC9uZXR3b3JrX2NhbGxiYWNrcy5jDQpAQCAtMCwwICsxLDE2MiBAQA0KKy8vIFNQRFgt
TGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wDQorLyoNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTkg
LSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxlIGlzIHN1Ympl
Y3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMN
CisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFpbiBkaXJlY3Rv
cnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8NCisjaW5jbHVk
ZSAiaHBhbC9uZXR3b3JrX2NhbGxiYWNrcy5oIg0KKw0KKyNpbmNsdWRlIDxsaW51eC91aW8uaD4N
CisjaW5jbHVkZSA8bGludXgvc2xhYi5oPg0KKw0KKyNpbmNsdWRlICJocGFsL2hwYWwuaCINCisj
aW5jbHVkZSAiaHBhbC9tYXVzYl9ldmVudHMuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9n
cy5oIg0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX2luaXRfaXBfY3R4X2hlbHBlcihzdHJ1Y3QgbWF1
c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgc3RydWN0IG1hdXNiX2lwX2N0eCAqKmlwX2N0eCwN
CisJCQkJICAgICB1aW50MTZfdCBwb3J0LA0KKwkJCQkgICAgIGVudW0gbWF1c2JfY2hhbm5lbCBj
aGFubmVsKQ0KK3sNCisJaW50IHN0YXR1czsNCisNCisJc3RhdHVzID0gbWF1c2JfaW5pdF9pcF9j
dHgoaXBfY3R4LCBkZXYtPm5ldF9ucywNCisJCQkJICAgZGV2LT5kZXZfYWRkci5JcC5BZGRyZXNz
LmlwNCwgcG9ydCwgZGV2LA0KKwkJCQkgICBtYXVzYl9pcF9jYWxsYmFjaywgY2hhbm5lbCk7DQor
CWlmIChzdGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkluaXQgaXAgY29udGV4dCBmYWls
ZWQgd2l0aCBlcnJvcj0lZCIsIHN0YXR1cyk7DQorCQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZk
ZXYtPnNvY2tldF9kaXNjb25uZWN0X3dvcmspOw0KKwkJcmV0dXJuOw0KKwl9DQorDQorCWRldi0+
Y2hhbm5lbF9tYXBbY2hhbm5lbF0gPSAqaXBfY3R4Ow0KKwltYXVzYl9pcF9jb25uZWN0X2FzeW5j
KCppcF9jdHgpOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9jb25uZWN0X2NhbGxiYWNrKHN0
cnVjdCBtYXVzYl9kZXZpY2UgKmRldiwgZW51bSBtYXVzYl9jaGFubmVsDQorCQkJCWNoYW5uZWws
IGludCBzdGF0dXMpDQorew0KKwltYXVzYl9wcl9pbmZvKCJDb25uZWN0IGNhbGxiYWNrIGZvciBj
aGFubmVsPSVkIHdpdGggc3RhdHVzPSVkIiwNCisJCSAgICAgIGNoYW5uZWwsIHN0YXR1cyk7DQor
DQorCWlmIChzdGF0dXMgPCAwKSB7DQorCQlxdWV1ZV93b3JrKGRldi0+d29ya3EsICZkZXYtPnNv
Y2tldF9kaXNjb25uZWN0X3dvcmspOw0KKwkJcmV0dXJuOw0KKwl9DQorDQorCWlmIChjaGFubmVs
ID09IE1BVVNCX01HTVRfQ0hBTk5FTCkgew0KKwkJaWYgKGRldi0+ZGV2X2FkZHIuSXAuUG9ydC5j
b250cm9sID09IDApIHsNCisJCQlkZXYtPmNoYW5uZWxfbWFwW01BVVNCX0NUUkxfQ0hBTk5FTF0g
PQ0KKwkJCQlkZXYtPm1nbXRfY2hhbm5lbDsNCisJCQljaGFubmVsID0gTUFVU0JfQ1RSTF9DSEFO
TkVMOw0KKwkJfSBlbHNlIHsNCisJCQltYXVzYl9pbml0X2lwX2N0eF9oZWxwZXIoZGV2LCAmZGV2
LT5jdHJsX2NoYW5uZWwsDQorCQkJCQlkZXYtPmRldl9hZGRyLklwLlBvcnQuY29udHJvbCwNCisJ
CQkJCU1BVVNCX0NUUkxfQ0hBTk5FTCk7DQorCQkJcmV0dXJuOw0KKwkJfQ0KKwl9DQorDQorCWlm
IChjaGFubmVsID09IE1BVVNCX0NUUkxfQ0hBTk5FTCkgew0KKwkJaWYgKGRldi0+ZGV2X2FkZHIu
SXAuUG9ydC5idWxrID09IDApIHsNCisJCQlkZXYtPmNoYW5uZWxfbWFwW01BVVNCX0JVTEtfQ0hB
Tk5FTF0gPQ0KKwkJCQlkZXYtPmNoYW5uZWxfbWFwW01BVVNCX0NUUkxfQ0hBTk5FTF07DQorCQkJ
Y2hhbm5lbCA9IE1BVVNCX0JVTEtfQ0hBTk5FTDsNCisJCX0gZWxzZSB7DQorCQkJbWF1c2JfaW5p
dF9pcF9jdHhfaGVscGVyKGRldiwgJmRldi0+YnVsa19jaGFubmVsLA0KKwkJCQkJZGV2LT5kZXZf
YWRkci5JcC5Qb3J0LmJ1bGssDQorCQkJCQlNQVVTQl9CVUxLX0NIQU5ORUwpOw0KKwkJCXJldHVy
bjsNCisJCX0NCisJfQ0KKw0KKwlpZiAoY2hhbm5lbCA9PSBNQVVTQl9CVUxLX0NIQU5ORUwpIHsN
CisJCWlmIChkZXYtPmRldl9hZGRyLklwLlBvcnQuaXNvY2hyb25vdXMgPT0gMCkgew0KKwkJCS8q
IGlmIHRoZXJlIGlzIG5vIGlzb2NoIHBvcnQgdXNlIHRjcCBmb3IgaXQgKi8NCisJCQlkZXYtPmNo
YW5uZWxfbWFwW01BVVNCX0lTT0NIX0NIQU5ORUxdID0NCisJCQkJZGV2LT5jaGFubmVsX21hcFtN
QVVTQl9CVUxLX0NIQU5ORUxdOw0KKwkJCWNoYW5uZWwgPSBNQVVTQl9JU09DSF9DSEFOTkVMOw0K
KwkJfSBlbHNlIHsNCisJCQltYXVzYl9pbml0X2lwX2N0eF9oZWxwZXIoZGV2LCAmZGV2LT5pc29j
aF9jaGFubmVsLA0KKwkJCQkJZGV2LT5kZXZfYWRkci5JcC5Qb3J0Lmlzb2Nocm9ub3VzLA0KKwkJ
CQkJTUFVU0JfSVNPQ0hfQ0hBTk5FTCk7DQorCQkJcmV0dXJuOw0KKwkJfQ0KKwl9DQorDQorCWlm
IChjaGFubmVsID09IE1BVVNCX0lTT0NIX0NIQU5ORUwpIHsNCisJCWRldi0+Y2hhbm5lbF9tYXBb
TUFVU0JfSU5UUl9DSEFOTkVMXSA9DQorCQkJCWRldi0+Y2hhbm5lbF9tYXBbTUFVU0JfQ1RSTF9D
SEFOTkVMXTsNCisJCW1hdXNiX29uX21hZGV2X2Nvbm5lY3RlZChkZXYpOw0KKwl9DQorfQ0KKw0K
K3N0YXRpYyB2b2lkIG1hdXNiX2hhbmRsZV9jb25uZWN0X2V2ZW50KHN0cnVjdCBtYXVzYl9kZXZp
Y2UgKmRldiwNCisJCQkJICAgICAgIGVudW0gbWF1c2JfY2hhbm5lbCBjaGFubmVsLCBpbnQgc3Rh
dHVzLA0KKwkJCQkgICAgICAgdm9pZCAqZGF0YSkNCit7DQorCW1hdXNiX2Nvbm5lY3RfY2FsbGJh
Y2soZGV2LCBjaGFubmVsLCBzdGF0dXMpOw0KK30NCisNCitzdGF0aWMgdm9pZCBtYXVzYl9oYW5k
bGVfcmVjZWl2ZV9ldmVudChzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYsDQorCQkJCSAgICAgICBl
bnVtIG1hdXNiX2NoYW5uZWwgY2hhbm5lbCwgaW50IHN0YXR1cywNCisJCQkJICAgICAgIHZvaWQg
KmRhdGEpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZXZlbnQgZXZlbnQ7DQorDQorCWV2ZW50Lm1hZGV2
X2FkZHIgPSBkZXYtPm1hZGV2X2FkZHI7DQorDQorCWlmIChzdGF0dXMgPD0gMCkgew0KKwkJbWF1
c2JfcHJfZXJyKCJSZWNlaXZlIGV2ZW50IGVycm9yIHN0YXR1cz0lZCIsIHN0YXR1cyk7DQorCQlx
dWV1ZV93b3JrKGRldi0+d29ya3EsICZkZXYtPnNvY2tldF9kaXNjb25uZWN0X3dvcmspOw0KKwkJ
cXVldWVfd29yayhkZXYtPndvcmtxLCAmZGV2LT5oY2RfZGlzY29ubmVjdF93b3JrKTsNCisJCXJl
dHVybjsNCisJfQ0KKw0KKwltYXVzYl9yZXNldF9jb25uZWN0aW9uX3RpbWVyKGRldik7DQorDQor
CXN0YXR1cyA9IG1hdXNiX21zZ19yZWNlaXZlZF9ldmVudCgmZXZlbnQsDQorCQkJCQkgIChzdHJ1
Y3QgbWFfdXNiX2hkcl9jb21tb24gKilkYXRhLA0KKwkJCQkJICBjaGFubmVsKTsNCisNCisJaWYg
KHN0YXR1cyA9PSAwKQ0KKwkJc3RhdHVzID0gbWF1c2JfZW5xdWV1ZV9ldmVudF90b191c2VyKGRl
diwgJmV2ZW50KTsNCisNCisJaWYgKHN0YXR1cyA8IDApIHsNCisJCW1hdXNiX3ByX2VycigiRmFp
bGVkIHRvIGVucXVldWUsIHN0YXR1cz0lZCIsIHN0YXR1cyk7DQorCQlxdWV1ZV93b3JrKGRldi0+
d29ya3EsICZkZXYtPnNvY2tldF9kaXNjb25uZWN0X3dvcmspOw0KKwkJcXVldWVfd29yayhkZXYt
PndvcmtxLCAmZGV2LT5oY2RfZGlzY29ubmVjdF93b3JrKTsNCisJCXJldHVybjsNCisJfQ0KK30N
CisNCit2b2lkIG1hdXNiX2lwX2NhbGxiYWNrKHZvaWQgKmN0eCwgZW51bSBtYXVzYl9jaGFubmVs
IGNoYW5uZWwsDQorCQkgICAgICAgZW51bSBtYXVzYl9saW5rX2FjdGlvbiBhY3Rpb24sIGludCBz
dGF0dXMsIHZvaWQgKmRhdGEpDQorew0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlICpkZXYgPSAoc3Ry
dWN0IG1hdXNiX2RldmljZSAqKWN0eDsNCisNCisJc3dpdGNoIChhY3Rpb24pIHsNCisJY2FzZSBN
QVVTQl9MSU5LX0NPTk5FQ1Q6DQorCQltYXVzYl9oYW5kbGVfY29ubmVjdF9ldmVudChkZXYsIGNo
YW5uZWwsIHN0YXR1cywgZGF0YSk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9MSU5LX1NFTkQ6
DQorCQkvKg0KKwkJICogQ3VycmVudGx5IHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8sIGFzIHNlbmQg
b3BlcmF0aW9uIGlzDQorCQkgKiBzeW5jaHJvbm91cw0KKwkJICovDQorCQlicmVhazsNCisJY2Fz
ZSBNQVVTQl9MSU5LX1JFQ1Y6DQorCQltYXVzYl9oYW5kbGVfcmVjZWl2ZV9ldmVudChkZXYsIGNo
YW5uZWwsIHN0YXR1cywgZGF0YSk7DQorCQlicmVhazsNCisJY2FzZSBNQVVTQl9MSU5LX0RJU0NP
Tk5FQ1Q6DQorCQkvKg0KKwkJICogQ3VycmVudGx5IHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8sIGFz
IGRpc2Nvbm5lY3Qgb3BlcmF0aW9uIGlzDQorCQkgKiBzeW5jaHJvbm91cw0KKwkJICovDQorCQli
cmVhazsNCisJZGVmYXVsdDoNCisJCW1hdXNiX3ByX3dhcm4oIlVua25vd24gbmV0d29yayBhY3Rp
b24iKTsNCisJfQ0KK30NCmRpZmYgLS1naXQgYS9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9z
cmMvbGluay9tYXVzYl9pcF9saW5rLmMgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMv
bGluay9tYXVzYl9pcF9saW5rLmMNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQppbmRleCAwMDAwMDAw
MDAwMDAuLmMyMGIxMThjNDk4OQ0KLS0tIC9kZXYvbnVsbA0KKysrIGIvZHJpdmVycy9zdGFnaW5n
L21hdXNiX2hvc3Qvc3JjL2xpbmsvbWF1c2JfaXBfbGluay5jDQpAQCAtMCwwICsxLDM2NCBAQA0K
Ky8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wDQorLyoNCisgKiBDb3B5cmlnaHQg
KGMpIDIwMTkgLSAyMDIwIERpc3BsYXlMaW5rIChVSykgTHRkLg0KKyAqDQorICogVGhpcyBmaWxl
IGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBHTlUgR2VuZXJh
bCBQdWJsaWMNCisgKiBMaWNlbnNlIHYyLiBTZWUgdGhlIGZpbGUgQ09QWUlORyBpbiB0aGUgbWFp
biBkaXJlY3Rvcnkgb2YgdGhpcyBhcmNoaXZlIGZvcg0KKyAqIG1vcmUgZGV0YWlscy4NCisgKi8N
CisjaW5jbHVkZSAibGluay9tYXVzYl9pcF9saW5rLmgiDQorDQorI2luY2x1ZGUgPGxpbnV4L2lu
Lmg+DQorI2luY2x1ZGUgPGxpbnV4L2luZXQuaD4NCisjaW5jbHVkZSA8bGludXgvamlmZmllcy5o
Pg0KKyNpbmNsdWRlIDxsaW51eC9uZXQuaD4NCisjaW5jbHVkZSA8bGludXgva2VybmVsLmg+DQor
I2luY2x1ZGUgPGxpbnV4L3NrYnVmZi5oPg0KKyNpbmNsdWRlIDxsaW51eC9zb2NrZXQuaD4NCisj
aW5jbHVkZSA8bGludXgvdmVyc2lvbi5oPg0KKyNpbmNsdWRlIDxsaW51eC93b3JrcXVldWUuaD4N
CisjaW5jbHVkZSA8bmV0L3RjcC5oPg0KKyNpbmNsdWRlIDxuZXQvc29jay5oPg0KKw0KKyNpbmNs
dWRlICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorDQorc3RhdGljIHZvaWQgX19tYXVzYl9pcF9jb25u
ZWN0KHN0cnVjdCB3b3JrX3N0cnVjdCAqd29yayk7DQorc3RhdGljIGludCBfX21hdXNiX2lwX3Jl
Y3Yoc3RydWN0IG1hdXNiX2lwX2N0eCAqaXBfY3R4KTsNCitzdGF0aWMgdm9pZCBfX21hdXNiX2lw
X3JlY3Zfd29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspOw0KK3N0YXRpYyBpbmxpbmUgdm9p
ZCBfX21hdXNiX2lwX3JlY3ZfY3R4X2NsZWFyKHN0cnVjdCBtYXVzYl9pcF9yZWN2X2N0eA0KKwkJ
CQkJICAgICAqcmVjdl9jdHgpOw0KK3N0YXRpYyBpbmxpbmUgdm9pZCBfX21hdXNiX2lwX3JlY3Zf
Y3R4X2ZyZWUoc3RydWN0IG1hdXNiX2lwX3JlY3ZfY3R4DQorCQkJCQkgICAgKnJlY3ZfY3R4KTsN
CisNCitpbnQgbWF1c2JfaW5pdF9pcF9jdHgoc3RydWN0IG1hdXNiX2lwX2N0eCAqKmlwX2N0eCwN
CisJCSAgICAgIHN0cnVjdCBuZXQgKm5ldF9ucywNCisJCSAgICAgIGNoYXIgaXBfYWRkcltJTkVU
Nl9BRERSU1RSTEVOXSwNCisJCSAgICAgIHVpbnQxNl90IHBvcnQsIHZvaWQgKmNvbnRleHQsDQor
CQkgICAgICB2b2lkICgqZm5fY2FsbGJhY2spKHZvaWQgKmN0eCwgZW51bSBtYXVzYl9jaGFubmVs
IGNoYW5uZWwsDQorCQkJCQkgIGVudW0gbWF1c2JfbGlua19hY3Rpb24gYWN0LA0KKwkJCQkJICBp
bnQgc3RhdHVzLCB2b2lkICpkYXRhKSwNCisJCSAgICAgIGVudW0gbWF1c2JfY2hhbm5lbCBjaGFu
bmVsKQ0KK3sNCisJc3RydWN0IG1hdXNiX2lwX2N0eCAqY3R4Ow0KKwkqaXBfY3R4ID0ga3phbGxv
YyhzaXplb2YoKippcF9jdHgpLCBHRlBfQVRPTUlDKTsNCisJaWYgKHVubGlrZWx5KCppcF9jdHgg
PT0gTlVMTCkpIHsNCisJCW1hdXNiX3ByX2FsZXJ0KCJpcCBjb250ZXh0IGFsbG9jYXRpb24gZmFp
bGVkIik7DQorCQlyZXR1cm4gLUVOT01FTTsNCisJfQ0KKwljdHggPSAqaXBfY3R4Ow0KKwljdHgt
PmNsaWVudF9zb2NrZXQgPSBOVUxMOw0KKwlfX21hdXNiX2lwX3JlY3ZfY3R4X2NsZWFyKCZjdHgt
PnJlY3ZfY3R4KTsNCisJLyogc29tZXRoaW5nIHNhZmVyIHRoYW4gc3RyY3B5ICovDQorCXN0cmNw
eShjdHgtPmlwX2FkZHIsIGlwX2FkZHIpOw0KKwljdHgtPnBvcnQgPSBwb3J0Ow0KKwljdHgtPm5l
dF9ucyA9IG5ldF9uczsNCisNCisJaWYgKGNoYW5uZWwgPT0gTUFVU0JfSVNPQ0hfQ0hBTk5FTCkN
CisJCWN0eC0+dWRwID0gdHJ1ZTsNCisNCisJY3R4LT5jb25uZWN0X3dvcmtxID0gYWxsb2Nfb3Jk
ZXJlZF93b3JrcXVldWUoImNvbm5lY3Rfd29ya3EiLA0KKwkJCQkJCSAgICAgV1FfTUVNX1JFQ0xB
SU0pOw0KKwlpZiAoIWN0eC0+Y29ubmVjdF93b3JrcSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoImNv
bm5lY3Rfd29ya3EgYWxsb2MgZmFpbGVkIik7DQorCQlrZnJlZShjdHgpOw0KKwkJcmV0dXJuIC1F
Tk9NRU07DQorCX0NCisNCisJY3R4LT5yZWN2X3dvcmtxID0NCisJICAgIGFsbG9jX29yZGVyZWRf
d29ya3F1ZXVlKCJyZWN2X3dvcmtxIiwgV1FfTUVNX1JFQ0xBSU0pOw0KKwlpZiAoIWN0eC0+cmVj
dl93b3JrcSkgew0KKwkJbWF1c2JfcHJfYWxlcnQoInNlbmRfcmVjdl93b3JrcSBhbGxvYyBmYWls
ZWQiKTsNCisJCWRlc3Ryb3lfd29ya3F1ZXVlKGN0eC0+Y29ubmVjdF93b3JrcSk7DQorCQlrZnJl
ZShjdHgpOw0KKwkJcmV0dXJuIC1FTk9NRU07DQorCX0NCisNCisJSU5JVF9XT1JLKCZjdHgtPmNv
bm5lY3Rfd29yaywgX19tYXVzYl9pcF9jb25uZWN0KTsNCisJSU5JVF9XT1JLKCZjdHgtPnJlY3Zf
d29yaywgX19tYXVzYl9pcF9yZWN2X3dvcmspOw0KKw0KKwljdHgtPmNoYW5uZWwJID0gY2hhbm5l
bDsNCisJY3R4LT5jdHgJID0gY29udGV4dDsNCisJY3R4LT5mbl9jYWxsYmFjayA9IGZuX2NhbGxi
YWNrOw0KKw0KKwlyZXR1cm4gMDsNCit9DQorDQordm9pZCBtYXVzYl9kZXN0cm95X2lwX2N0eChz
dHJ1Y3QgbWF1c2JfaXBfY3R4ICppcF9jdHgpDQorew0KKwlpZiAoIWlwX2N0eCkNCisJCXJldHVy
bjsNCisNCisJaWYgKGlwX2N0eC0+Y29ubmVjdF93b3JrcSkgew0KKwkJZmx1c2hfd29ya3F1ZXVl
KGlwX2N0eC0+Y29ubmVjdF93b3JrcSk7DQorCQlkZXN0cm95X3dvcmtxdWV1ZShpcF9jdHgtPmNv
bm5lY3Rfd29ya3EpOw0KKwl9DQorDQorCWlmIChpcF9jdHgtPnJlY3Zfd29ya3EpIHsNCisJCWZs
dXNoX3dvcmtxdWV1ZShpcF9jdHgtPnJlY3Zfd29ya3EpOw0KKwkJZGVzdHJveV93b3JrcXVldWUo
aXBfY3R4LT5yZWN2X3dvcmtxKTsNCisJfQ0KKwlpZiAoaXBfY3R4LT5jbGllbnRfc29ja2V0KQ0K
KwkJc29ja19yZWxlYXNlKGlwX2N0eC0+Y2xpZW50X3NvY2tldCk7DQorCV9fbWF1c2JfaXBfcmVj
dl9jdHhfZnJlZSgmaXBfY3R4LT5yZWN2X2N0eCk7DQorDQorCWtmcmVlKGlwX2N0eCk7DQorfQ0K
Kw0KK3N0YXRpYyB2b2lkIF9fbWF1c2JfaXBfc2V0X29wdGlvbnMoc3RydWN0IHNvY2tldCAqc29j
aywgYm9vbCB1ZHApDQorew0KKwl1aW50MzJfdCBvcHR2YWwgPSAwOw0KKwl1bnNpZ25lZCBpbnQg
b3B0bGVuID0gc2l6ZW9mKG9wdHZhbCk7DQorCWludCBzdGF0dXMgPSAwOw0KKwlzdHJ1Y3QgdGlt
ZXZhbCB0aW1lbyA9IHsudHZfc2VjID0gMCwgLnR2X3VzZWMgPSA1MDAwMDBVIH07DQorCXN0cnVj
dCB0aW1ldmFsIHNlbmRfdGltZW8gPSB7LnR2X3NlYyA9IDEsIC50dl91c2VjID0gMCB9Ow0KKw0K
KwlpZiAoIXVkcCkgew0KKwkJb3B0dmFsID0gMTsNCisJCXN0YXR1cyA9IGtlcm5lbF9zZXRzb2Nr
b3B0KHNvY2ssIElQUFJPVE9fVENQLCBUQ1BfTk9ERUxBWSwNCisJCQkJCSAgKGNoYXIgKikmb3B0
dmFsLCBvcHRsZW4pOw0KKwkJaWYgKHN0YXR1cyA8IDApDQorCQkJbWF1c2JfcHJfd2FybigiRmFp
bGVkIHRvIHNldCB0Y3Agbm8gZGVsYXkgb3B0aW9uOiBzdGF0dXM9JWQiLA0KKwkJCQlzdGF0dXMp
Ow0KKwl9DQorDQorCXN0YXR1cyA9IGtlcm5lbF9zZXRzb2Nrb3B0KHNvY2ssIFNPTF9TT0NLRVQs
IFNPX1JDVlRJTUVPX05FVywNCisJCQkJICAoY2hhciAqKSZ0aW1lbywgc2l6ZW9mKHRpbWVvKSk7
DQorCWlmIChzdGF0dXMgPCAwKQ0KKwkJbWF1c2JfcHJfd2FybigiRmFpbGVkIHRvIHNldCByZWN2
IHRpbWVvdXQgb3B0aW9uOiBzdGF0dXM9JWQiLA0KKwkJCXN0YXR1cyk7DQorDQorCXN0YXR1cyA9
IGtlcm5lbF9zZXRzb2Nrb3B0KHNvY2ssIFNPTF9TT0NLRVQsIFNPX1NORFRJTUVPX05FVywNCisJ
CQkJICAoY2hhciAqKSZzZW5kX3RpbWVvLCBzaXplb2Yoc2VuZF90aW1lbykpOw0KKwlpZiAoc3Rh
dHVzIDwgMCkNCisJCW1hdXNiX3ByX3dhcm4oIkZhaWxlZCB0byBzZXQgc25kIHRpbWVvdXQgb3B0
aW9uOiBzdGF0dXM9JWQiLA0KKwkJCSAgICAgIHN0YXR1cyk7DQorDQorCW9wdHZhbCA9IE1BVVNC
X0xJTktfQlVGRl9TSVpFOw0KKwlzdGF0dXMgID0ga2VybmVsX3NldHNvY2tvcHQoc29jaywgU09M
X1NPQ0tFVCwgU09fUkNWQlVGLA0KKwkJCQkgICAoY2hhciAqKSAmb3B0dmFsLCBvcHRsZW4pOw0K
KwlpZiAoc3RhdHVzIDwgMCkNCisJCW1hdXNiX3ByX3dhcm4oIkZhaWxlZCB0byBzZXQgcmVjdiBi
dWZmZXIgc2l6ZTogc3RhdHVzPSVkIiwNCisJCQkgICAgICBzdGF0dXMpOw0KKw0KKwlvcHR2YWwg
PSBNQVVTQl9MSU5LX0JVRkZfU0laRTsNCisJc3RhdHVzICA9IGtlcm5lbF9zZXRzb2Nrb3B0KHNv
Y2ssIFNPTF9TT0NLRVQsIFNPX1NOREJVRiwNCisJCQkJICAgKGNoYXIgKikgJm9wdHZhbCwgb3B0
bGVuKTsNCisJaWYgKHN0YXR1cyA8IDApDQorCQltYXVzYl9wcl93YXJuKCJGYWlsZWQgdG8gc2V0
IHNlbmQgYnVmZmVyIHNpemU6IHN0YXR1cz0lZCIsDQorCQkJICAgICAgc3RhdHVzKTsNCisNCisJ
b3B0dmFsID0gTUFVU0JfTElOS19UT1NfTEVWRUxfRUY7DQorCXN0YXR1cyAgPSBrZXJuZWxfc2V0
c29ja29wdChzb2NrLCBJUFBST1RPX0lQLCBJUF9UT1MsDQorCQkJCSAgIChjaGFyICopICZvcHR2
YWwsIG9wdGxlbik7DQorCWlmIChzdGF0dXMgPCAwKQ0KKwkJbWF1c2JfcHJfd2FybigiRmFpbGVk
IHRvIHNldCBRT1M6IHN0YXR1cz0lZCIsIHN0YXR1cyk7DQorDQorfQ0KKw0KK3N0YXRpYyB2b2lk
IF9fbWF1c2JfaXBfY29ubmVjdChzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQorew0KKwlzdHJ1
Y3Qgc29ja2FkZHJfaW4gc29ja2FkZHI7DQorCWludCBzdGF0dXMgPSAwOw0KKw0KKwlzdHJ1Y3Qg
bWF1c2JfaXBfY3R4ICppcF9jdHggPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IG1hdXNiX2lw
X2N0eCwNCisJCQkJCQkgICBjb25uZWN0X3dvcmspOw0KKw0KKwlpZiAoIWlwX2N0eC0+dWRwKSB7
DQorCQlzdGF0dXMgPSBzb2NrX2NyZWF0ZV9rZXJuKGlwX2N0eC0+bmV0X25zLCBBRl9JTkVULCBT
T0NLX1NUUkVBTSwNCisJCQkJCSAgSVBQUk9UT19UQ1AsICZpcF9jdHgtPmNsaWVudF9zb2NrZXQp
Ow0KKwkJaWYgKHN0YXR1cyA8IDApIHsNCisJCQltYXVzYl9wcl9lcnIoIkZhaWxlZCB0byBjcmVh
dGUgc29ja2V0OiBzdGF0dXM9JWQiLA0KKwkJCQkgICAgIHN0YXR1cyk7DQorCQkJZ290byBjYWxs
YmFjazsNCisJCX0NCisJfSBlbHNlIHsNCisJCXN0YXR1cyA9IHNvY2tfY3JlYXRlX2tlcm4oaXBf
Y3R4LT5uZXRfbnMsIEFGX0lORVQsIFNPQ0tfREdSQU0sDQorCQkJCQkgIElQUFJPVE9fVURQLCAm
aXBfY3R4LT5jbGllbnRfc29ja2V0KTsNCisJCWlmIChzdGF0dXMgPCAwKSB7DQorCQkJbWF1c2Jf
cHJfZXJyKCJGYWlsZWQgdG8gY3JlYXRlIHNvY2tldDogc3RhdHVzPSVkIiwNCisJCQkJICAgICBz
dGF0dXMpOw0KKwkJCWdvdG8gY2FsbGJhY2s7DQorCQl9DQorCX0NCisNCisJbWVtc2V0KCZzb2Nr
YWRkciwgMCwgc2l6ZW9mKHNvY2thZGRyKSk7DQorCXNvY2thZGRyLnNpbl9mYW1pbHkJID0gQUZf
SU5FVDsNCisJc29ja2FkZHIuc2luX3BvcnQJID0gaHRvbnMoaXBfY3R4LT5wb3J0KTsNCisJc29j
a2FkZHIuc2luX2FkZHIuc19hZGRyID0gaW5fYXRvbihpcF9jdHgtPmlwX2FkZHIpOw0KKw0KKwlf
X21hdXNiX2lwX3NldF9vcHRpb25zKChzdHJ1Y3Qgc29ja2V0ICopaXBfY3R4LT5jbGllbnRfc29j
a2V0LA0KKwkJCSAgICAgICBpcF9jdHgtPnVkcCk7DQorDQorCXN0YXR1cyA9IGtlcm5lbF9jb25u
ZWN0KGlwX2N0eC0+Y2xpZW50X3NvY2tldCwNCisJCQkJKHN0cnVjdCBzb2NrYWRkciAqKSZzb2Nr
YWRkciwgc2l6ZW9mKHNvY2thZGRyKSwNCisJCQkJT19SRFdSKTsNCisJaWYgKHN0YXR1cyA8IDAp
IHsNCisJCW1hdXNiX3ByX2VycigiRmFpbGVkIHRvIGNvbm5lY3QgdG8gaG9zdCAlczolZCwgc3Rh
dHVzPSVkIiwNCisJCQkgICAgIGlwX2N0eC0+aXBfYWRkciwgaXBfY3R4LT5wb3J0LCBzdGF0dXMp
Ow0KKwkJZ290byBjbGVhcl9zb2NrZXQ7DQorCX0NCisNCisJcXVldWVfd29yayhpcF9jdHgtPnJl
Y3Zfd29ya3EsICZpcF9jdHgtPnJlY3Zfd29yayk7DQorCW1hdXNiX3ByX2luZm8oIkNvbmVjdGVk
IHRvIGhvc3QgJXM6JWQsIHN0YXR1cz0lZCIsIGlwX2N0eC0+aXBfYWRkciwNCisJCQkJCQkJICAg
aXBfY3R4LT5wb3J0LA0KKwkJCQkJCQkgICBzdGF0dXMpOw0KKw0KKwlnb3RvIGNhbGxiYWNrOw0K
Kw0KK2NsZWFyX3NvY2tldDoNCisJc29ja19yZWxlYXNlKGlwX2N0eC0+Y2xpZW50X3NvY2tldCk7
DQorCWlwX2N0eC0+Y2xpZW50X3NvY2tldCA9IE5VTEw7DQorY2FsbGJhY2s6DQorCWlwX2N0eC0+
Zm5fY2FsbGJhY2soaXBfY3R4LT5jdHgsIGlwX2N0eC0+Y2hhbm5lbCwgTUFVU0JfTElOS19DT05O
RUNULA0KKwkJCSAgICBzdGF0dXMsIE5VTEwpOw0KK30NCisNCit2b2lkIG1hdXNiX2lwX2Nvbm5l
Y3RfYXN5bmMoc3RydWN0IG1hdXNiX2lwX2N0eCAqaXBfY3R4KQ0KK3sNCisJcXVldWVfd29yayhp
cF9jdHgtPmNvbm5lY3Rfd29ya3EsICZpcF9jdHgtPmNvbm5lY3Rfd29yayk7DQorfQ0KKw0KK2lu
dCBtYXVzYl9pcF9kaXNjb25uZWN0KHN0cnVjdCBtYXVzYl9pcF9jdHggKmlwX2N0eCkNCit7DQor
CWludCBzdGF0dXMgPSAwOw0KKw0KKwlpZiAoaXBfY3R4ICYmIGlwX2N0eC0+Y2xpZW50X3NvY2tl
dCkNCisJCXN0YXR1cyA9IGtlcm5lbF9zb2NrX3NodXRkb3duKGlwX2N0eC0+Y2xpZW50X3NvY2tl
dCwgU0hVVF9SRFdSKTsNCisJcmV0dXJuIHN0YXR1czsNCit9DQorDQoraW50IG1hdXNiX2lwX3Nl
bmQoc3RydWN0IG1hdXNiX2lwX2N0eCAqaXBfY3R4LA0KKwkJICBzdHJ1Y3QgbWF1c2Jfa3ZlY19k
YXRhX3dyYXBwZXIgKndyYXBwZXIpDQorew0KKwlzdHJ1Y3QgbXNnaGRyIG1zZ2hkOw0KKwlpbnQg
c3RhdHVzOw0KKw0KKwlpZiAoIWlwX2N0eCkgew0KKwkJbWF1c2JfcHJfYWxlcnQoIlNvY2tldCBj
dHggaXMgTlVMTCEiKTsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCW1lbXNldCgmbXNn
aGQsIDAsIHNpemVvZihtc2doZCkpOw0KKwltc2doZC5tc2dfZmxhZ3MgPSBNU0dfV0FJVEFMTDsN
CisNCisJc3RhdHVzID0ga2VybmVsX3NlbmRtc2coaXBfY3R4LT5jbGllbnRfc29ja2V0LCAmbXNn
aGQsIHdyYXBwZXItPmt2ZWMsDQorCQkJCXdyYXBwZXItPmt2ZWNfbnVtLCB3cmFwcGVyLT5sZW5n
dGgpOw0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitzdGF0aWMgaW5saW5lIHZvaWQgX19t
YXVzYl9pcF9yZWN2X2N0eF9jbGVhcihzdHJ1Y3QgbWF1c2JfaXBfcmVjdl9jdHggKnJlY3ZfY3R4
KQ0KK3sNCisJcmVjdl9jdHgtPmJ1ZmZlciAgID0gTlVMTDsNCisJcmVjdl9jdHgtPmxlZnQJICAg
PSAwOw0KKwlyZWN2X2N0eC0+cmVjZWl2ZWQgPSAwOw0KK30NCisNCitzdGF0aWMgaW5saW5lIHZv
aWQgX19tYXVzYl9pcF9yZWN2X2N0eF9mcmVlKHN0cnVjdCBtYXVzYl9pcF9yZWN2X2N0eCAqcmVj
dl9jdHgpDQorew0KKwlrZnJlZShyZWN2X2N0eC0+YnVmZmVyKTsNCisJX19tYXVzYl9pcF9yZWN2
X2N0eF9jbGVhcihyZWN2X2N0eCk7DQorfQ0KKw0KK3N0YXRpYyBpbnQgX19tYXVzYl9pcF9yZWN2
KHN0cnVjdCBtYXVzYl9pcF9jdHggKmlwX2N0eCkNCit7DQorCXN0cnVjdCBtc2doZHIgbXNnaGQ7
DQorCXN0cnVjdCBrdmVjIHZlYzsNCisJaW50ICBzdGF0dXM7DQorCWJvb2wgcGVlayA9IHRydWU7
DQorCXVuc2lnbmVkIGludCBvcHR2YWwgPSAxOw0KKw0KKwkvKiByZWNlaXZlIHdpdGggdGltZW91
dCBvZiAwLjVzICovDQorCXdoaWxlICh0cnVlKSB7DQorCQltZW1zZXQoJm1zZ2hkLCAwLCBzaXpl
b2YobXNnaGQpKTsNCisJCWlmIChwZWVrKSB7DQorCQkJdmVjLmlvdl9iYXNlID0gaXBfY3R4LT5y
ZWN2X2N0eC5jb21tb25faGRyOw0KKwkJCXZlYy5pb3ZfbGVuICA9IHNpemVvZihpcF9jdHgtPnJl
Y3ZfY3R4LmNvbW1vbl9oZHIpOw0KKwkJCW1zZ2hkLm1zZ19mbGFncyA9IE1TR19QRUVLOw0KKwkJ
fSBlbHNlIHsNCisJCQl2ZWMuaW92X2Jhc2UgPQ0KKwkJCSAgICBpcF9jdHgtPnJlY3ZfY3R4LmJ1
ZmZlciArDQorCQkJICAgIGlwX2N0eC0+cmVjdl9jdHgucmVjZWl2ZWQ7DQorCQkJdmVjLmlvdl9s
ZW4gPSBpcF9jdHgtPnJlY3ZfY3R4LmxlZnQ7DQorCQkJbXNnaGQubXNnX2ZsYWdzID0gTVNHX1dB
SVRBTEw7DQorCQl9DQorDQorCQlpZiAoIWlwX2N0eC0+dWRwKSB7DQorCQkJc3RhdHVzID0ga2Vy
bmVsX3NldHNvY2tvcHQoDQorCQkJCQkoc3RydWN0IHNvY2tldCAqKWlwX2N0eC0+Y2xpZW50X3Nv
Y2tldCwNCisJCQkJCUlQUFJPVE9fVENQLCBUQ1BfUVVJQ0tBQ0ssDQorCQkJCQkoY2hhciAqKSAm
b3B0dmFsLCBzaXplb2Yob3B0dmFsKSk7DQorCQkJaWYgKHN0YXR1cyAhPSAwKSB7DQorCQkJCW1h
dXNiX3ByX3dhcm4oIlNldHRpbmcgVENQX1FVSUNLQUNLIGZhaWxlZDogJXM6JWQsIHN0YXR1cz0l
ZCIsDQorCQkJCQkgICAgICBpcF9jdHgtPmlwX2FkZHIsIGlwX2N0eC0+cG9ydCwNCisJCQkJCSAg
ICAgIHN0YXR1cyk7DQorCQkJfQ0KKwkJfQ0KKw0KKwkJc3RhdHVzID0NCisJCSAgICBrZXJuZWxf
cmVjdm1zZygoc3RydWN0IHNvY2tldCAqKWlwX2N0eC0+Y2xpZW50X3NvY2tldCwNCisJCQkJICAg
Jm1zZ2hkLCAmdmVjLCAxLCB2ZWMuaW92X2xlbiwNCisJCQkJICAgbXNnaGQubXNnX2ZsYWdzKTsN
CisNCisJCWlmIChzdGF0dXMgPT0gLUVBR0FJTikgew0KKwkJCXJldHVybiBzdGF0dXM7DQorCQl9
IGVsc2UgaWYgKHN0YXR1cyA8PSAwKSB7DQorCQkJbWF1c2JfcHJfd2Fybigia2VybmVsX3JlY3Zt
c2cgaG9zdCAlczolZCwgc3RhdHVzPSVkIiwNCisJCQkJICAgICAgaXBfY3R4LT5pcF9hZGRyLCBp
cF9jdHgtPnBvcnQsIHN0YXR1cyk7DQorDQorCQkJX19tYXVzYl9pcF9yZWN2X2N0eF9mcmVlKCZp
cF9jdHgtPnJlY3ZfY3R4KTsNCisJCQlpcF9jdHgtPmZuX2NhbGxiYWNrKGlwX2N0eC0+Y3R4LCBp
cF9jdHgtPmNoYW5uZWwsDQorCQkJCQkgICAgTUFVU0JfTElOS19SRUNWLCBzdGF0dXMsIE5VTEwp
Ow0KKwkJCXJldHVybiBzdGF0dXM7DQorDQorCQl9IGVsc2Ugew0KKwkJCW1hdXNiX3ByX2RlYnVn
KCJrZXJuZWxfcmVjdm1zZyBob3N0ICVzOiVkLCBzdGF0dXM9JWQiLA0KKwkJCQkgICAgICAgaXBf
Y3R4LT5pcF9hZGRyLCBpcF9jdHgtPnBvcnQsIHN0YXR1cyk7DQorCQl9DQorDQorCQlpZiAocGVl
aykgew0KKwkJCWlmIChzdGF0dXMgPCBzaXplb2YoaXBfY3R4LT5yZWN2X2N0eC5jb21tb25faGRy
KSkNCisJCQkJcmV0dXJuIC1FQUdBSU47DQorCQkJLyogbGVuZ3RoIGZpZWxkIG9mIG1hdXNiX2Nv
bW1vbl9oZHIgKi8NCisJCQlpcF9jdHgtPnJlY3ZfY3R4LmxlZnQgPQ0KKwkJCSAgICAqKHVpbnQx
Nl90ICopICgmaXBfY3R4LT5yZWN2X2N0eC5jb21tb25faGRyWzJdKTsNCisJCQlpcF9jdHgtPnJl
Y3ZfY3R4LnJlY2VpdmVkID0gMDsNCisJCQlpcF9jdHgtPnJlY3ZfY3R4LmJ1ZmZlcgkgID0NCisJ
CQkgICAga3phbGxvYyhpcF9jdHgtPnJlY3ZfY3R4LmxlZnQsIEdGUF9LRVJORUwpOw0KKwkJCXBl
ZWsgPSBmYWxzZTsNCisJCQlpZiAoIWlwX2N0eC0+cmVjdl9jdHguYnVmZmVyKSB7DQorCQkJCWlw
X2N0eC0+Zm5fY2FsbGJhY2soaXBfY3R4LT5jdHgsDQorCQkJCQkJICAgIGlwX2N0eC0+Y2hhbm5l
bCwNCisJCQkJCQkgICAgTUFVU0JfTElOS19SRUNWLA0KKwkJCQkJCSAgICAtRU5PTUVNLCBOVUxM
KTsNCisJCQkJcmV0dXJuIC1FTk9NRU07DQorCQkJfQ0KKwkJfSBlbHNlIHsNCisJCQlpZiAoc3Rh
dHVzIDwgaXBfY3R4LT5yZWN2X2N0eC5sZWZ0KSB7DQorCQkJCWlwX2N0eC0+cmVjdl9jdHgubGVm
dCAtPSBzdGF0dXM7DQorCQkJCWlwX2N0eC0+cmVjdl9jdHgucmVjZWl2ZWQgKz0gc3RhdHVzOw0K
KwkJCX0gZWxzZSB7DQorCQkJCWlwX2N0eC0+Zm5fY2FsbGJhY2soaXBfY3R4LT5jdHgsDQorCQkJ
CQkJICAgIGlwX2N0eC0+Y2hhbm5lbCwNCisJCQkJCQkgICAgTUFVU0JfTElOS19SRUNWLCBzdGF0
dXMsDQorCQkJCQkJICAgIGlwX2N0eC0+cmVjdl9jdHguYnVmZmVyKTsNCisJCQkJX19tYXVzYl9p
cF9yZWN2X2N0eF9jbGVhcigmaXBfY3R4LT5yZWN2X2N0eCk7DQorCQkJCXBlZWsgPSB0cnVlOw0K
KwkJCX0NCisJCX0NCisJfQ0KKw0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitzdGF0aWMgdm9p
ZCBfX21hdXNiX2lwX3JlY3Zfd29yayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQorew0KKwlz
dHJ1Y3QgbWF1c2JfaXBfY3R4ICppcF9jdHggPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IG1h
dXNiX2lwX2N0eCwNCisJCQkJCQkgICByZWN2X3dvcmspOw0KKwlpbnQgc3RhdHVzID0gX19tYXVz
Yl9pcF9yZWN2KGlwX2N0eCk7DQorDQorCWlmIChzdGF0dXMgPD0gMCAmJiBzdGF0dXMgIT0gLUVB
R0FJTikNCisJCXJldHVybjsNCisNCisJcXVldWVfd29yayhpcF9jdHgtPnJlY3Zfd29ya3EsICZp
cF9jdHgtPnJlY3Zfd29yayk7DQorfQ0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVz
Yl9ob3N0L3NyYy91dGlscy9tYXVzYl9kYXRhX2l0ZXJhdG9yLmMgYi9kcml2ZXJzL3N0YWdpbmcv
bWF1c2JfaG9zdC9zcmMvdXRpbHMvbWF1c2JfZGF0YV9pdGVyYXRvci5jDQpuZXcgZmlsZSBtb2Rl
IDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi4zYjk3MzQyYmIxZjMNCi0tLSAvZGV2L251bGwN
CisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy91dGlscy9tYXVzYl9kYXRhX2l0
ZXJhdG9yLmMNCkBAIC0wLDAgKzEsMzAwIEBADQorLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6
IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlzcGxheUxpbmsg
KFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5k
IGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vuc2UgdjIuIFNl
ZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlzIGFyY2hpdmUg
Zm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNsdWRlICJ1dGlscy9tYXVzYl9kYXRh
X2l0ZXJhdG9yLmgiDQorDQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCisjaW5jbHVkZSA8bGlu
dXgvc3RyaW5nLmg+DQorI2luY2x1ZGUgPGxpbnV4L3Vpby5oPg0KKw0KKyNpbmNsdWRlICJocGFs
L2hwYWwuaCINCisjaW5jbHVkZSAidXRpbHMvbWF1c2JfbG9ncy5oIg0KKw0KK3N0YXRpYyBpbnQg
bWF1c2JfcmVhZF92aXJ0dWFsX2J1ZmZlcihzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRv
ciwNCisJCQkJICAgICB1aW50MzJfdCBieXRlX251bSwNCisJCQkJICAgICBzdHJ1Y3QgbGlzdF9o
ZWFkICpkYXRhX2NodW5rc19saXN0LA0KKwkJCQkgICAgIHVpbnQzMl90ICpkYXRhX2NodW5rc19u
dW0pDQorew0KKwl1aW50MzJfdCByZW1fZGF0YQk9IDA7DQorCXVpbnQzMl90IGJ5dGVzX3RvX3Jl
YWQJPSAwOw0KKwlzdHJ1Y3QgbWF1c2JfcGF5bG9hZF9jaHVuayAqZGF0YV9jaHVuayA9IE5VTEw7
DQorDQorCSgqZGF0YV9jaHVua3NfbnVtKSA9IDA7DQorDQorCWlmICghZGF0YV9jaHVua3NfbGlz
dCkNCisJCXJldHVybiAtRUlOVkFMOw0KKw0KKwlJTklUX0xJU1RfSEVBRChkYXRhX2NodW5rc19s
aXN0KTsNCisJcmVtX2RhdGEgICAgICA9IGl0ZXJhdG9yLT5sZW5ndGggLSBpdGVyYXRvci0+b2Zm
c2V0Ow0KKwlieXRlc190b19yZWFkID0gbWluKGJ5dGVfbnVtLCByZW1fZGF0YSk7DQorDQorCWlm
IChieXRlc190b19yZWFkID09IDApDQorCQlyZXR1cm4gMDsNCisNCisJZGF0YV9jaHVuayA9IGt6
YWxsb2Moc2l6ZW9mKCpkYXRhX2NodW5rKSwgR0ZQX0tFUk5FTCk7DQorDQorCWlmICghZGF0YV9j
aHVuaykNCisJCXJldHVybiAtRU5PTUVNOw0KKw0KKwkrKygqZGF0YV9jaHVua3NfbnVtKTsNCisN
CisJZGF0YV9jaHVuay0+a3ZlYy5pb3ZfYmFzZSA9ICh1aW50OF90ICopIChpdGVyYXRvci0+YnVm
ZmVyKSArDQorCQlpdGVyYXRvci0+b2Zmc2V0Ow0KKwlkYXRhX2NodW5rLT5rdmVjLmlvdl9sZW4g
PSBieXRlc190b19yZWFkOw0KKwlpdGVyYXRvci0+b2Zmc2V0ICs9IGJ5dGVzX3RvX3JlYWQ7DQor
DQorCWxpc3RfYWRkX3RhaWwoJmRhdGFfY2h1bmstPmxpc3RfZW50cnksIGRhdGFfY2h1bmtzX2xp
c3QpOw0KKwlyZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGludCBtYXVzYl9yZWFkX3NjYXR0ZXJs
aXN0X2J1ZmZlcihzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRvciwNCisJCQkJCSB1aW50
MzJfdCBieXRlX251bSwNCisJCQkJCSBzdHJ1Y3QgbGlzdF9oZWFkICpkYXRhX2NodW5rc19saXN0
LA0KKwkJCQkJIHVpbnQzMl90ICpkYXRhX2NodW5rc19udW0pDQorew0KKwl1aW50MzJfdCBjdXJy
ZW50X3NnX3JlYWRfbnVtID0gMDsNCisJc3RydWN0IG1hdXNiX3BheWxvYWRfY2h1bmsgKmRhdGFf
Y2h1bmsgPSBOVUxMOw0KKw0KKwkoKmRhdGFfY2h1bmtzX251bSkgPSAwOw0KKw0KKwlpZiAoIWRh
dGFfY2h1bmtzX2xpc3QpDQorCQlyZXR1cm4gLUVJTlZBTDsNCisNCisJSU5JVF9MSVNUX0hFQUQo
ZGF0YV9jaHVua3NfbGlzdCk7DQorCXdoaWxlIChieXRlX251bSkgew0KKw0KKwkJaWYgKGl0ZXJh
dG9yLT5zZ19pdGVyLmNvbnN1bWVkID09IGl0ZXJhdG9yLT5zZ19pdGVyLmxlbmd0aCkgew0KKwkJ
CWlmICghc2dfbWl0ZXJfbmV4dCgmaXRlcmF0b3ItPnNnX2l0ZXIpKQ0KKwkJCQlicmVhazsNCisJ
CQlpdGVyYXRvci0+c2dfaXRlci5jb25zdW1lZCA9IDA7DQorCQl9DQorDQorCQlkYXRhX2NodW5r
ID0ga3phbGxvYyhzaXplb2YoKmRhdGFfY2h1bmspLCBHRlBfS0VSTkVMKTsNCisJCWlmICghZGF0
YV9jaHVuaykgew0KKwkJCXNnX21pdGVyX3N0b3AoJml0ZXJhdG9yLT5zZ19pdGVyKTsNCisJCQly
ZXR1cm4gLUVOT01FTTsNCisJCX0NCisNCisJCWN1cnJlbnRfc2dfcmVhZF9udW0gPSBtaW4oKHNp
emVfdCkgYnl0ZV9udW0sDQorCQkJaXRlcmF0b3ItPnNnX2l0ZXIubGVuZ3RoIC0gaXRlcmF0b3It
PnNnX2l0ZXIuY29uc3VtZWQpOw0KKw0KKwkJZGF0YV9jaHVuay0+a3ZlYy5pb3ZfYmFzZSA9ICh1
aW50OF90ICopIGl0ZXJhdG9yLT5zZ19pdGVyLmFkZHIgKw0KKwkJCQkJICAgICBpdGVyYXRvci0+
c2dfaXRlci5jb25zdW1lZDsNCisJCWRhdGFfY2h1bmstPmt2ZWMuaW92X2xlbiAgPSBjdXJyZW50
X3NnX3JlYWRfbnVtOw0KKw0KKwkJKysoKmRhdGFfY2h1bmtzX251bSk7DQorCQlsaXN0X2FkZF90
YWlsKCZkYXRhX2NodW5rLT5saXN0X2VudHJ5LCBkYXRhX2NodW5rc19saXN0KTsNCisNCisJCWJ5
dGVfbnVtIC09IGN1cnJlbnRfc2dfcmVhZF9udW07DQorCQlpdGVyYXRvci0+c2dfaXRlci5jb25z
dW1lZCArPSBjdXJyZW50X3NnX3JlYWRfbnVtOw0KKwkJZGF0YV9jaHVuayA9IE5VTEw7DQorCX0N
CisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyB1aW50MzJfdCBtYXVzYl93cml0ZV92aXJ0
dWFsX2J1ZmZlcihzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRvciwNCisJCQkJCSAgIHZv
aWQgKmJ1ZmZlciwgdWludDMyX3Qgc2l6ZSkNCit7DQorDQorCXVpbnQzMl90IHJlbV9zcGFjZSAg
ID0gMDsNCisJdWludDMyX3Qgd3JpdGVfY291bnQgPSAwOw0KKw0KKwlpZiAoIWJ1ZmZlciB8fCAh
c2l6ZSkNCisJCXJldHVybiB3cml0ZV9jb3VudDsNCisNCisJcmVtX3NwYWNlICAgPSBpdGVyYXRv
ci0+bGVuZ3RoIC0gaXRlcmF0b3ItPm9mZnNldDsNCisJd3JpdGVfY291bnQgPSBtaW4oc2l6ZSwg
cmVtX3NwYWNlKTsNCisNCisJaWYgKHdyaXRlX2NvdW50ID4gMCkgew0KKwkJdm9pZCAqbG9jYXRp
b24gPSBzaGlmdF9wdHIoaXRlcmF0b3ItPmJ1ZmZlciwgaXRlcmF0b3ItPm9mZnNldCk7DQorDQor
CQltZW1jcHkobG9jYXRpb24sIGJ1ZmZlciwgd3JpdGVfY291bnQpOw0KKwkJaXRlcmF0b3ItPm9m
ZnNldCArPSB3cml0ZV9jb3VudDsNCisJfQ0KKw0KKwlyZXR1cm4gd3JpdGVfY291bnQ7DQorfQ0K
Kw0KK3N0YXRpYyB1aW50MzJfdCBtYXVzYl93cml0ZV9zY2F0dGVybGlzdF9idWZmZXIoc3RydWN0
IG1hdXNiX2RhdGFfaXRlciAqaXRlcmF0b3IsDQorCQkJCQkgICAgICAgdm9pZCAqYnVmZmVyLCB1
aW50MzJfdCBzaXplKQ0KK3sNCisJdWludDMyX3QgY3VycmVudF9zZ19yZW1fc3BhY2UgPSAwOw0K
Kwl1aW50MzJfdCBjb3VudAkJICAgICAgPSAwOw0KKwl1aW50MzJfdCB0b3RhbF9jb3VudAkgICAg
ICA9IDA7DQorCXZvaWQgKmxvY2F0aW9uID0gTlVMTDsNCisNCisJaWYgKCFidWZmZXIgfHwgIXNp
emUpDQorCQlyZXR1cm4gY291bnQ7DQorDQorCXdoaWxlIChzaXplKSB7DQorDQorCQlpZiAoaXRl
cmF0b3ItPnNnX2l0ZXIuY29uc3VtZWQgPj0gaXRlcmF0b3ItPnNnX2l0ZXIubGVuZ3RoKSB7DQor
CQkJaWYgKCFzZ19taXRlcl9uZXh0KCZpdGVyYXRvci0+c2dfaXRlcikpDQorCQkJCWJyZWFrOw0K
KwkJCWl0ZXJhdG9yLT5zZ19pdGVyLmNvbnN1bWVkID0gMDsNCisJCX0NCisNCisJCWN1cnJlbnRf
c2dfcmVtX3NwYWNlID0gaXRlcmF0b3ItPnNnX2l0ZXIubGVuZ3RoIC0NCisJCSAgICBpdGVyYXRv
ci0+c2dfaXRlci5jb25zdW1lZDsNCisNCisJCWNvdW50ID0gbWluKHNpemUsIGN1cnJlbnRfc2df
cmVtX3NwYWNlKTsNCisJCXRvdGFsX2NvdW50ICs9IGNvdW50Ow0KKw0KKwkJbG9jYXRpb24gPSBz
aGlmdF9wdHIoaXRlcmF0b3ItPnNnX2l0ZXIuYWRkciwNCisJCQkJICAgICBpdGVyYXRvci0+c2df
aXRlci5jb25zdW1lZCk7DQorDQorCQltZW1jcHkobG9jYXRpb24sIGJ1ZmZlciwgY291bnQpOw0K
Kw0KKwkJYnVmZmVyID0gc2hpZnRfcHRyKGJ1ZmZlciwgY291bnQpOw0KKwkJc2l6ZSAtPSBjb3Vu
dDsNCisJCWl0ZXJhdG9yLT5zZ19pdGVyLmNvbnN1bWVkICs9IGNvdW50Ow0KKwl9DQorDQorCXJl
dHVybiB0b3RhbF9jb3VudDsNCisNCit9DQorDQoraW50IG1hdXNiX2RhdGFfaXRlcmF0b3JfcmVh
ZChzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRvciwNCisJCQkgICAgIHVpbnQzMl90IGJ5
dGVfbnVtLA0KKwkJCSAgICAgc3RydWN0IGxpc3RfaGVhZCAqZGF0YV9jaHVua3NfbGlzdCwNCisJ
CQkgICAgIHVpbnQzMl90ICpkYXRhX2NodW5rc19udW0pDQorew0KKwlpZiAoaXRlcmF0b3ItPmJ1
ZmZlcikNCisJCXJldHVybiBtYXVzYl9yZWFkX3ZpcnR1YWxfYnVmZmVyKGl0ZXJhdG9yLCBieXRl
X251bSwNCisJCQkJCQkgZGF0YV9jaHVua3NfbGlzdCwNCisJCQkJCQkgZGF0YV9jaHVua3NfbnVt
KTsNCisJZWxzZQ0KKwkJcmV0dXJuIG1hdXNiX3JlYWRfc2NhdHRlcmxpc3RfYnVmZmVyKGl0ZXJh
dG9yLCBieXRlX251bSwNCisJCQkJCQkgICAgIGRhdGFfY2h1bmtzX2xpc3QsDQorCQkJCQkJICAg
ICBkYXRhX2NodW5rc19udW0pOw0KKw0KK30NCisNCit1aW50MzJfdCBtYXVzYl9kYXRhX2l0ZXJh
dG9yX3dyaXRlKHN0cnVjdCBtYXVzYl9kYXRhX2l0ZXIgKml0ZXJhdG9yLA0KKwkJCQkgICB2b2lk
ICpidWZmZXIsIHVpbnQzMl90IGxlbmd0aCkNCit7DQorCWlmIChpdGVyYXRvci0+YnVmZmVyKQ0K
KwkJcmV0dXJuIG1hdXNiX3dyaXRlX3ZpcnR1YWxfYnVmZmVyKGl0ZXJhdG9yLCBidWZmZXIsIGxl
bmd0aCk7DQorCWVsc2UNCisJCXJldHVybiBtYXVzYl93cml0ZV9zY2F0dGVybGlzdF9idWZmZXIo
aXRlcmF0b3IsIGJ1ZmZlciwgbGVuZ3RoKTsNCisNCit9DQorDQorc3RhdGljIGlubGluZSB2b2lk
IG1hdXNiX3NlZWtfdmlydHVhbF9idWZmZXIoc3RydWN0IG1hdXNiX2RhdGFfaXRlciAqaXRlcmF0
b3IsDQorCQkJCQkgICAgIHVpbnQzMl90IHNlZWtfZGVsdGEpDQorew0KKwlpdGVyYXRvci0+b2Zm
c2V0ICs9IG1pbihzZWVrX2RlbHRhLCBpdGVyYXRvci0+bGVuZ3RoIC0NCisJCQkJCSAgICBpdGVy
YXRvci0+b2Zmc2V0KTsNCit9DQorDQorc3RhdGljIHZvaWQgbWF1c2Jfc2Vla19zY2F0dGVybGlz
dF9idWZmZXIoc3RydWN0IG1hdXNiX2RhdGFfaXRlciAqaXRlcmF0b3IsDQorCQkJCQkgIHVpbnQz
Ml90IHNlZWtfZGVsdGEpDQorew0KKwl1aW50MzJfdCByZW1fYnl0ZXNfaW5fY3VycmVudF9zY2F0
dGVyID0gMDsNCisNCisJd2hpbGUgKHNlZWtfZGVsdGEpIHsNCisJCXJlbV9ieXRlc19pbl9jdXJy
ZW50X3NjYXR0ZXIgPQ0KKwkJICAgIGl0ZXJhdG9yLT5zZ19pdGVyLmxlbmd0aCAtIGl0ZXJhdG9y
LT5zZ19pdGVyLmNvbnN1bWVkOw0KKwkJaWYgKHJlbV9ieXRlc19pbl9jdXJyZW50X3NjYXR0ZXIg
PD0gc2Vla19kZWx0YSkgew0KKwkJCWl0ZXJhdG9yLT5zZ19pdGVyLmNvbnN1bWVkICs9DQorCQkJ
ICAgIHJlbV9ieXRlc19pbl9jdXJyZW50X3NjYXR0ZXI7DQorCQkJc2Vla19kZWx0YSAtPSByZW1f
Ynl0ZXNfaW5fY3VycmVudF9zY2F0dGVyOw0KKwkJCWlmICghc2dfbWl0ZXJfbmV4dCgmaXRlcmF0
b3ItPnNnX2l0ZXIpKQ0KKwkJCQlicmVhazsNCisJCQlpdGVyYXRvci0+c2dfaXRlci5jb25zdW1l
ZCA9IDA7DQorCQl9IGVsc2Ugew0KKwkJCWl0ZXJhdG9yLT5zZ19pdGVyLmNvbnN1bWVkICs9IHNl
ZWtfZGVsdGE7DQorCQkJYnJlYWs7DQorCQl9DQorCX0NCit9DQorDQordm9pZCBtYXVzYl9kYXRh
X2l0ZXJhdG9yX3NlZWsoc3RydWN0IG1hdXNiX2RhdGFfaXRlciAqaXRlcmF0b3IsDQorCQkJICAg
ICAgdWludDMyX3Qgc2Vla19kZWx0YSkNCit7DQorCWlmIChpdGVyYXRvci0+YnVmZmVyKQ0KKwkJ
bWF1c2Jfc2Vla192aXJ0dWFsX2J1ZmZlcihpdGVyYXRvciwgc2Vla19kZWx0YSk7DQorCWVsc2UN
CisJCW1hdXNiX3NlZWtfc2NhdHRlcmxpc3RfYnVmZmVyKGl0ZXJhdG9yLCBzZWVrX2RlbHRhKTsN
Cit9DQorDQorc3RhdGljIHZvaWQgbWF1c2JfY2FsY3VsYXRlX2J1ZmZlcl9sZW5ndGgoc3RydWN0
IG1hdXNiX2RhdGFfaXRlciAqaXRlcmF0b3IpDQorew0KKwkvKiBDYWxjdWxhdGUgYnVmZmVyIGxl
bmd0aCAqLw0KKwlpZiAoaXRlcmF0b3ItPmJ1ZmZlcl9sZW4gPiAwKSB7DQorCQkvKiBUcmFuc2Zl
cl9idWZmZXJfbGVuZ3RoIGlzIHBvcHVsYXRlZCAqLw0KKwkJaXRlcmF0b3ItPmxlbmd0aCA9IGl0
ZXJhdG9yLT5idWZmZXJfbGVuOw0KKwl9IGVsc2UgaWYgKGl0ZXJhdG9yLT5zZyAmJiBpdGVyYXRv
ci0+bnVtX3NncyAhPSAwKSB7DQorCQkvKiBUcmFuc2Zlcl9idWZmZXJfbGVuZ3RoIGlzIG5vdCBw
b3B1bGF0ZWQgKi8NCisJCXNnX21pdGVyX3N0YXJ0KCZpdGVyYXRvci0+c2dfaXRlciwgaXRlcmF0
b3ItPnNnLA0KKwkJCQlpdGVyYXRvci0+bnVtX3NncywgaXRlcmF0b3ItPmZsYWdzKTsNCisJCXdo
aWxlIChzZ19taXRlcl9uZXh0KCZpdGVyYXRvci0+c2dfaXRlcikpDQorCQkJaXRlcmF0b3ItPmxl
bmd0aCArPSBpdGVyYXRvci0+c2dfaXRlci5sZW5ndGg7DQorCQlzZ19taXRlcl9zdG9wKCZpdGVy
YXRvci0+c2dfaXRlcik7DQorCX0gZWxzZSB7DQorCQlpdGVyYXRvci0+bGVuZ3RoID0gMDsNCisJ
fQ0KK30NCisNCit2b2lkIG1hdXNiX2luaXRfZGF0YV9pdGVyYXRvcihzdHJ1Y3QgbWF1c2JfZGF0
YV9pdGVyICppdGVyYXRvciwgdm9pZCAqYnVmZmVyLA0KKwkJCSAgICAgIHVpbnQzMl90IGJ1ZmZl
cl9sZW4sIHN0cnVjdCBzY2F0dGVybGlzdCAqc2csDQorCQkJICAgICAgdWludDMyX3QgbnVtX3Nn
cywgYm9vbCBkaXJlY3Rpb24pDQorew0KKwlpdGVyYXRvci0+b2Zmc2V0ID0gMDsNCisJaXRlcmF0
b3ItPmJ1ZmZlciAgICAgPSBidWZmZXI7DQorCWl0ZXJhdG9yLT5idWZmZXJfbGVuID0gYnVmZmVy
X2xlbjsNCisJaXRlcmF0b3ItPmxlbmd0aCAgICAgPSAwOw0KKwlpdGVyYXRvci0+c2cJICAgICA9
IHNnOw0KKwlpdGVyYXRvci0+bnVtX3NncyAgICA9IG51bV9zZ3M7DQorCWl0ZXJhdG9yLT5zZ19z
dGFydGVkID0gMDsNCisNCisJbWF1c2JfY2FsY3VsYXRlX2J1ZmZlcl9sZW5ndGgoaXRlcmF0b3Ip
Ow0KKw0KKwlpZiAoIWJ1ZmZlciAmJiBzZyAmJiBudW1fc2dzICE9IDApIHsNCisJCS8qIFNjYXR0
ZXJsaXN0IHByb3ZpZGVkICovDQorCQlpdGVyYXRvci0+ZmxhZ3MgPSBkaXJlY3Rpb24gPyBTR19N
SVRFUl9UT19TRyA6IFNHX01JVEVSX0ZST01fU0c7DQorCQlzZ19taXRlcl9zdGFydCgmaXRlcmF0
b3ItPnNnX2l0ZXIsIHNnLCBudW1fc2dzLA0KKwkJCWl0ZXJhdG9yLT5mbGFncyk7DQorCQlpdGVy
YXRvci0+c2dfc3RhcnRlZCA9IDE7DQorCX0NCit9DQorDQordm9pZCBtYXVzYl91bmluaXRfZGF0
YV9pdGVyYXRvcihzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRvcikNCit7DQorCWl0ZXJh
dG9yLT5vZmZzZXQgICAgID0gMDsNCisJaXRlcmF0b3ItPmxlbmd0aCAgICAgPSAwOw0KKwlpdGVy
YXRvci0+YnVmZmVyICAgICA9IE5VTEw7DQorCWl0ZXJhdG9yLT5idWZmZXJfbGVuID0gMDsNCisN
CisJaWYgKGl0ZXJhdG9yLT5zZ19zdGFydGVkKQ0KKwkJc2dfbWl0ZXJfc3RvcCgmaXRlcmF0b3It
PnNnX2l0ZXIpOw0KKw0KKwlpdGVyYXRvci0+c2dfc3RhcnRlZCA9IDA7DQorfQ0KKw0KK3ZvaWQg
bWF1c2JfcmVzZXRfZGF0YV9pdGVyYXRvcihzdHJ1Y3QgbWF1c2JfZGF0YV9pdGVyICppdGVyYXRv
cikNCit7DQorCWl0ZXJhdG9yLT5vZmZzZXQgPSAwOw0KKwlpZiAoaXRlcmF0b3ItPnNnX3N0YXJ0
ZWQpIHsNCisJCXNnX21pdGVyX3N0b3AoJml0ZXJhdG9yLT5zZ19pdGVyKTsNCisJCWl0ZXJhdG9y
LT5zZ19zdGFydGVkID0gMDsNCisJfQ0KKw0KKwlpZiAoIWl0ZXJhdG9yLT5idWZmZXIgJiYgaXRl
cmF0b3ItPnNnICYmIGl0ZXJhdG9yLT5udW1fc2dzICE9IDApIHsNCisJCXNnX21pdGVyX3N0YXJ0
KCZpdGVyYXRvci0+c2dfaXRlciwgaXRlcmF0b3ItPnNnLA0KKwkJCWl0ZXJhdG9yLT5udW1fc2dz
LCBpdGVyYXRvci0+ZmxhZ3MpOw0KKwkJaXRlcmF0b3ItPnNnX3N0YXJ0ZWQgPSAxOw0KKwl9DQor
DQorfQ0KKw0KK3VpbnQzMl90IG1hdXNiX2RhdGFfaXRlcmF0b3JfbGVuZ3RoKHN0cnVjdCBtYXVz
Yl9kYXRhX2l0ZXIgKml0ZXJhdG9yKQ0KK3sNCisJcmV0dXJuIGl0ZXJhdG9yLT5sZW5ndGg7DQor
fQ0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy91dGlscy9tYXVz
Yl9tbWFwLmMgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvdXRpbHMvbWF1c2JfbW1h
cC5jDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAwMDAwMDAwLi4zYmViMTYwYjll
NzINCi0tLSAvZGV2L251bGwNCisrKyBiL2RyaXZlcnMvc3RhZ2luZy9tYXVzYl9ob3N0L3NyYy91
dGlscy9tYXVzYl9tbWFwLmMNCkBAIC0wLDAgKzEsMzU4IEBADQorLy8gU1BEWC1MaWNlbnNlLUlk
ZW50aWZpZXI6IEdQTC0yLjANCisvKg0KKyAqIENvcHlyaWdodCAoYykgMjAxOSAtIDIwMjAgRGlz
cGxheUxpbmsgKFVLKSBMdGQuDQorICoNCisgKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUg
dGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYw0KKyAqIExpY2Vu
c2UgdjIuIFNlZSB0aGUgZmlsZSBDT1BZSU5HIGluIHRoZSBtYWluIGRpcmVjdG9yeSBvZiB0aGlz
IGFyY2hpdmUgZm9yDQorICogbW9yZSBkZXRhaWxzLg0KKyAqLw0KKyNpbmNsdWRlICJ1dGlscy9t
YXVzYl9tbWFwLmgiDQorDQorI2luY2x1ZGUgPGxpbnV4L2F0b21pYy5oPg0KKyNpbmNsdWRlIDxs
aW51eC9jZGV2Lmg+DQorI2luY2x1ZGUgPGxpbnV4L2NvbXBsZXRpb24uaD4NCisjaW5jbHVkZSA8
bGludXgvZGV2aWNlLmg+DQorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4
L21tLmg+DQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCisjaW5jbHVkZSA8bGludXgvdWFjY2Vz
cy5oPg0KKyNpbmNsdWRlIDxsaW51eC92ZXJzaW9uLmg+DQorDQorI2luY2x1ZGUgImNvbW1vbi9t
YXVzYl9kcml2ZXJfc3RhdHVzLmgiDQorI2luY2x1ZGUgImhwYWwvaHBhbC5oIg0KKyNpbmNsdWRl
ICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorI2luY2x1ZGUgInV0aWxzL21hdXNiX3JpbmdfYnVmZmVy
LmgiDQorDQorI2RlZmluZSBNQVVTQl9LRVJORUxfREVWX05BTUUgIm1hdXNiX2hvc3QiDQorI2Rl
ZmluZSBNQVVTQl9SRUFEX0RFVklDRV9USU1FT1VUX01TIDUwMA0KKw0KK3N0YXRpYyBpbnQgbWF1
c2JfbWFqb3Jfa2VybmVsID0gLTE7DQorc3RhdGljIHN0cnVjdCBjZGV2ICBtYXVzYl9rZXJuZWxf
ZGV2Ow0KK3N0YXRpYyBzdHJ1Y3QgY2xhc3MgKm1hdXNiX2tlcm5lbF9jbGFzczsNCisNCitzdGF0
aWMgdm9pZCBtYXVzYl92bV9vcGVuKHN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hKQ0KK3sNCisJ
bWF1c2JfcHJfaW5mbygiIik7DQorfQ0KKw0KK3N0YXRpYyB2b2lkIG1hdXNiX3ZtX2Nsb3NlKHN0
cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hKQ0KK3sNCisJc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVy
ICpidWZmZXIgPSBOVUxMLCAqbmV4dCA9IE5VTEw7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3MgPSAw
Ow0KKwl1aW50NjRfdCByaW5nX2J1ZmZlcl9pZCA9ICoodWludDY0X3QgKikodm1hLT52bV9wcml2
YXRlX2RhdGEpOw0KKw0KKwltYXVzYl9wcl9pbmZvKCJSZWxlYXNpbmcgcmluZyBidWZmZXIgd2l0
aCBpZDogJWxsdSIsIHJpbmdfYnVmZmVyX2lkKTsNCisJc3Bpbl9sb2NrX2lycXNhdmUoJm1zcy5s
b2NrLCBmbGFncyk7DQorCWxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZShidWZmZXIsIG5leHQsICZt
c3MuYXZhaWxhYmxlX3JpbmdfYnVmZmVycywNCisJCQkJIGxpc3RfZW50cnkpIHsNCisJCWlmIChi
dWZmZXItPmlkID09IHJpbmdfYnVmZmVyX2lkKSB7DQorCQkJbGlzdF9kZWwoJmJ1ZmZlci0+bGlz
dF9lbnRyeSk7DQorCQkJbWF1c2JfcmluZ19idWZmZXJfZGVzdHJveShidWZmZXIpOw0KKwkJCWtm
cmVlKGJ1ZmZlcik7DQorCQkJYnJlYWs7DQorCQl9DQorCX0NCisJc3Bpbl91bmxvY2tfaXJxcmVz
dG9yZSgmbXNzLmxvY2ssIGZsYWdzKTsNCit9DQorDQorLyoNCisgKiBtYXVzYl92bV9mYXVsdCBp
cyBjYWxsZWQgdGhlIGZpcnN0IHRpbWUgYSBtZW1vcnkgYXJlYSBpcyBhY2Nlc3NlZCB3aGljaCBp
cw0KKyAqIG5vdCBpbiBtZW1vcnkNCisgKi8NCitzdGF0aWMgdm1fZmF1bHRfdCBtYXVzYl92bV9m
YXVsdChzdHJ1Y3Qgdm1fZmF1bHQgKnZtZikNCit7DQorCW1hdXNiX3ByX2luZm8oIiIpOw0KKwly
ZXR1cm4gMDsNCit9DQorDQorc3RhdGljIGNvbnN0IHN0cnVjdCB2bV9vcGVyYXRpb25zX3N0cnVj
dCBtYXVzYl92bV9vcHMgPSB7DQorCS5vcGVuICA9IG1hdXNiX3ZtX29wZW4sDQorCS5jbG9zZSA9
IG1hdXNiX3ZtX2Nsb3NlLA0KKwkuZmF1bHQgPSBtYXVzYl92bV9mYXVsdCwNCit9Ow0KKw0KK3N0
YXRpYyBpbnQgbWF1c2JfZmlsZV9vcGVuKHN0cnVjdCBpbm9kZSAqaW5vZGUsIHN0cnVjdCBmaWxl
ICpmaWxwKQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiIik7DQorDQorCWZpbHAtPnByaXZhdGVfZGF0
YSA9IE5VTEw7DQorDQorCXJldHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX2ZpbGVf
Y2xvc2Uoc3RydWN0IGlub2RlICppbm9kZSwgc3RydWN0IGZpbGUgKmZpbHApDQorew0KKwltYXVz
Yl9wcl9pbmZvKCIiKTsNCisNCisJa2ZyZWUoZmlscC0+cHJpdmF0ZV9kYXRhKTsNCisJZmlscC0+
cHJpdmF0ZV9kYXRhID0gTlVMTDsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyBzc2l6
ZV90IG1hdXNiX2ZpbGVfcmVhZChzdHJ1Y3QgZmlsZSAqZmlscCwgY2hhciBfX3VzZXIgKnVzZXJf
YnVmZmVyLA0KKwkJCXNpemVfdCBzaXplLCBsb2ZmX3QgKm9mZnNldCkNCit7DQorCXNzaXplX3Qg
bnVtX29mX2J5dGVzX3RvX3JlYWQgPSBNQVVTQl9NQVhfTlVNX09GX01BX0RFVlMgKg0KKwkJCQkg
ICAgICAgc2l6ZW9mKHN0cnVjdCBtYXVzYl9ldmVudHNfbm90aWZpY2F0aW9uKTsNCisJdW5zaWdu
ZWQgbG9uZyBudW1fb2ZfYnl0ZXNfbm90X2NvcGllZCA9IDA7DQorCWludCBjb21wbGV0ZWRfZXZl
bnRzID0gMDsNCisJaW50IHJpbmdfZXZlbnRzCSAgICAgPSAwOw0KKwlzdHJ1Y3QgbWF1c2Jfcmlu
Z19idWZmZXIgKnJpbmdfYnVmZmVyOw0KKwlzdHJ1Y3QgbWF1c2JfZGV2aWNlCSAqZGV2ID0gTlVM
TDsNCisJdW5zaWduZWQgbG9uZyBmbGFncwk9IDA7DQorCXVpbnQ4X3QgY3VycmVudF9kZXZpY2UJ
PSAwOw0KKwlpbnQgc3RhdHVzID0gMDsNCisJaW50OF90IGZhaWxfcmV0X3ZhbCA9IDA7DQorDQor
CS8qIFJlc2V0IGhlYXJ0YmVhdCB0aW1lciBldmVudHMgKi8NCisJbWF1c2JfcmVzZXRfaGVhcnRi
ZWF0X2NudCgpOw0KKw0KKwlpZiAoc2l6ZSAhPSBudW1fb2ZfYnl0ZXNfdG9fcmVhZCkgew0KKwkJ
bWF1c2JfcHJfYWxlcnQoIkRpZmZlcmVudCBleHBlY3RlZCBieXRlcyB0byByZWFkICglbGQpIGZy
b20gYWN0dWFsIHNpemUgKCVsZCkiLA0KKwkJCQludW1fb2ZfYnl0ZXNfdG9fcmVhZCwgc2l6ZSk7
DQorCQlmYWlsX3JldF92YWwgPSBNQVVTQl9EUklWRVJfQkFEX1JFQURfQlVGRkVSX1NJWkU7DQor
CQlpZiAoY29weV90b191c2VyKHVzZXJfYnVmZmVyLCAmZmFpbF9yZXRfdmFsLA0KKwkJCQkgc2l6
ZW9mKGZhaWxfcmV0X3ZhbCkpICE9IDApIHsNCisJCQltYXVzYl9wcl93YXJuKCJGYWlsZWQgdG8g
c2V0IGVycm9yIGNvZGUuIik7DQorCQl9DQorCQlyZXR1cm4gTUFVU0JfRFJJVkVSX1JFQURfRVJS
T1I7DQorCX0NCisNCisJLyogSWYgc3VzcGVuZC9oaWJlcm5hdGUgaGFwcGVuZWQgZGVsZXRlIGFs
bCBkZXZpY2VzICovDQorCWlmIChhdG9taWNfeGNoZygmbXNzLm51bV9vZl90cmFuc2l0aW9uc190
b19zbGVlcCwgMCkpIHsNCisJCW1hdXNiX3ByX2FsZXJ0KCJTdXNwZW5kIHN5c3RlbSBldmVudCBk
ZXRlY3RlZCIpOw0KKwkJZmFpbF9yZXRfdmFsID0gTUFVU0JfRFJJVkVSX1NZU1RFTV9TVVNQRU5E
RUQ7DQorCQlpZiAoY29weV90b191c2VyKHVzZXJfYnVmZmVyLCAmZmFpbF9yZXRfdmFsLA0KKwkJ
CQkgc2l6ZW9mKGZhaWxfcmV0X3ZhbCkpICE9IDApIHsNCisJCQltYXVzYl9wcl93YXJuKCJGYWls
ZWQgdG8gc2V0IGVycm9yIGNvZGUuIik7DQorCQl9DQorCQlyZXR1cm4gTUFVU0JfRFJJVkVSX1JF
QURfRVJST1I7DQorCX0NCisNCisJc3RhdHVzID0gd2FpdF9mb3JfY29tcGxldGlvbl9pbnRlcnJ1
cHRpYmxlX3RpbWVvdXQoDQorCQkJCSZtc3MucmluZ3NfZXZlbnRzLm1hdXNiX3JpbmdfaGFzX2V2
ZW50cywNCisJCQkJbXNlY3NfdG9famlmZmllcyhNQVVTQl9SRUFEX0RFVklDRV9USU1FT1VUX01T
KSk7DQorDQorCXJlaW5pdF9jb21wbGV0aW9uKCZtc3MucmluZ3NfZXZlbnRzLm1hdXNiX3Jpbmdf
aGFzX2V2ZW50cyk7DQorDQorCWlmIChhdG9taWNfcmVhZCgmbXNzLnJpbmdzX2V2ZW50cy5tYXVz
Yl9zdG9wX3JlYWRpbmdfcmluZ19ldmVudHMpKSB7DQorCQltYXVzYl9wcl9hbGVydCgiUmluZyBl
dmVudHMgc3RvcHBlZCIpOw0KKwkJZmFpbF9yZXRfdmFsID0gTUFVU0JfRFJJVkVSX1JJTkdfRVZF
TlRTX1NUT1BQRUQ7DQorCQlpZiAoY29weV90b191c2VyKHVzZXJfYnVmZmVyLCAmZmFpbF9yZXRf
dmFsLA0KKwkJCQkgc2l6ZW9mKGZhaWxfcmV0X3ZhbCkpICE9IDApIHsNCisJCQltYXVzYl9wcl93
YXJuKCJGYWlsZWQgdG8gc2V0IGVycm9yIGNvZGUuIik7DQorCQl9DQorCQlyZXR1cm4gTUFVU0Jf
RFJJVkVSX1JFQURfRVJST1I7DQorCX0NCisNCisJLyogVGhlcmUgYXJlIG5vIG5ldyBldmVudHMg
LSB3YWl0aW5nIGZvciBldmVudHMgaGl0IHRpbWVvdXQgKi8NCisJaWYgKHN0YXR1cyA9PSAwKQ0K
KwkJcmV0dXJuIE1BVVNCX0RSSVZFUl9SRUFEX1RJTUVPVVQ7DQorDQorCXNwaW5fbG9ja19pcnFz
YXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKw0KKwlsaXN0X2Zvcl9lYWNoX2VudHJ5KGRldiwgJm1z
cy5tYWRldl9saXN0LCBsaXN0X2VudHJ5KSB7DQorCQltc3MuZXZlbnRzW2N1cnJlbnRfZGV2aWNl
XS5tYWRldl9hZGRyID0gZGV2LT5tYWRldl9hZGRyOw0KKwkJcmluZ19idWZmZXIgPSBkZXYtPnJp
bmdfYnVmZmVyOw0KKwkJcmluZ19ldmVudHMgPSBhdG9taWNfeGNoZygmcmluZ19idWZmZXItPm1h
dXNiX3JpbmdfZXZlbnRzLA0KKwkJCQkJICByaW5nX2V2ZW50cyk7DQorCQljb21wbGV0ZWRfZXZl
bnRzID0gYXRvbWljX3hjaGcoDQorCQkJCSZyaW5nX2J1ZmZlci0+bWF1c2JfY29tcGxldGVkX3Vz
ZXJfZXZlbnRzLA0KKwkJCQljb21wbGV0ZWRfZXZlbnRzKTsNCisJCW1zcy5ldmVudHNbY3VycmVu
dF9kZXZpY2VdLm51bV9vZl9ldmVudHMgPSByaW5nX2V2ZW50czsNCisJCW1zcy5ldmVudHNbY3Vy
cmVudF9kZXZpY2VdLm51bV9vZl9jb21wbGV0ZWRfZXZlbnRzID0NCisJCQkJCQkJICAgY29tcGxl
dGVkX2V2ZW50czsNCisJCWNvbXBsZXRlZF9ldmVudHMgPSAwOw0KKwkJcmluZ19ldmVudHMgPSAw
Ow0KKwkJaWYgKCsrY3VycmVudF9kZXZpY2UgPT0gTUFVU0JfTUFYX05VTV9PRl9NQV9ERVZTKQ0K
KwkJCWJyZWFrOw0KKwl9DQorDQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJm1zcy5sb2NrLCBm
bGFncyk7DQorDQorCW51bV9vZl9ieXRlc190b19yZWFkID0gY3VycmVudF9kZXZpY2UgKg0KKwkJ
CSAgICAgICBzaXplb2Yoc3RydWN0IG1hdXNiX2V2ZW50c19ub3RpZmljYXRpb24pOw0KKw0KKwlu
dW1fb2ZfYnl0ZXNfbm90X2NvcGllZCA9IGNvcHlfdG9fdXNlcih1c2VyX2J1ZmZlciwgJm1zcy5l
dmVudHMsDQorCQkJCQkgICAgICAgbnVtX29mX2J5dGVzX3RvX3JlYWQpOw0KKw0KKwltYXVzYl9w
cl9kZWJ1ZygibnVtX29mX2J5dGVzX25vdF9jb3BpZWQgJWxkLCBudW1fb2ZfYnl0ZXNfdG9fcmVh
ZCAlbGQiLA0KKwkJICAgICAgIG51bV9vZl9ieXRlc19ub3RfY29waWVkLCBudW1fb2ZfYnl0ZXNf
dG9fcmVhZCk7DQorDQorCWlmIChudW1fb2ZfYnl0ZXNfbm90X2NvcGllZCkgew0KKwkJZmFpbF9y
ZXRfdmFsID0gTUFVU0JfRFJJVkVSX0NPUFlfVE9fQlVGRkVSX0ZBSUxFRDsNCisJCWlmIChjb3B5
X3RvX3VzZXIodXNlcl9idWZmZXIsICZmYWlsX3JldF92YWwsDQorCQkJCSBzaXplb2YoZmFpbF9y
ZXRfdmFsKSkgIT0gMCkgew0KKwkJCW1hdXNiX3ByX3dhcm4oIkZhaWxlZCB0byBzZXQgZXJyb3Ig
Y29kZS4iKTsNCisJCX0NCisJCXJldHVybiBNQVVTQl9EUklWRVJfUkVBRF9FUlJPUjsNCisJfQ0K
Kw0KKwlyZXR1cm4gbnVtX29mX2J5dGVzX3RvX3JlYWQ7DQorfQ0KKw0KK3N0YXRpYyBpbnQgbWF1
c2JfbW1hcChzdHJ1Y3QgZmlsZSAqZmlscCwgc3RydWN0IHZtX2FyZWFfc3RydWN0ICp2bWEpDQor
ew0KKwl1bnNpZ25lZCBsb25nIHNpemUgPSB2bWEtPnZtX2VuZCAtIHZtYS0+dm1fc3RhcnQ7DQor
CWludCByZXQ7DQorCXN0cnVjdCBwYWdlICpwYWdlID0gTlVMTDsNCisJaW50IHN0YXR1cyA9IDA7
DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3MgPSAwOw0KKwlzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIg
KnJpbmdfYnVmZmVyID0ga3phbGxvYyhzaXplb2YoKnJpbmdfYnVmZmVyKSwNCisJCQkJCQkJR0ZQ
X0tFUk5FTCk7DQorDQorCWlmICghcmluZ19idWZmZXIpDQorCQlyZXR1cm4gLUVOT01FTTsNCisN
CisJc3RhdHVzID0gbWF1c2JfcmluZ19idWZmZXJfaW5pdChyaW5nX2J1ZmZlcik7DQorCWlmIChz
dGF0dXMgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIlJpbmcgYnVmZmVyIGluaXQgZmFpbGVkIik7
DQorCQltYXVzYl9yaW5nX2J1ZmZlcl9kZXN0cm95KHJpbmdfYnVmZmVyKTsNCisJCWtmcmVlKHJp
bmdfYnVmZmVyKTsNCisJCXJldHVybiAtRU5PTUVNOw0KKwl9DQorDQorCXZtYS0+dm1fcHJpdmF0
ZV9kYXRhID0ga3phbGxvYyhzaXplb2YocmluZ19idWZmZXItPmlkKSwgR0ZQX0tFUk5FTCk7DQor
CWlmICghdm1hLT52bV9wcml2YXRlX2RhdGEpIHsNCisJCW1hdXNiX3ByX2VycigiRmFpbGVkIHRv
IGFsbG9jYXRlIHByaXZhdGUgZGF0YSIpOw0KKwkJbWF1c2JfcmluZ19idWZmZXJfZGVzdHJveShy
aW5nX2J1ZmZlcik7DQorCQlrZnJlZShyaW5nX2J1ZmZlcik7DQorCQlyZXR1cm4gLUVOT01FTTsN
CisJfQ0KKw0KKwlmaWxwLT5wcml2YXRlX2RhdGEgPSB2bWEtPnZtX3ByaXZhdGVfZGF0YTsNCisN
CisJbWF1c2JfcHJfZGVidWcoIiIpOw0KKwl2bWEtPnZtX29wcyA9ICZtYXVzYl92bV9vcHM7DQor
CW1hdXNiX3ZtX29wZW4odm1hKTsNCisNCisJcGFnZSA9IHZpcnRfdG9fcGFnZShyaW5nX2J1ZmZl
ci0+dG9fdXNlcl9idWZmZXIpOw0KKw0KKwlpZiAoc2l6ZSA+ICgyICogTUFVU0JfUklOR19CVUZG
RVJfU0laRSAqIHNpemVvZihzdHJ1Y3QgbWF1c2JfZXZlbnQpKSkgew0KKwkJbWF1c2JfcHJfZXJy
KCJJbnZhbGlkIG1lbW9yeSBzaXplIHRvIG1hcCIpOw0KKwkJbWF1c2JfcmluZ19idWZmZXJfZGVz
dHJveShyaW5nX2J1ZmZlcik7DQorCQlrZnJlZShyaW5nX2J1ZmZlcik7DQorCQlyZXR1cm4gLUVJ
TlZBTDsNCisJfQ0KKw0KKwlyZXQgPSByZW1hcF9wZm5fcmFuZ2Uodm1hLCB2bWEtPnZtX3N0YXJ0
LCBwYWdlX3RvX3BmbihwYWdlKSwgc2l6ZSwNCisJCQkgICAgICB2bWEtPnZtX3BhZ2VfcHJvdCk7
DQorCWlmIChyZXQgPCAwKSB7DQorCQltYXVzYl9wcl9lcnIoIkNvdWxkIG5vdCBtYXAgdGhlIGFk
ZHJlc3MgYXJlYSIpOw0KKwkJbWF1c2JfcmluZ19idWZmZXJfZGVzdHJveShyaW5nX2J1ZmZlcik7
DQorCQlrZnJlZShyaW5nX2J1ZmZlcik7DQorCQlyZXR1cm4gcmV0Ow0KKwl9DQorDQorCXNwaW5f
bG9ja19pcnFzYXZlKCZtc3MubG9jaywgZmxhZ3MpOw0KKwlyaW5nX2J1ZmZlci0+aWQgPSBtc3Mu
cmluZ19idWZmZXJfaWQrKzsNCisJKih1aW50NjRfdCAqKSh2bWEtPnZtX3ByaXZhdGVfZGF0YSkg
PSByaW5nX2J1ZmZlci0+aWQ7DQorCWxpc3RfYWRkX3RhaWwoJnJpbmdfYnVmZmVyLT5saXN0X2Vu
dHJ5LCAmbXNzLmF2YWlsYWJsZV9yaW5nX2J1ZmZlcnMpOw0KKwltYXVzYl9wcl9pbmZvKCJBbGxv
Y2F0ZWQgcmluZyBidWZmZXIgd2l0aCBpZDogJWxsdSIsIHJpbmdfYnVmZmVyLT5pZCk7DQorCXNw
aW5fdW5sb2NrX2lycXJlc3RvcmUoJm1zcy5sb2NrLCBmbGFncyk7DQorDQorCXJldHVybiAwOw0K
K30NCisNCitzdGF0aWMgY2hhciAqbWF1c2Jfa2VybmVsX2Rldm5vZGUoc3RydWN0IGRldmljZSAq
ZGV2LCB1bW9kZV90ICptb2RlKQ0KK3sNCisJaWYgKCFtb2RlKQ0KKwkJcmV0dXJuIE5VTEw7DQor
CSptb2RlID0gMDY2NjsNCisJcmV0dXJuIE5VTEw7DQorfQ0KKw0KK3N0YXRpYyBjb25zdCBzdHJ1
Y3QgZmlsZV9vcGVyYXRpb25zIG1hdXNiX2ZpbGVfb3BzID0gew0KKwkub3BlbgkgPSBtYXVzYl9m
aWxlX29wZW4sDQorCS5yZWxlYXNlID0gbWF1c2JfZmlsZV9jbG9zZSwNCisJLnJlYWQJID0gbWF1
c2JfZmlsZV9yZWFkLA0KKwkubW1hcAkgPSBtYXVzYl9tbWFwLA0KK307DQorDQoraW50IG1hdXNi
X2NyZWF0ZV9kZXYodm9pZCkNCit7DQorCWludCBkZXZpY2VfY3JlYXRlZCA9IDA7DQorCWludCBz
dGF0dXMgPSAwOw0KKw0KKwltYXVzYl9wcl9pbmZvKCIiKTsNCisNCisJLyogY2F0IC9wcm9jL2Rl
dmljZXMgKi8NCisJc3RhdHVzID0gYWxsb2NfY2hyZGV2X3JlZ2lvbigmbWF1c2JfbWFqb3Jfa2Vy
bmVsLCAwLCAxLA0KKwkJCQlNQVVTQl9LRVJORUxfREVWX05BTUUgIl9wcm9jIik7DQorCWlmIChz
dGF0dXMpDQorCQlnb3RvIGNsZWFudXA7DQorCS8qIGxzIC9zeXMvY2xhc3MgKi8NCisJbWF1c2Jf
a2VybmVsX2NsYXNzID0NCisJCWNsYXNzX2NyZWF0ZShUSElTX01PRFVMRSwgTUFVU0JfS0VSTkVM
X0RFVl9OQU1FICJfc3lzIik7DQorCWlmICghbWF1c2Jfa2VybmVsX2NsYXNzKSB7DQorCQlzdGF0
dXMgPSAtRU5PTUVNOw0KKwkJZ290byBjbGVhbnVwOw0KKwl9DQorDQorCW1hdXNiX2tlcm5lbF9j
bGFzcy0+ZGV2bm9kZSA9IG1hdXNiX2tlcm5lbF9kZXZub2RlOw0KKw0KKwlpZiAoIWRldmljZV9j
cmVhdGUobWF1c2Jfa2VybmVsX2NsYXNzLCBOVUxMLCBtYXVzYl9tYWpvcl9rZXJuZWwsIE5VTEws
DQorCQkJTUFVU0JfS0VSTkVMX0RFVl9OQU1FICJfZGV2IikpIHsNCisJCXN0YXR1cyA9IC1FTk9N
RU07DQorCQlnb3RvIGNsZWFudXA7DQorCX0NCisJZGV2aWNlX2NyZWF0ZWQgPSAxOw0KKwljZGV2
X2luaXQoJm1hdXNiX2tlcm5lbF9kZXYsICZtYXVzYl9maWxlX29wcyk7DQorCXN0YXR1cyA9IGNk
ZXZfYWRkKCZtYXVzYl9rZXJuZWxfZGV2LCBtYXVzYl9tYWpvcl9rZXJuZWwsIDEpOw0KKwlpZiAo
c3RhdHVzKQ0KKwkJZ290byBjbGVhbnVwOw0KKwlyZXR1cm4gMDsNCitjbGVhbnVwOg0KKwltYXVz
Yl9jbGVhbnVwX2RldihkZXZpY2VfY3JlYXRlZCk7DQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0K
K3ZvaWQgbWF1c2JfY2xlYW51cF9kZXYoaW50IGRldmljZV9jcmVhdGVkKQ0KK3sNCisJbWF1c2Jf
cHJfaW5mbygiRW50ZXIiKTsNCisNCisJaWYgKGRldmljZV9jcmVhdGVkKSB7DQorCQlkZXZpY2Vf
ZGVzdHJveShtYXVzYl9rZXJuZWxfY2xhc3MsIG1hdXNiX21ham9yX2tlcm5lbCk7DQorCQltYXVz
Yl9wcl9pbmZvKCJkZXZpY2UgZGVzdHJveWVkIik7DQorCQljZGV2X2RlbCgmbWF1c2Jfa2VybmVs
X2Rldik7DQorCQltYXVzYl9wcl9pbmZvKCJkZXZpY2UgZGVsZXRlZCIpOw0KKwl9DQorCWlmICht
YXVzYl9rZXJuZWxfY2xhc3MpIHsNCisJCWNsYXNzX2Rlc3Ryb3kobWF1c2Jfa2VybmVsX2NsYXNz
KTsNCisJCW1hdXNiX3ByX2luZm8oImNsYXNzIGRlc3Ryb3llZCIpOw0KKwl9DQorCWlmIChtYXVz
Yl9tYWpvcl9rZXJuZWwgIT0gLTEpIHsNCisJCXVucmVnaXN0ZXJfY2hyZGV2X3JlZ2lvbihtYXVz
Yl9tYWpvcl9rZXJuZWwsIDEpOw0KKwkJbWF1c2JfcHJfaW5mbygidW5yZWdpc3RlcmVkIik7DQor
CX0NCisJbWF1c2JfcHJfaW5mbygiRXhpdCIpOw0KK30NCisNCit2b2lkIG1hdXNiX25vdGlmeV9j
b21wbGV0ZWRfdXNlcl9ldmVudHMoc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyICpyaW5nX2J1ZmZl
cikNCit7DQorCWludCBjb21wbGV0ZWQ7DQorDQorCWNvbXBsZXRlZCA9IGF0b21pY19pbmNfcmV0
dXJuKA0KKwkJCQkmcmluZ19idWZmZXItPm1hdXNiX2NvbXBsZXRlZF91c2VyX2V2ZW50cyk7DQor
CW1hdXNiX3ByX2RlYnVnKCJtYXVzYl9jb21wbGV0ZWRfdXNlcl9ldmVudHMgSU5DUkVNRU5URUQg
JWQiLA0KKwkJCWNvbXBsZXRlZCk7DQorCWlmIChjb21wbGV0ZWQgPiBNQVVTQl9SSU5HX0JVRkZF
Ul9TSVpFIC8gMTYpDQorCQljb21wbGV0ZSgmbXNzLnJpbmdzX2V2ZW50cy5tYXVzYl9yaW5nX2hh
c19ldmVudHMpOw0KK30NCisNCit2b2lkIG1hdXNiX25vdGlmeV9yaW5nX2V2ZW50cyhzdHJ1Y3Qg
bWF1c2JfcmluZ19idWZmZXIgKnJpbmdfYnVmZmVyKQ0KK3sNCisJaW50IGV2ZW50czsNCisNCisJ
ZXZlbnRzID0gYXRvbWljX2luY19yZXR1cm4oJnJpbmdfYnVmZmVyLT5tYXVzYl9yaW5nX2V2ZW50
cyk7DQorCWlmIChldmVudHMgPT0gMSkNCisJCWNvbXBsZXRlKCZtc3MucmluZ3NfZXZlbnRzLm1h
dXNiX3JpbmdfaGFzX2V2ZW50cyk7DQorfQ0KKw0KK3ZvaWQgbWF1c2Jfc3RvcF9yaW5nX2V2ZW50
cyh2b2lkKQ0KK3sNCisJbWF1c2JfcHJfaW5mbygiIik7DQorCWF0b21pY19zZXQoJm1zcy5yaW5n
c19ldmVudHMubWF1c2Jfc3RvcF9yZWFkaW5nX3JpbmdfZXZlbnRzLCAxKTsNCisJY29tcGxldGUo
Jm1zcy5yaW5nc19ldmVudHMubWF1c2JfcmluZ19oYXNfZXZlbnRzKTsNCit9DQpkaWZmIC0tZ2l0
IGEvZHJpdmVycy9zdGFnaW5nL21hdXNiX2hvc3Qvc3JjL3V0aWxzL21hdXNiX3JpbmdfYnVmZmVy
LmMgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMvdXRpbHMvbWF1c2JfcmluZ19idWZm
ZXIuYw0KbmV3IGZpbGUgbW9kZSAxMDA2NDQNCmluZGV4IDAwMDAwMDAwMDAwMC4uNWFiZDM5NmIw
N2I1DQotLS0gL2Rldi9udWxsDQorKysgYi9kcml2ZXJzL3N0YWdpbmcvbWF1c2JfaG9zdC9zcmMv
dXRpbHMvbWF1c2JfcmluZ19idWZmZXIuYw0KQEAgLTAsMCArMSwxNDAgQEANCisvLyBTUERYLUxp
Y2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMA0KKy8qDQorICogQ29weXJpZ2h0IChjKSAyMDE5IC0g
MjAyMCBEaXNwbGF5TGluayAoVUspIEx0ZC4NCisgKg0KKyAqIFRoaXMgZmlsZSBpcyBzdWJqZWN0
IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljDQor
ICogTGljZW5zZSB2Mi4gU2VlIHRoZSBmaWxlIENPUFlJTkcgaW4gdGhlIG1haW4gZGlyZWN0b3J5
IG9mIHRoaXMgYXJjaGl2ZSBmb3INCisgKiBtb3JlIGRldGFpbHMuDQorICovDQorI2luY2x1ZGUg
InV0aWxzL21hdXNiX3JpbmdfYnVmZmVyLmgiDQorDQorI2luY2x1ZGUgPGxpbnV4L2NkZXYuaD4N
CisjaW5jbHVkZSA8bGludXgvY2lyY19idWYuaD4NCisjaW5jbHVkZSA8bGludXgvZGV2aWNlLmg+
DQorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+DQorI2luY2x1ZGUgPGxpbnV4L2xvZzIuaD4NCisjaW5j
bHVkZSA8bGludXgvbW0uaD4NCisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+DQorI2luY2x1ZGUg
PGxpbnV4L3NlcV9maWxlLmg+DQorI2luY2x1ZGUgPGxpbnV4L3NsYWIuaD4NCisjaW5jbHVkZSA8
bGludXgvdmVyc2lvbi5oPg0KKw0KKyNpbmNsdWRlICJocGFsL21hdXNiX2V2ZW50cy5oIg0KKyNp
bmNsdWRlICJ1dGlscy9tYXVzYl9sb2dzLmgiDQorDQorc3RhdGljIHZvaWQgbWF1c2JfY2xlYW51
cF9yaW5nX2J1ZmZlcl9ldmVudChzdHJ1Y3QgbWF1c2JfZXZlbnQgKmV2ZW50KQ0KK3sNCisJbWF1
c2JfcHJfZGVidWcoImV2ZW50PSVkIiwgZXZlbnQtPnR5cGUpOw0KKwlzd2l0Y2ggKGV2ZW50LT50
eXBlKSB7DQorCWNhc2UgTUFVU0JfRVZFTlRfVFlQRV9TRU5EX0RBVEFfTVNHOg0KKwkJbWF1c2Jf
Y2xlYW51cF9zZW5kX2RhdGFfbXNnX2V2ZW50KGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1B
VVNCX0VWRU5UX1RZUEVfUkVDRUlWRURfREFUQV9NU0c6DQorCQltYXVzYl9jbGVhbnVwX3JlY2Vp
dmVkX2RhdGFfbXNnX2V2ZW50KGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5U
X1RZUEVfREVMRVRFX0RBVEFfVFJBTlNGRVI6DQorCQltYXVzYl9jbGVhbnVwX2RlbGV0ZV9kYXRh
X3RyYW5zZmVyX2V2ZW50KGV2ZW50KTsNCisJCWJyZWFrOw0KKwljYXNlIE1BVVNCX0VWRU5UX1RZ
UEVfTk9ORToNCisJCWJyZWFrOw0KKwlkZWZhdWx0Og0KKwkJbWF1c2JfcHJfd2FybigiVW5rbm93
biBldmVudCB0eXBlIik7DQorCQlicmVhazsNCisJfQ0KK30NCisNCitzdGF0aWMgaW50IG1hdXNi
X2dldF9wYWdlX29yZGVyKHVuc2lnbmVkIGludCBudW1fb2ZfZWxlbXMsDQorCQkJCXVuc2lnbmVk
IGludCBlbGVtX3NpemUpDQorew0KKwl1bnNpZ25lZCBpbnQgbnVtX29mX3BhZ2VzID0gRElWX1JP
VU5EX1VQKA0KKwkJCQkJbnVtX29mX2VsZW1zICogZWxlbV9zaXplLCBQQUdFX1NJWkUpOw0KKwl1
bnNpZ25lZCBpbnQgb3JkZXIgPSBpbG9nMihudW1fb2ZfcGFnZXMpICsNCisJCQkgICAgIChpc19w
b3dlcl9vZl8yKG51bV9vZl9wYWdlcykgPyAwIDogMSk7DQorCXJldHVybiBvcmRlcjsNCit9DQor
DQoraW50IG1hdXNiX3JpbmdfYnVmZmVyX2luaXQoc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyICpy
aW5nKQ0KK3sNCisJaW50IHBhZ2Vfb3JkZXIgPSBtYXVzYl9nZXRfcGFnZV9vcmRlcigyICogTUFV
U0JfUklOR19CVUZGRVJfU0laRSwNCisJCQkJCXNpemVvZihzdHJ1Y3QgbWF1c2JfZXZlbnQpKTsN
CisJcmluZy0+dG9fdXNlcl9idWZmZXIgPQ0KKwkJKHN0cnVjdCBtYXVzYl9ldmVudCAqKV9fZ2V0
X2ZyZWVfcGFnZXMoR0ZQX0tFUk5FTCwgcGFnZV9vcmRlcik7DQorCWlmICghcmluZy0+dG9fdXNl
cl9idWZmZXIpDQorCQlyZXR1cm4gLUVOT01FTTsNCisJcmluZy0+ZnJvbV91c2VyX2J1ZmZlciA9
IHJpbmctPnRvX3VzZXJfYnVmZmVyICsgTUFVU0JfUklOR19CVUZGRVJfU0laRTsNCisJcmluZy0+
aGVhZCA9IDA7DQorCXJpbmctPnRhaWwgPSAwOw0KKwlyaW5nLT5jdXJyZW50X2Zyb21fdXNlciA9
IDA7DQorCXNwaW5fbG9ja19pbml0KCZyaW5nLT5sb2NrKTsNCisNCisJcmV0dXJuIDA7DQorfQ0K
Kw0KK2ludCBtYXVzYl9yaW5nX2J1ZmZlcl9wdXQoc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyICpy
aW5nLA0KKwkJCSAgc3RydWN0IG1hdXNiX2V2ZW50ICpldmVudCkNCit7DQorCXVuc2lnbmVkIGxv
bmcgZmxhZ3M7DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZyaW5nLT5sb2NrLCBmbGFncyk7DQor
CWlmIChDSVJDX1NQQUNFKHJpbmctPmhlYWQsIHJpbmctPnRhaWwsIE1BVVNCX1JJTkdfQlVGRkVS
X1NJWkUpIDwgMSkgew0KKwkJc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmcmluZy0+bG9jaywgZmxh
Z3MpOw0KKwkJcmV0dXJuIC1FTk9TUEM7DQorCX0NCisJbWVtY3B5KHJpbmctPnRvX3VzZXJfYnVm
ZmVyICsgcmluZy0+aGVhZCwgZXZlbnQsIHNpemVvZigqZXZlbnQpKTsNCisJbWF1c2JfcHJfZGVi
dWcoIkhFQUQ9JWQsIFRBSUw9JWQiLCByaW5nLT5oZWFkLCByaW5nLT50YWlsKTsNCisJcmluZy0+
aGVhZCA9IChyaW5nLT5oZWFkICsgMSkgJiAoTUFVU0JfUklOR19CVUZGRVJfU0laRSAtIDEpOw0K
KwltYXVzYl9wcl9kZWJ1ZygiSEVBRD0lZCwgVEFJTD0lZCIsIHJpbmctPmhlYWQsIHJpbmctPnRh
aWwpOw0KKwlzcGluX3VubG9ja19pcnFyZXN0b3JlKCZyaW5nLT5sb2NrLCBmbGFncyk7DQorCXJl
dHVybiAwOw0KK30NCisNCitzdGF0aWMgaW50IG1hdXNiX3JpbmdfYnVmZmVyX2dldChzdHJ1Y3Qg
bWF1c2JfcmluZ19idWZmZXIgKnJpbmcsDQorCQkJCXN0cnVjdCBtYXVzYl9ldmVudCAqZXZlbnQp
DQorew0KKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKw0KKwlzcGluX2xvY2tfaXJxc2F2ZSgmcmlu
Zy0+bG9jaywgZmxhZ3MpOw0KKwlpZiAoQ0lSQ19DTlQocmluZy0+aGVhZCwgcmluZy0+dGFpbCwg
TUFVU0JfUklOR19CVUZGRVJfU0laRSkgPCAxKSB7DQorCQlzcGluX3VubG9ja19pcnFyZXN0b3Jl
KCZyaW5nLT5sb2NrLCBmbGFncyk7DQorCQlyZXR1cm4gLUVOT1NQQzsNCisJfQ0KKwltZW1jcHko
ZXZlbnQsIHJpbmctPnRvX3VzZXJfYnVmZmVyICsgcmluZy0+dGFpbCwgc2l6ZW9mKCpldmVudCkp
Ow0KKwltYXVzYl9wcl9kZWJ1ZygiSEVBRD0lZCwgVEFJTD0lZCIsIHJpbmctPmhlYWQsIHJpbmct
PnRhaWwpOw0KKwlyaW5nLT50YWlsID0gKHJpbmctPnRhaWwgKyAxKSAmIChNQVVTQl9SSU5HX0JV
RkZFUl9TSVpFIC0gMSk7DQorCW1hdXNiX3ByX2RlYnVnKCJIRUFEPSVkLCBUQUlMPSVkIiwgcmlu
Zy0+aGVhZCwgcmluZy0+dGFpbCk7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnJpbmctPmxv
Y2ssIGZsYWdzKTsNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3ZvaWQgbWF1c2JfcmluZ19idWZmZXJf
Y2xlYW51cChzdHJ1Y3QgbWF1c2JfcmluZ19idWZmZXIgKnJpbmcpDQorew0KKwlzdHJ1Y3QgbWF1
c2JfZXZlbnQgZXZlbnQ7DQorDQorCW1hdXNiX3ByX2luZm8oIiIpOw0KKwl3aGlsZSAobWF1c2Jf
cmluZ19idWZmZXJfZ2V0KHJpbmcsICZldmVudCkgPT0gMCkNCisJCW1hdXNiX2NsZWFudXBfcmlu
Z19idWZmZXJfZXZlbnQoJmV2ZW50KTsNCit9DQorDQordm9pZCBtYXVzYl9yaW5nX2J1ZmZlcl9k
ZXN0cm95KHN0cnVjdCBtYXVzYl9yaW5nX2J1ZmZlciAqcmluZykNCit7DQorCWludCBwYWdlX29y
ZGVyID0gbWF1c2JfZ2V0X3BhZ2Vfb3JkZXIoMiAqIE1BVVNCX1JJTkdfQlVGRkVSX1NJWkUsDQor
CQkJCQkgICAgICBzaXplb2Yoc3RydWN0IG1hdXNiX2V2ZW50KSk7DQorCWlmIChyaW5nICYmIHJp
bmctPnRvX3VzZXJfYnVmZmVyKQ0KKwkJZnJlZV9wYWdlcygodW5zaWduZWQgbG9uZylyaW5nLT50
b191c2VyX2J1ZmZlciwgcGFnZV9vcmRlcik7DQorfQ0KKw0KK2ludCBtYXVzYl9yaW5nX2J1ZmZl
cl9tb3ZlX3RhaWwoc3RydWN0IG1hdXNiX3JpbmdfYnVmZmVyICpyaW5nLCB1aW50MzJfdCBjb3Vu
dCkNCit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorDQorCXNwaW5fbG9ja19pcnFzYXZlKCZy
aW5nLT5sb2NrLCBmbGFncyk7DQorCWlmIChDSVJDX0NOVChyaW5nLT5oZWFkLCByaW5nLT50YWls
LCBNQVVTQl9SSU5HX0JVRkZFUl9TSVpFKSA8IGNvdW50KSB7DQorCQlzcGluX3VubG9ja19pcnFy
ZXN0b3JlKCZyaW5nLT5sb2NrLCBmbGFncyk7DQorCQlyZXR1cm4gLUVOT1NQQzsNCisJfQ0KKwlt
YXVzYl9wcl9kZWJ1Zygib2xkIEhFQUQ9JWQsIFRBSUw9JWQiLCByaW5nLT5oZWFkLCByaW5nLT50
YWlsKTsNCisJcmluZy0+dGFpbCA9IChyaW5nLT50YWlsICsgY291bnQpICYgKE1BVVNCX1JJTkdf
QlVGRkVSX1NJWkUgLSAxKTsNCisJbWF1c2JfcHJfZGVidWcoIm5ldyBIRUFEPSVkLCBUQUlMPSVk
IiwgcmluZy0+aGVhZCwgcmluZy0+dGFpbCk7DQorCXNwaW5fdW5sb2NrX2lycXJlc3RvcmUoJnJp
bmctPmxvY2ssIGZsYWdzKTsNCisJcmV0dXJuIDA7DQorfQ0K
--_002_VI1PR10MB19658F2B6FDAD88FAA05546591320VI1PR10MB1965EURP_
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
devel mailing list
devel@linuxdriverproject.org
http://driverdev.linuxdriverproject.org/mailman/listinfo/driverdev-devel

--_002_VI1PR10MB19658F2B6FDAD88FAA05546591320VI1PR10MB1965EURP_--

